

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Nov 14 22:44:55 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=3
    16                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=3
    17                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Generated 17/10/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4321 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000FE0                     bsr             equ	4064
    70   000FE9                     fsr0            equ	4073
    71   000FEA                     fsr0h           equ	4074
    72   000FE9                     fsr0l           equ	4073
    73   000FE1                     fsr1            equ	4065
    74   000FE2                     fsr1h           equ	4066
    75   000FE1                     fsr1l           equ	4065
    76   000FD9                     fsr2            equ	4057
    77   000FDA                     fsr2h           equ	4058
    78   000FD9                     fsr2l           equ	4057
    79   000FEF                     indf0           equ	4079
    80   000FE7                     indf1           equ	4071
    81   000FDF                     indf2           equ	4063
    82   000FF2                     intcon          equ	4082
    83   000000                     nvmcon          equ	0
    84   000FF9                     pcl             equ	4089
    85   000FFA                     pclath          equ	4090
    86   000FFB                     pclatu          equ	4091
    87   000FEB                     plusw0          equ	4075
    88   000FE3                     plusw1          equ	4067
    89   000FDB                     plusw2          equ	4059
    90   000FED                     postdec0        equ	4077
    91   000FE5                     postdec1        equ	4069
    92   000FDD                     postdec2        equ	4061
    93   000FEE                     postinc0        equ	4078
    94   000FE6                     postinc1        equ	4070
    95   000FDE                     postinc2        equ	4062
    96   000FEC                     preinc0         equ	4076
    97   000FE4                     preinc1         equ	4068
    98   000FDC                     preinc2         equ	4060
    99   000FF3                     prod            equ	4083
   100   000FF4                     prodh           equ	4084
   101   000FF3                     prodl           equ	4083
   102   000FD8                     status          equ	4056
   103   000FF5                     tablat          equ	4085
   104   000FF6                     tblptr          equ	4086
   105   000FF7                     tblptrh         equ	4087
   106   000FF6                     tblptrl         equ	4086
   107   000FF8                     tblptru         equ	4088
   108   000FFD                     tosl            equ	4093
   109   000FE8                     wreg            equ	4072
   110   000F80                     PORTA           equ	3968	;# 
   111   000F81                     PORTB           equ	3969	;# 
   112   000F82                     PORTC           equ	3970	;# 
   113   000F83                     PORTD           equ	3971	;# 
   114   000F84                     PORTE           equ	3972	;# 
   115   000F89                     LATA            equ	3977	;# 
   116   000F8A                     LATB            equ	3978	;# 
   117   000F8B                     LATC            equ	3979	;# 
   118   000F8C                     LATD            equ	3980	;# 
   119   000F8D                     LATE            equ	3981	;# 
   120   000F92                     TRISA           equ	3986	;# 
   121   000F92                     DDRA            equ	3986	;# 
   122   000F93                     TRISB           equ	3987	;# 
   123   000F93                     DDRB            equ	3987	;# 
   124   000F94                     TRISC           equ	3988	;# 
   125   000F94                     DDRC            equ	3988	;# 
   126   000F95                     TRISD           equ	3989	;# 
   127   000F95                     DDRD            equ	3989	;# 
   128   000F96                     TRISE           equ	3990	;# 
   129   000F96                     DDRE            equ	3990	;# 
   130   000F9B                     OSCTUNE         equ	3995	;# 
   131   000F9D                     PIE1            equ	3997	;# 
   132   000F9E                     PIR1            equ	3998	;# 
   133   000F9F                     IPR1            equ	3999	;# 
   134   000FA0                     PIE2            equ	4000	;# 
   135   000FA1                     PIR2            equ	4001	;# 
   136   000FA2                     IPR2            equ	4002	;# 
   137   000FA6                     EECON1          equ	4006	;# 
   138   000FA7                     EECON2          equ	4007	;# 
   139   000FA8                     EEDATA          equ	4008	;# 
   140   000FA9                     EEADR           equ	4009	;# 
   141   000FAB                     RCSTA           equ	4011	;# 
   142   000FAB                     RCSTA1          equ	4011	;# 
   143   000FAC                     TXSTA           equ	4012	;# 
   144   000FAC                     TXSTA1          equ	4012	;# 
   145   000FAD                     TXREG           equ	4013	;# 
   146   000FAD                     TXREG1          equ	4013	;# 
   147   000FAE                     RCREG           equ	4014	;# 
   148   000FAE                     RCREG1          equ	4014	;# 
   149   000FAF                     SPBRG           equ	4015	;# 
   150   000FAF                     SPBRG1          equ	4015	;# 
   151   000FB0                     SPBRGH          equ	4016	;# 
   152   000FB1                     T3CON           equ	4017	;# 
   153   000FB2                     TMR3            equ	4018	;# 
   154   000FB2                     TMR3L           equ	4018	;# 
   155   000FB3                     TMR3H           equ	4019	;# 
   156   000FB4                     CMCON           equ	4020	;# 
   157   000FB5                     CVRCON          equ	4021	;# 
   158   000FB6                     ECCP1AS         equ	4022	;# 
   159   000FB7                     ECCP1DEL        equ	4023	;# 
   160   000FB7                     PWM1CON         equ	4023	;# 
   161   000FB8                     BAUDCON         equ	4024	;# 
   162   000FB8                     BAUDCTL         equ	4024	;# 
   163   000FBA                     CCP2CON         equ	4026	;# 
   164   000FBB                     CCPR2           equ	4027	;# 
   165   000FBB                     CCPR2L          equ	4027	;# 
   166   000FBC                     CCPR2H          equ	4028	;# 
   167   000FBD                     CCP1CON         equ	4029	;# 
   168   000FBD                     ECCP1CON        equ	4029	;# 
   169   000FBE                     CCPR1           equ	4030	;# 
   170   000FBE                     CCPR1L          equ	4030	;# 
   171   000FBF                     CCPR1H          equ	4031	;# 
   172   000FC0                     ADCON2          equ	4032	;# 
   173   000FC1                     ADCON1          equ	4033	;# 
   174   000FC2                     ADCON0          equ	4034	;# 
   175   000FC3                     ADRES           equ	4035	;# 
   176   000FC3                     ADRESL          equ	4035	;# 
   177   000FC4                     ADRESH          equ	4036	;# 
   178   000FC5                     SSPCON2         equ	4037	;# 
   179   000FC6                     SSPCON1         equ	4038	;# 
   180   000FC7                     SSPSTAT         equ	4039	;# 
   181   000FC8                     SSPADD          equ	4040	;# 
   182   000FC9                     SSPBUF          equ	4041	;# 
   183   000FCA                     T2CON           equ	4042	;# 
   184   000FCB                     PR2             equ	4043	;# 
   185   000FCB                     MEMCON          equ	4043	;# 
   186   000FCC                     TMR2            equ	4044	;# 
   187   000FCD                     T1CON           equ	4045	;# 
   188   000FCE                     TMR1            equ	4046	;# 
   189   000FCE                     TMR1L           equ	4046	;# 
   190   000FCF                     TMR1H           equ	4047	;# 
   191   000FD0                     RCON            equ	4048	;# 
   192   000FD1                     WDTCON          equ	4049	;# 
   193   000FD2                     HLVDCON         equ	4050	;# 
   194   000FD2                     LVDCON          equ	4050	;# 
   195   000FD3                     OSCCON          equ	4051	;# 
   196   000FD5                     T0CON           equ	4053	;# 
   197   000FD6                     TMR0            equ	4054	;# 
   198   000FD6                     TMR0L           equ	4054	;# 
   199   000FD7                     TMR0H           equ	4055	;# 
   200   000FD8                     STATUS          equ	4056	;# 
   201   000FD9                     FSR2            equ	4057	;# 
   202   000FD9                     FSR2L           equ	4057	;# 
   203   000FDA                     FSR2H           equ	4058	;# 
   204   000FDB                     PLUSW2          equ	4059	;# 
   205   000FDC                     PREINC2         equ	4060	;# 
   206   000FDD                     POSTDEC2        equ	4061	;# 
   207   000FDE                     POSTINC2        equ	4062	;# 
   208   000FDF                     INDF2           equ	4063	;# 
   209   000FE0                     BSR             equ	4064	;# 
   210   000FE1                     FSR1            equ	4065	;# 
   211   000FE1                     FSR1L           equ	4065	;# 
   212   000FE2                     FSR1H           equ	4066	;# 
   213   000FE3                     PLUSW1          equ	4067	;# 
   214   000FE4                     PREINC1         equ	4068	;# 
   215   000FE5                     POSTDEC1        equ	4069	;# 
   216   000FE6                     POSTINC1        equ	4070	;# 
   217   000FE7                     INDF1           equ	4071	;# 
   218   000FE8                     WREG            equ	4072	;# 
   219   000FE9                     FSR0            equ	4073	;# 
   220   000FE9                     FSR0L           equ	4073	;# 
   221   000FEA                     FSR0H           equ	4074	;# 
   222   000FEB                     PLUSW0          equ	4075	;# 
   223   000FEC                     PREINC0         equ	4076	;# 
   224   000FED                     POSTDEC0        equ	4077	;# 
   225   000FEE                     POSTINC0        equ	4078	;# 
   226   000FEF                     INDF0           equ	4079	;# 
   227   000FF0                     INTCON3         equ	4080	;# 
   228   000FF1                     INTCON2         equ	4081	;# 
   229   000FF2                     INTCON          equ	4082	;# 
   230   000FF3                     PROD            equ	4083	;# 
   231   000FF3                     PRODL           equ	4083	;# 
   232   000FF4                     PRODH           equ	4084	;# 
   233   000FF5                     TABLAT          equ	4085	;# 
   234   000FF6                     TBLPTR          equ	4086	;# 
   235   000FF6                     TBLPTRL         equ	4086	;# 
   236   000FF7                     TBLPTRH         equ	4087	;# 
   237   000FF8                     TBLPTRU         equ	4088	;# 
   238   000FF9                     PCLAT           equ	4089	;# 
   239   000FF9                     PC              equ	4089	;# 
   240   000FF9                     PCL             equ	4089	;# 
   241   000FFA                     PCLATH          equ	4090	;# 
   242   000FFB                     PCLATU          equ	4091	;# 
   243   000FFC                     STKPTR          equ	4092	;# 
   244   000FFD                     TOS             equ	4093	;# 
   245   000FFD                     TOSL            equ	4093	;# 
   246   000FFE                     TOSH            equ	4094	;# 
   247   000FFF                     TOSU            equ	4095	;# 
   248   000F80                     PORTA           equ	3968	;# 
   249   000F81                     PORTB           equ	3969	;# 
   250   000F82                     PORTC           equ	3970	;# 
   251   000F83                     PORTD           equ	3971	;# 
   252   000F84                     PORTE           equ	3972	;# 
   253   000F89                     LATA            equ	3977	;# 
   254   000F8A                     LATB            equ	3978	;# 
   255   000F8B                     LATC            equ	3979	;# 
   256   000F8C                     LATD            equ	3980	;# 
   257   000F8D                     LATE            equ	3981	;# 
   258   000F92                     TRISA           equ	3986	;# 
   259   000F92                     DDRA            equ	3986	;# 
   260   000F93                     TRISB           equ	3987	;# 
   261   000F93                     DDRB            equ	3987	;# 
   262   000F94                     TRISC           equ	3988	;# 
   263   000F94                     DDRC            equ	3988	;# 
   264   000F95                     TRISD           equ	3989	;# 
   265   000F95                     DDRD            equ	3989	;# 
   266   000F96                     TRISE           equ	3990	;# 
   267   000F96                     DDRE            equ	3990	;# 
   268   000F9B                     OSCTUNE         equ	3995	;# 
   269   000F9D                     PIE1            equ	3997	;# 
   270   000F9E                     PIR1            equ	3998	;# 
   271   000F9F                     IPR1            equ	3999	;# 
   272   000FA0                     PIE2            equ	4000	;# 
   273   000FA1                     PIR2            equ	4001	;# 
   274   000FA2                     IPR2            equ	4002	;# 
   275   000FA6                     EECON1          equ	4006	;# 
   276   000FA7                     EECON2          equ	4007	;# 
   277   000FA8                     EEDATA          equ	4008	;# 
   278   000FA9                     EEADR           equ	4009	;# 
   279   000FAB                     RCSTA           equ	4011	;# 
   280   000FAB                     RCSTA1          equ	4011	;# 
   281   000FAC                     TXSTA           equ	4012	;# 
   282   000FAC                     TXSTA1          equ	4012	;# 
   283   000FAD                     TXREG           equ	4013	;# 
   284   000FAD                     TXREG1          equ	4013	;# 
   285   000FAE                     RCREG           equ	4014	;# 
   286   000FAE                     RCREG1          equ	4014	;# 
   287   000FAF                     SPBRG           equ	4015	;# 
   288   000FAF                     SPBRG1          equ	4015	;# 
   289   000FB0                     SPBRGH          equ	4016	;# 
   290   000FB1                     T3CON           equ	4017	;# 
   291   000FB2                     TMR3            equ	4018	;# 
   292   000FB2                     TMR3L           equ	4018	;# 
   293   000FB3                     TMR3H           equ	4019	;# 
   294   000FB4                     CMCON           equ	4020	;# 
   295   000FB5                     CVRCON          equ	4021	;# 
   296   000FB6                     ECCP1AS         equ	4022	;# 
   297   000FB7                     ECCP1DEL        equ	4023	;# 
   298   000FB7                     PWM1CON         equ	4023	;# 
   299   000FB8                     BAUDCON         equ	4024	;# 
   300   000FB8                     BAUDCTL         equ	4024	;# 
   301   000FBA                     CCP2CON         equ	4026	;# 
   302   000FBB                     CCPR2           equ	4027	;# 
   303   000FBB                     CCPR2L          equ	4027	;# 
   304   000FBC                     CCPR2H          equ	4028	;# 
   305   000FBD                     CCP1CON         equ	4029	;# 
   306   000FBD                     ECCP1CON        equ	4029	;# 
   307   000FBE                     CCPR1           equ	4030	;# 
   308   000FBE                     CCPR1L          equ	4030	;# 
   309   000FBF                     CCPR1H          equ	4031	;# 
   310   000FC0                     ADCON2          equ	4032	;# 
   311   000FC1                     ADCON1          equ	4033	;# 
   312   000FC2                     ADCON0          equ	4034	;# 
   313   000FC3                     ADRES           equ	4035	;# 
   314   000FC3                     ADRESL          equ	4035	;# 
   315   000FC4                     ADRESH          equ	4036	;# 
   316   000FC5                     SSPCON2         equ	4037	;# 
   317   000FC6                     SSPCON1         equ	4038	;# 
   318   000FC7                     SSPSTAT         equ	4039	;# 
   319   000FC8                     SSPADD          equ	4040	;# 
   320   000FC9                     SSPBUF          equ	4041	;# 
   321   000FCA                     T2CON           equ	4042	;# 
   322   000FCB                     PR2             equ	4043	;# 
   323   000FCB                     MEMCON          equ	4043	;# 
   324   000FCC                     TMR2            equ	4044	;# 
   325   000FCD                     T1CON           equ	4045	;# 
   326   000FCE                     TMR1            equ	4046	;# 
   327   000FCE                     TMR1L           equ	4046	;# 
   328   000FCF                     TMR1H           equ	4047	;# 
   329   000FD0                     RCON            equ	4048	;# 
   330   000FD1                     WDTCON          equ	4049	;# 
   331   000FD2                     HLVDCON         equ	4050	;# 
   332   000FD2                     LVDCON          equ	4050	;# 
   333   000FD3                     OSCCON          equ	4051	;# 
   334   000FD5                     T0CON           equ	4053	;# 
   335   000FD6                     TMR0            equ	4054	;# 
   336   000FD6                     TMR0L           equ	4054	;# 
   337   000FD7                     TMR0H           equ	4055	;# 
   338   000FD8                     STATUS          equ	4056	;# 
   339   000FD9                     FSR2            equ	4057	;# 
   340   000FD9                     FSR2L           equ	4057	;# 
   341   000FDA                     FSR2H           equ	4058	;# 
   342   000FDB                     PLUSW2          equ	4059	;# 
   343   000FDC                     PREINC2         equ	4060	;# 
   344   000FDD                     POSTDEC2        equ	4061	;# 
   345   000FDE                     POSTINC2        equ	4062	;# 
   346   000FDF                     INDF2           equ	4063	;# 
   347   000FE0                     BSR             equ	4064	;# 
   348   000FE1                     FSR1            equ	4065	;# 
   349   000FE1                     FSR1L           equ	4065	;# 
   350   000FE2                     FSR1H           equ	4066	;# 
   351   000FE3                     PLUSW1          equ	4067	;# 
   352   000FE4                     PREINC1         equ	4068	;# 
   353   000FE5                     POSTDEC1        equ	4069	;# 
   354   000FE6                     POSTINC1        equ	4070	;# 
   355   000FE7                     INDF1           equ	4071	;# 
   356   000FE8                     WREG            equ	4072	;# 
   357   000FE9                     FSR0            equ	4073	;# 
   358   000FE9                     FSR0L           equ	4073	;# 
   359   000FEA                     FSR0H           equ	4074	;# 
   360   000FEB                     PLUSW0          equ	4075	;# 
   361   000FEC                     PREINC0         equ	4076	;# 
   362   000FED                     POSTDEC0        equ	4077	;# 
   363   000FEE                     POSTINC0        equ	4078	;# 
   364   000FEF                     INDF0           equ	4079	;# 
   365   000FF0                     INTCON3         equ	4080	;# 
   366   000FF1                     INTCON2         equ	4081	;# 
   367   000FF2                     INTCON          equ	4082	;# 
   368   000FF3                     PROD            equ	4083	;# 
   369   000FF3                     PRODL           equ	4083	;# 
   370   000FF4                     PRODH           equ	4084	;# 
   371   000FF5                     TABLAT          equ	4085	;# 
   372   000FF6                     TBLPTR          equ	4086	;# 
   373   000FF6                     TBLPTRL         equ	4086	;# 
   374   000FF7                     TBLPTRH         equ	4087	;# 
   375   000FF8                     TBLPTRU         equ	4088	;# 
   376   000FF9                     PCLAT           equ	4089	;# 
   377   000FF9                     PC              equ	4089	;# 
   378   000FF9                     PCL             equ	4089	;# 
   379   000FFA                     PCLATH          equ	4090	;# 
   380   000FFB                     PCLATU          equ	4091	;# 
   381   000FFC                     STKPTR          equ	4092	;# 
   382   000FFD                     TOS             equ	4093	;# 
   383   000FFD                     TOSL            equ	4093	;# 
   384   000FFE                     TOSH            equ	4094	;# 
   385   000FFF                     TOSU            equ	4095	;# 
   386   000F80                     PORTA           equ	3968	;# 
   387   000F81                     PORTB           equ	3969	;# 
   388   000F82                     PORTC           equ	3970	;# 
   389   000F83                     PORTD           equ	3971	;# 
   390   000F84                     PORTE           equ	3972	;# 
   391   000F89                     LATA            equ	3977	;# 
   392   000F8A                     LATB            equ	3978	;# 
   393   000F8B                     LATC            equ	3979	;# 
   394   000F8C                     LATD            equ	3980	;# 
   395   000F8D                     LATE            equ	3981	;# 
   396   000F92                     TRISA           equ	3986	;# 
   397   000F92                     DDRA            equ	3986	;# 
   398   000F93                     TRISB           equ	3987	;# 
   399   000F93                     DDRB            equ	3987	;# 
   400   000F94                     TRISC           equ	3988	;# 
   401   000F94                     DDRC            equ	3988	;# 
   402   000F95                     TRISD           equ	3989	;# 
   403   000F95                     DDRD            equ	3989	;# 
   404   000F96                     TRISE           equ	3990	;# 
   405   000F96                     DDRE            equ	3990	;# 
   406   000F9B                     OSCTUNE         equ	3995	;# 
   407   000F9D                     PIE1            equ	3997	;# 
   408   000F9E                     PIR1            equ	3998	;# 
   409   000F9F                     IPR1            equ	3999	;# 
   410   000FA0                     PIE2            equ	4000	;# 
   411   000FA1                     PIR2            equ	4001	;# 
   412   000FA2                     IPR2            equ	4002	;# 
   413   000FA6                     EECON1          equ	4006	;# 
   414   000FA7                     EECON2          equ	4007	;# 
   415   000FA8                     EEDATA          equ	4008	;# 
   416   000FA9                     EEADR           equ	4009	;# 
   417   000FAB                     RCSTA           equ	4011	;# 
   418   000FAB                     RCSTA1          equ	4011	;# 
   419   000FAC                     TXSTA           equ	4012	;# 
   420   000FAC                     TXSTA1          equ	4012	;# 
   421   000FAD                     TXREG           equ	4013	;# 
   422   000FAD                     TXREG1          equ	4013	;# 
   423   000FAE                     RCREG           equ	4014	;# 
   424   000FAE                     RCREG1          equ	4014	;# 
   425   000FAF                     SPBRG           equ	4015	;# 
   426   000FAF                     SPBRG1          equ	4015	;# 
   427   000FB0                     SPBRGH          equ	4016	;# 
   428   000FB1                     T3CON           equ	4017	;# 
   429   000FB2                     TMR3            equ	4018	;# 
   430   000FB2                     TMR3L           equ	4018	;# 
   431   000FB3                     TMR3H           equ	4019	;# 
   432   000FB4                     CMCON           equ	4020	;# 
   433   000FB5                     CVRCON          equ	4021	;# 
   434   000FB6                     ECCP1AS         equ	4022	;# 
   435   000FB7                     ECCP1DEL        equ	4023	;# 
   436   000FB7                     PWM1CON         equ	4023	;# 
   437   000FB8                     BAUDCON         equ	4024	;# 
   438   000FB8                     BAUDCTL         equ	4024	;# 
   439   000FBA                     CCP2CON         equ	4026	;# 
   440   000FBB                     CCPR2           equ	4027	;# 
   441   000FBB                     CCPR2L          equ	4027	;# 
   442   000FBC                     CCPR2H          equ	4028	;# 
   443   000FBD                     CCP1CON         equ	4029	;# 
   444   000FBD                     ECCP1CON        equ	4029	;# 
   445   000FBE                     CCPR1           equ	4030	;# 
   446   000FBE                     CCPR1L          equ	4030	;# 
   447   000FBF                     CCPR1H          equ	4031	;# 
   448   000FC0                     ADCON2          equ	4032	;# 
   449   000FC1                     ADCON1          equ	4033	;# 
   450   000FC2                     ADCON0          equ	4034	;# 
   451   000FC3                     ADRES           equ	4035	;# 
   452   000FC3                     ADRESL          equ	4035	;# 
   453   000FC4                     ADRESH          equ	4036	;# 
   454   000FC5                     SSPCON2         equ	4037	;# 
   455   000FC6                     SSPCON1         equ	4038	;# 
   456   000FC7                     SSPSTAT         equ	4039	;# 
   457   000FC8                     SSPADD          equ	4040	;# 
   458   000FC9                     SSPBUF          equ	4041	;# 
   459   000FCA                     T2CON           equ	4042	;# 
   460   000FCB                     PR2             equ	4043	;# 
   461   000FCB                     MEMCON          equ	4043	;# 
   462   000FCC                     TMR2            equ	4044	;# 
   463   000FCD                     T1CON           equ	4045	;# 
   464   000FCE                     TMR1            equ	4046	;# 
   465   000FCE                     TMR1L           equ	4046	;# 
   466   000FCF                     TMR1H           equ	4047	;# 
   467   000FD0                     RCON            equ	4048	;# 
   468   000FD1                     WDTCON          equ	4049	;# 
   469   000FD2                     HLVDCON         equ	4050	;# 
   470   000FD2                     LVDCON          equ	4050	;# 
   471   000FD3                     OSCCON          equ	4051	;# 
   472   000FD5                     T0CON           equ	4053	;# 
   473   000FD6                     TMR0            equ	4054	;# 
   474   000FD6                     TMR0L           equ	4054	;# 
   475   000FD7                     TMR0H           equ	4055	;# 
   476   000FD8                     STATUS          equ	4056	;# 
   477   000FD9                     FSR2            equ	4057	;# 
   478   000FD9                     FSR2L           equ	4057	;# 
   479   000FDA                     FSR2H           equ	4058	;# 
   480   000FDB                     PLUSW2          equ	4059	;# 
   481   000FDC                     PREINC2         equ	4060	;# 
   482   000FDD                     POSTDEC2        equ	4061	;# 
   483   000FDE                     POSTINC2        equ	4062	;# 
   484   000FDF                     INDF2           equ	4063	;# 
   485   000FE0                     BSR             equ	4064	;# 
   486   000FE1                     FSR1            equ	4065	;# 
   487   000FE1                     FSR1L           equ	4065	;# 
   488   000FE2                     FSR1H           equ	4066	;# 
   489   000FE3                     PLUSW1          equ	4067	;# 
   490   000FE4                     PREINC1         equ	4068	;# 
   491   000FE5                     POSTDEC1        equ	4069	;# 
   492   000FE6                     POSTINC1        equ	4070	;# 
   493   000FE7                     INDF1           equ	4071	;# 
   494   000FE8                     WREG            equ	4072	;# 
   495   000FE9                     FSR0            equ	4073	;# 
   496   000FE9                     FSR0L           equ	4073	;# 
   497   000FEA                     FSR0H           equ	4074	;# 
   498   000FEB                     PLUSW0          equ	4075	;# 
   499   000FEC                     PREINC0         equ	4076	;# 
   500   000FED                     POSTDEC0        equ	4077	;# 
   501   000FEE                     POSTINC0        equ	4078	;# 
   502   000FEF                     INDF0           equ	4079	;# 
   503   000FF0                     INTCON3         equ	4080	;# 
   504   000FF1                     INTCON2         equ	4081	;# 
   505   000FF2                     INTCON          equ	4082	;# 
   506   000FF3                     PROD            equ	4083	;# 
   507   000FF3                     PRODL           equ	4083	;# 
   508   000FF4                     PRODH           equ	4084	;# 
   509   000FF5                     TABLAT          equ	4085	;# 
   510   000FF6                     TBLPTR          equ	4086	;# 
   511   000FF6                     TBLPTRL         equ	4086	;# 
   512   000FF7                     TBLPTRH         equ	4087	;# 
   513   000FF8                     TBLPTRU         equ	4088	;# 
   514   000FF9                     PCLAT           equ	4089	;# 
   515   000FF9                     PC              equ	4089	;# 
   516   000FF9                     PCL             equ	4089	;# 
   517   000FFA                     PCLATH          equ	4090	;# 
   518   000FFB                     PCLATU          equ	4091	;# 
   519   000FFC                     STKPTR          equ	4092	;# 
   520   000FFD                     TOS             equ	4093	;# 
   521   000FFD                     TOSL            equ	4093	;# 
   522   000FFE                     TOSH            equ	4094	;# 
   523   000FFF                     TOSU            equ	4095	;# 
   524                           
   525                           	psect	idataCOMRAM
   526   000BF0                     __pidataCOMRAM:
   527                           	callstack 0
   528                           
   529                           ;initializer for _LCD_entry_mode
   530   000BF0  06                 	db	6
   531                           
   532                           ;initializer for _LCD_display_control
   533   000BF1  0C                 	db	12
   534   007C48                     _LATA0          set	31816
   535   000F80                     _PORTAbits      set	3968
   536   000F92                     _TRISAbits      set	3986
   537   000FC1                     _ADCON1         set	4033
   538   000FD3                     _OSCCON         set	4051
   539   000F95                     _TRISDbits      set	3989
   540   000F8C                     _LATDbits       set	3980
   541                           
   542                           	psect	smallconst
   543   000200                     __psmallconst:
   544                           	callstack 0
   545   000200  00                 	db	0
   546   000201                     STR_1:
   547   000201  48                 	db	72	;'H'
   548   000202  75                 	db	117	;'u'
   549   000203  6D                 	db	109	;'m'
   550   000204  69                 	db	105	;'i'
   551   000205  64                 	db	100	;'d'
   552   000206  69                 	db	105	;'i'
   553   000207  74                 	db	116	;'t'
   554   000208  79                 	db	121	;'y'
   555   000209  3A                 	db	58	;':'
   556   00020A  20                 	db	32
   557   00020B  00                 	db	0
   558   00020C                     STR_4:
   559   00020C  54                 	db	84	;'T'
   560   00020D  65                 	db	101	;'e'
   561   00020E  6D                 	db	109	;'m'
   562   00020F  70                 	db	112	;'p'
   563   000210  3A                 	db	58	;':'
   564   000211  20                 	db	32
   565   000212  00                 	db	0
   566   000213                     STR_3:
   567   000213  2E                 	db	46
   568   000214  25                 	db	37
   569   000215  64                 	db	100	;'d'
   570   000216  20                 	db	32
   571   000217  00                 	db	0
   572   000218                     STR_6:
   573   000218  2E                 	db	46
   574   000219  25                 	db	37
   575   00021A  64                 	db	100	;'d'
   576   00021B  00                 	db	0
   577   000219                     STR_2           equ	STR_6+1
   578   000219                     STR_5           equ	STR_6+1
   579   00021C  00                 	db	0	; dummy byte at the end
   580   000002                     __activetblptr  equ	2
   581                           
   582                           ; #config settings
   583                           
   584                           	psect	cinit
   585   000B40                     __pcinit:
   586                           	callstack 0
   587   000B40                     start_initialization:
   588                           	callstack 0
   589   000B40                     __initialization:
   590                           	callstack 0
   591                           
   592                           ; Initialize objects allocated to COMRAM (2 bytes)
   593                           ; load TBLPTR registers with __pidataCOMRAM
   594   000B40  0EF0               	movlw	low __pidataCOMRAM
   595   000B42  6EF6               	movwf	tblptrl,c
   596   000B44  0E0B               	movlw	high __pidataCOMRAM
   597   000B46  6EF7               	movwf	tblptrh,c
   598   000B48  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   599   000B4A  6EF8               	movwf	tblptru,c
   600   000B4C  0009               	tblrd		*+	;fetch initializer
   601   000B4E  CFF5 F063          	movff	tablat,__pdataCOMRAM
   602   000B52  0009               	tblrd		*+	;fetch initializer
   603   000B54  CFF5 F064          	movff	tablat,__pdataCOMRAM+1
   604                           
   605                           ; Clear objects allocated to COMRAM (41 bytes)
   606   000B58  EE00  F03A         	lfsr	0,__pbssCOMRAM
   607   000B5C  0E29               	movlw	41
   608   000B5E                     clear_0:
   609   000B5E  6AEE               	clrf	postinc0,c
   610   000B60  06E8               	decf	wreg,f,c
   611   000B62  E1FD               	bnz	clear_0
   612   000B64                     end_of_initialization:
   613                           	callstack 0
   614   000B64                     __end_of__initialization:
   615                           	callstack 0
   616   000B64  0E00               	movlw	low (__Lmediumconst shr (0+16))
   617   000B66  6EF8               	movwf	tblptru,c
   618   000B68  0100               	movlb	0
   619   000B6A  EFEB  F001         	goto	_main	;jump to C main() function
   620                           
   621                           	psect	bssCOMRAM
   622   00003A                     __pbssCOMRAM:
   623                           	callstack 0
   624   00003A                     _dbuf:
   625                           	callstack 0
   626   00003A                     	ds	32
   627   00005A                     	ds	4
   628   00005E                     _width:
   629                           	callstack 0
   630   00005E                     	ds	2
   631   000060                     _prec:
   632                           	callstack 0
   633   000060                     	ds	2
   634   000062                     _flags:
   635                           	callstack 0
   636   000062                     	ds	1
   637                           
   638                           	psect	dataCOMRAM
   639   000063                     __pdataCOMRAM:
   640                           	callstack 0
   641   000063                     _LCD_entry_mode:
   642                           	callstack 0
   643   000063                     	ds	1
   644   000064                     _LCD_display_control:
   645                           	callstack 0
   646   000064                     	ds	1
   647                           
   648                           	psect	cstackCOMRAM
   649   000001                     __pcstackCOMRAM:
   650                           	callstack 0
   651   000001                     ?___awdiv:
   652                           	callstack 0
   653   000001                     ?___awmod:
   654                           	callstack 0
   655   000001                     DHT11_ReadData@i:
   656                           	callstack 0
   657   000001                     ___awdiv@dividend:
   658                           	callstack 0
   659   000001                     ___awmod@dividend:
   660                           	callstack 0
   661   000001                     fputc@c:
   662                           	callstack 0
   663   000001                     ??_DHT11_Start:
   664   000001                     ??_LCD_write_command:
   665   000001                     ??_LCD_write_data:
   666                           
   667                           ; 1 bytes @ 0x0
   668   000001                     	ds	1
   669   000002                     DHT11_ReadData@data:
   670                           	callstack 0
   671                           
   672                           ; 1 bytes @ 0x1
   673   000002                     	ds	1
   674   000003                     LCD_write_command@command:
   675                           	callstack 0
   676   000003                     LCD_write_data@data:
   677                           	callstack 0
   678   000003                     fputc@fp:
   679                           	callstack 0
   680   000003                     ___awdiv@divisor:
   681                           	callstack 0
   682   000003                     ___awmod@divisor:
   683                           	callstack 0
   684                           
   685                           ; 2 bytes @ 0x2
   686   000003                     	ds	1
   687   000004                     LCD_cursor_set@column:
   688                           	callstack 0
   689   000004                     LCD_write_char@character:
   690                           	callstack 0
   691   000004                     LCD_write_string@string:
   692                           	callstack 0
   693   000004                     ??_LCD_clear:
   694   000004                     ??_fputc:
   695   000004                     
   696                           ; 1 bytes @ 0x3
   697   000004                     	ds	1
   698   000005                     LCD_cursor_set@row:
   699                           	callstack 0
   700   000005                     ___awdiv@counter:
   701                           	callstack 0
   702   000005                     ___awmod@counter:
   703                           	callstack 0
   704   000005                     ??_LCD_init:
   705   000005                     
   706                           ; 1 bytes @ 0x4
   707   000005                     	ds	1
   708   000006                     ___awdiv@sign:
   709                           	callstack 0
   710   000006                     ___awmod@sign:
   711                           	callstack 0
   712   000006                     ??_LCD_write_string:
   713                           
   714                           ; 1 bytes @ 0x5
   715   000006                     	ds	1
   716   000007                     ?_abs:
   717                           	callstack 0
   718   000007                     ___awdiv@quotient:
   719                           	callstack 0
   720   000007                     abs@a:
   721                           	callstack 0
   722                           
   723                           ; 2 bytes @ 0x6
   724   000007                     	ds	1
   725   000008                     LCD_write_string@i:
   726                           	callstack 0
   727                           
   728                           ; 1 bytes @ 0x7
   729   000008                     	ds	1
   730   000009                     ??_abs:
   731                           
   732                           ; 1 bytes @ 0x8
   733   000009                     	ds	2
   734   00000B                     vfpfcnvrt@fp:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0xA
   738   00000B                     	ds	1
   739   00000C                     vfpfcnvrt@fmt:
   740                           	callstack 0
   741                           
   742                           ; 1 bytes @ 0xB
   743   00000C                     	ds	1
   744   00000D                     vfpfcnvrt@ap:
   745                           	callstack 0
   746                           
   747                           ; 1 bytes @ 0xC
   748   00000D                     	ds	1
   749   00000E                     ??_vfpfcnvrt:
   750                           
   751                           ; 1 bytes @ 0xD
   752   00000E                     	ds	1
   753   00000F                     vfpfcnvrt@done:
   754                           	callstack 0
   755                           
   756                           ; 1 bytes @ 0xE
   757   00000F                     	ds	1
   758   000010                     vfpfcnvrt@cp:
   759                           	callstack 0
   760                           
   761                           ; 1 bytes @ 0xF
   762   000010                     	ds	1
   763   000011                     vfpfcnvrt@convarg:
   764                           	callstack 0
   765                           
   766                           ; 4 bytes @ 0x10
   767   000011                     	ds	4
   768   000015                     vfpfcnvrt@c:
   769                           	callstack 0
   770                           
   771                           ; 1 bytes @ 0x14
   772   000015                     	ds	1
   773   000016                     ?_vfprintf:
   774                           	callstack 0
   775   000016                     vfprintf@fp:
   776                           	callstack 0
   777                           
   778                           ; 1 bytes @ 0x15
   779   000016                     	ds	1
   780   000017                     vfprintf@fmt:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x16
   784   000017                     	ds	1
   785   000018                     vfprintf@ap:
   786                           	callstack 0
   787                           
   788                           ; 1 bytes @ 0x17
   789   000018                     	ds	1
   790   000019                     vfprintf@cfmt:
   791                           	callstack 0
   792   000019                     
   793                           ; 1 bytes @ 0x18
   794   000019                     	ds	1
   795   00001A                     ?_sprintf:
   796                           	callstack 0
   797   00001A                     sprintf@s:
   798                           	callstack 0
   799                           
   800                           ; 1 bytes @ 0x19
   801   00001A                     	ds	1
   802   00001B                     sprintf@fmt:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x1A
   806   00001B                     	ds	3
   807   00001E                     sprintf@ap:
   808                           	callstack 0
   809   00001E                     
   810                           ; 1 bytes @ 0x1D
   811   00001E                     	ds	1
   812   00001F                     sprintf@f:
   813                           	callstack 0
   814                           
   815                           ; 11 bytes @ 0x1E
   816   00001F                     	ds	11
   817   00002A                     ??_main:
   818                           
   819                           ; 1 bytes @ 0x29
   820   00002A                     	ds	2
   821   00002C                     main@value:
   822                           	callstack 0
   823                           
   824                           ; 10 bytes @ 0x2B
   825   00002C                     	ds	10
   826   000036                     main@RH_Decimal:
   827                           	callstack 0
   828                           
   829                           ; 1 bytes @ 0x35
   830   000036                     	ds	1
   831   000037                     main@RH_Integral:
   832                           	callstack 0
   833                           
   834                           ; 1 bytes @ 0x36
   835   000037                     	ds	1
   836   000038                     main@T_Decimal:
   837                           	callstack 0
   838                           
   839                           ; 1 bytes @ 0x37
   840   000038                     	ds	1
   841   000039                     main@T_Integral:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x38
   845   000039                     	ds	1
   846                           
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 6 in file "Lab10.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  value          10   43[COMRAM] unsigned char [10]
   857 ;;  T_Integral      1   56[COMRAM] unsigned char 
   858 ;;  T_Decimal       1   55[COMRAM] unsigned char 
   859 ;;  RH_Integral     1   54[COMRAM] unsigned char 
   860 ;;  RH_Decimal      1   53[COMRAM] unsigned char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1
   870 ;;      Params:         0       0       0
   871 ;;      Locals:        14       0       0
   872 ;;      Temps:          2       0       0
   873 ;;      Totals:        16       0       0
   874 ;;Total ram usage:       16 bytes
   875 ;; Hardware stack levels required when called: 5
   876 ;; This function calls:
   877 ;;		_DHT11_CheckResponse
   878 ;;		_DHT11_ReadData
   879 ;;		_DHT11_Start
   880 ;;		_LCD_cursor_set
   881 ;;		_LCD_init
   882 ;;		_LCD_write_char
   883 ;;		_LCD_write_string
   884 ;;		_sprintf
   885 ;; This function is called by:
   886 ;;		Startup code after reset
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text0
   891   0003D6                     __ptext0:
   892                           	callstack 0
   893   0003D6                     _main:
   894                           	callstack 26
   895   0003D6                     
   896                           ;Lab10.c: 8:     char RH_Decimal, RH_Integral, T_Decimal, T_Integral;;Lab10.c: 9:     ch
      +                          ar value[10];;Lab10.c: 12:     OSCCON = 0x72;
   897   0003D6  0E72               	movlw	114
   898   0003D8  6ED3               	movwf	211,c	;volatile
   899                           
   900                           ;Lab10.c: 13:     ADCON1=0x0F;
   901   0003DA  0E0F               	movlw	15
   902   0003DC  6EC1               	movwf	193,c	;volatile
   903   0003DE                     
   904                           ;Lab10.c: 15:     LCD_init();
   905   0003DE  EC74  F004         	call	_LCD_init	;wreg free
   906   0003E2                     l1640:
   907                           
   908                           ;Lab10.c: 17:         DHT11_Start();
   909   0003E2  ECCD  F005         	call	_DHT11_Start	;wreg free
   910   0003E6                     
   911                           ;Lab10.c: 18:         DHT11_CheckResponse();
   912   0003E6  ECB7  F005         	call	_DHT11_CheckResponse	;wreg free
   913   0003EA                     
   914                           ;Lab10.c: 21:         RH_Integral = DHT11_ReadData();
   915   0003EA  EC21  F005         	call	_DHT11_ReadData	;wreg free
   916   0003EE  6E37               	movwf	main@RH_Integral^0,c
   917   0003F0                     
   918                           ;Lab10.c: 22:         RH_Decimal = DHT11_ReadData();
   919   0003F0  EC21  F005         	call	_DHT11_ReadData	;wreg free
   920   0003F4  6E36               	movwf	main@RH_Decimal^0,c
   921   0003F6                     
   922                           ;Lab10.c: 23:         T_Integral = DHT11_ReadData();
   923   0003F6  EC21  F005         	call	_DHT11_ReadData	;wreg free
   924   0003FA  6E39               	movwf	main@T_Integral^0,c
   925   0003FC                     
   926                           ;Lab10.c: 24:         T_Decimal = DHT11_ReadData();
   927   0003FC  EC21  F005         	call	_DHT11_ReadData	;wreg free
   928   000400  6E38               	movwf	main@T_Decimal^0,c
   929   000402                     
   930                           ;Lab10.c: 27:         LCD_cursor_set(1,1);
   931   000402  0E01               	movlw	1
   932   000404  6E04               	movwf	LCD_cursor_set@column^0,c
   933   000406  0E01               	movlw	1
   934   000408  ECF1  F004         	call	_LCD_cursor_set
   935   00040C                     
   936                           ;Lab10.c: 28:         LCD_write_string("Humidity: ");
   937   00040C  0E01               	movlw	low STR_1
   938   00040E  6E04               	movwf	LCD_write_string@string^0,c
   939   000410  5004               	movf	LCD_write_string@string^0,w,c
   940   000412  A4D8               	btfss	status,2,c
   941   000414  0E02               	movlw	high __smallconst
   942   000416  6E05               	movwf	(LCD_write_string@string+1)^0,c
   943   000418  ECB6  F004         	call	_LCD_write_string	;wreg free
   944   00041C                     
   945                           ;Lab10.c: 29:         sprintf(value, "%d", RH_Integral);
   946   00041C  0E2C               	movlw	low main@value
   947   00041E  6E1A               	movwf	sprintf@s^0,c
   948   000420  0E19               	movlw	low (STR_6+1)
   949   000422  6E1B               	movwf	sprintf@fmt^0,c
   950   000424  C037  F01C         	movff	main@RH_Integral,?_sprintf+2
   951   000428  6A1D               	clrf	(?_sprintf+3)^0,c
   952   00042A  EC6C  F005         	call	_sprintf	;wreg free
   953   00042E                     
   954                           ;Lab10.c: 30:         LCD_write_string(value);
   955   00042E  0E2C               	movlw	low main@value
   956   000430  6E04               	movwf	LCD_write_string@string^0,c
   957   000432  6A05               	clrf	(LCD_write_string@string+1)^0,c
   958   000434  ECB6  F004         	call	_LCD_write_string	;wreg free
   959   000438                     
   960                           ;Lab10.c: 31:         sprintf(value, ".%d ", RH_Decimal);
   961   000438  0E2C               	movlw	low main@value
   962   00043A  6E1A               	movwf	sprintf@s^0,c
   963   00043C  0E13               	movlw	low STR_3
   964   00043E  6E1B               	movwf	sprintf@fmt^0,c
   965   000440  C036  F01C         	movff	main@RH_Decimal,?_sprintf+2
   966   000444  6A1D               	clrf	(?_sprintf+3)^0,c
   967   000446  EC6C  F005         	call	_sprintf	;wreg free
   968   00044A                     
   969                           ;Lab10.c: 32:         LCD_write_string(value);
   970   00044A  0E2C               	movlw	low main@value
   971   00044C  6E04               	movwf	LCD_write_string@string^0,c
   972   00044E  6A05               	clrf	(LCD_write_string@string+1)^0,c
   973   000450  ECB6  F004         	call	_LCD_write_string	;wreg free
   974   000454                     
   975                           ;Lab10.c: 33:         LCD_write_char('%');
   976   000454  0E25               	movlw	37
   977   000456  ECF3  F005         	call	_LCD_write_char
   978   00045A                     
   979                           ;Lab10.c: 36:         LCD_cursor_set(2,1);
   980   00045A  0E01               	movlw	1
   981   00045C  6E04               	movwf	LCD_cursor_set@column^0,c
   982   00045E  0E02               	movlw	2
   983   000460  ECF1  F004         	call	_LCD_cursor_set
   984   000464                     
   985                           ;Lab10.c: 37:         LCD_write_string("Temp: ");
   986   000464  0E0C               	movlw	low STR_4
   987   000466  6E04               	movwf	LCD_write_string@string^0,c
   988   000468  5004               	movf	LCD_write_string@string^0,w,c
   989   00046A  A4D8               	btfss	status,2,c
   990   00046C  0E02               	movlw	high __smallconst
   991   00046E  6E05               	movwf	(LCD_write_string@string+1)^0,c
   992   000470  ECB6  F004         	call	_LCD_write_string	;wreg free
   993   000474                     
   994                           ;Lab10.c: 38:         sprintf(value, "%d", T_Integral);
   995   000474  0E2C               	movlw	low main@value
   996   000476  6E1A               	movwf	sprintf@s^0,c
   997   000478  0E19               	movlw	low (STR_6+1)
   998   00047A  6E1B               	movwf	sprintf@fmt^0,c
   999   00047C  C039  F01C         	movff	main@T_Integral,?_sprintf+2
  1000   000480  6A1D               	clrf	(?_sprintf+3)^0,c
  1001   000482  EC6C  F005         	call	_sprintf	;wreg free
  1002   000486                     
  1003                           ;Lab10.c: 39:         LCD_write_string(value);
  1004   000486  0E2C               	movlw	low main@value
  1005   000488  6E04               	movwf	LCD_write_string@string^0,c
  1006   00048A  6A05               	clrf	(LCD_write_string@string+1)^0,c
  1007   00048C  ECB6  F004         	call	_LCD_write_string	;wreg free
  1008   000490                     
  1009                           ;Lab10.c: 40:         sprintf(value, ".%d", T_Decimal);
  1010   000490  0E2C               	movlw	low main@value
  1011   000492  6E1A               	movwf	sprintf@s^0,c
  1012   000494  0E18               	movlw	low STR_6
  1013   000496  6E1B               	movwf	sprintf@fmt^0,c
  1014   000498  C038  F01C         	movff	main@T_Decimal,?_sprintf+2
  1015   00049C  6A1D               	clrf	(?_sprintf+3)^0,c
  1016   00049E  EC6C  F005         	call	_sprintf	;wreg free
  1017   0004A2                     
  1018                           ;Lab10.c: 41:         LCD_write_string(value);
  1019   0004A2  0E2C               	movlw	low main@value
  1020   0004A4  6E04               	movwf	LCD_write_string@string^0,c
  1021   0004A6  6A05               	clrf	(LCD_write_string@string+1)^0,c
  1022   0004A8  ECB6  F004         	call	_LCD_write_string	;wreg free
  1023   0004AC                     
  1024                           ;Lab10.c: 42:         LCD_write_char(0xdf);
  1025   0004AC  0EDF               	movlw	223
  1026   0004AE  ECF3  F005         	call	_LCD_write_char
  1027   0004B2                     
  1028                           ;Lab10.c: 43:         LCD_write_char('C');
  1029   0004B2  0E43               	movlw	67
  1030   0004B4  ECF3  F005         	call	_LCD_write_char
  1031   0004B8                     
  1032                           ;Lab10.c: 46:         _delay((unsigned long)((500)*(8000000/4000.0)));
  1033   0004B8  0E06               	movlw	6
  1034   0004BA  6E2B               	movwf	(??_main+1)^0,c
  1035   0004BC  0E13               	movlw	19
  1036   0004BE  6E2A               	movwf	??_main^0,c
  1037   0004C0  0EAE               	movlw	174
  1038   0004C2                     u997:
  1039   0004C2  2EE8               	decfsz	wreg,f,c
  1040   0004C4  D7FE               	bra	u997
  1041   0004C6  2E2A               	decfsz	??_main^0,f,c
  1042   0004C8  D7FC               	bra	u997
  1043   0004CA  2E2B               	decfsz	(??_main+1)^0,f,c
  1044   0004CC  D7FA               	bra	u997
  1045   0004CE  EFF1  F001         	goto	l1640
  1046   0004D2  EF00  F000         	goto	start
  1047   0004D6                     __end_of_main:
  1048                           	callstack 0
  1049                           
  1050 ;; *************** function _sprintf *****************
  1051 ;; Defined at:
  1052 ;;		line 9 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  s               1   25[COMRAM] PTR unsigned char 
  1055 ;;		 -> main@value(10), 
  1056 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  1057 ;;		 -> STR_6(4), STR_5(3), STR_3(5), STR_2(3), 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  f              11   30[COMRAM] struct _IO_FILE
  1060 ;;  ret             2    0        int 
  1061 ;;  ap              1   29[COMRAM] PTR void [1]
  1062 ;;		 -> ?_sprintf(2), 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  2   25[COMRAM] int 
  1065 ;; Registers used:
  1066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1
  1072 ;;      Params:         4       0       0
  1073 ;;      Locals:        12       0       0
  1074 ;;      Temps:          0       0       0
  1075 ;;      Totals:        16       0       0
  1076 ;;Total ram usage:       16 bytes
  1077 ;; Hardware stack levels used: 1
  1078 ;; Hardware stack levels required when called: 4
  1079 ;; This function calls:
  1080 ;;		_vfprintf
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text1
  1087   000AD8                     __ptext1:
  1088                           	callstack 0
  1089   000AD8                     _sprintf:
  1090                           	callstack 26
  1091   000AD8  0E1C               	movlw	low (?_sprintf+2)
  1092   000ADA  6E1E               	movwf	sprintf@ap^0,c
  1093   000ADC  C01A  F01F         	movff	sprintf@s,sprintf@f
  1094   000AE0  0E00               	movlw	0
  1095   000AE2  6E22               	movwf	(sprintf@f+3)^0,c
  1096   000AE4  0E00               	movlw	0
  1097   000AE6  6E21               	movwf	(sprintf@f+2)^0,c
  1098   000AE8  0E00               	movlw	0
  1099   000AEA  6E29               	movwf	(sprintf@f+10)^0,c
  1100   000AEC  0E00               	movlw	0
  1101   000AEE  6E28               	movwf	(sprintf@f+9)^0,c
  1102   000AF0  0E1F               	movlw	low sprintf@f
  1103   000AF2  6E16               	movwf	vfprintf@fp^0,c
  1104   000AF4  C01B  F017         	movff	sprintf@fmt,vfprintf@fmt
  1105   000AF8  0E1E               	movlw	low sprintf@ap
  1106   000AFA  6E18               	movwf	vfprintf@ap^0,c
  1107   000AFC  EC4D  F005         	call	_vfprintf	;wreg free
  1108   000B00  501A               	movf	sprintf@s^0,w,c
  1109   000B02  2421               	addwf	(sprintf@f+2)^0,w,c
  1110   000B04  6ED9               	movwf	fsr2l,c
  1111   000B06  6ADA               	clrf	fsr2h,c
  1112   000B08  6ADF               	clrf	indf2,c
  1113   000B0A  0012               	return		;funcret
  1114   000B0C                     __end_of_sprintf:
  1115                           	callstack 0
  1116                           
  1117 ;; *************** function _vfprintf *****************
  1118 ;; Defined at:
  1119 ;;		line 1817 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
  1122 ;;		 -> sprintf@f(11), 
  1123 ;;  fmt             1   22[COMRAM] PTR const unsigned char 
  1124 ;;		 -> STR_6(4), STR_5(3), STR_3(5), STR_2(3), 
  1125 ;;  ap              1   23[COMRAM] PTR PTR void 
  1126 ;;		 -> sprintf@ap(1), 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  cfmt            1   24[COMRAM] PTR unsigned char 
  1129 ;;		 -> STR_6(4), STR_5(3), STR_3(5), STR_2(3), 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  2   21[COMRAM] int 
  1132 ;; Registers used:
  1133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1
  1139 ;;      Params:         3       0       0
  1140 ;;      Locals:         1       0       0
  1141 ;;      Temps:          0       0       0
  1142 ;;      Totals:         4       0       0
  1143 ;;Total ram usage:        4 bytes
  1144 ;; Hardware stack levels used: 1
  1145 ;; Hardware stack levels required when called: 3
  1146 ;; This function calls:
  1147 ;;		_vfpfcnvrt
  1148 ;; This function is called by:
  1149 ;;		_sprintf
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text2
  1154   000A9A                     __ptext2:
  1155                           	callstack 0
  1156   000A9A                     _vfprintf:
  1157                           	callstack 26
  1158   000A9A                     
  1159                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprintf(FILE *fp, co
      +                          nst char *fmt, va_list ap);E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1818:
      +                           {;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1820:     char *cfmt;;E:\Micr
      +                          ochip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1160   000A9A  C017  F019         	movff	vfprintf@fmt,vfprintf@cfmt
  1161                           
  1162                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (*cfmt) {
  1163   000A9E  EF59  F005         	goto	l1582
  1164   000AA2                     l1580:
  1165                           
  1166                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvrt(fp, &cfmt, a
      +                          p);
  1167   000AA2  C016  F00B         	movff	vfprintf@fp,vfpfcnvrt@fp
  1168   000AA6  0E19               	movlw	low vfprintf@cfmt
  1169   000AA8  6E0C               	movwf	vfpfcnvrt@fmt^0,c
  1170   000AAA  C018  F00D         	movff	vfprintf@ap,vfpfcnvrt@ap
  1171   000AAE  EC0F  F001         	call	_vfpfcnvrt	;wreg free
  1172   000AB2                     l1582:
  1173                           
  1174                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (*cfmt) {
  1175   000AB2  C019  FFF6         	movff	vfprintf@cfmt,tblptrl
  1176   000AB6                     	if	1	;There is more than 1 active tblptr byte
  1177   000AB6  0E02               	movlw	high __smallconst
  1178   000AB8  6EF7               	movwf	tblptrh,c
  1179   000ABA                     	endif
  1180   000ABA                     	if	0	;tblptru may be non-zero
  1181   000ABA                     	endif
  1182   000ABA                     	if	0	;tblptru may be non-zero
  1183   000ABA                     	endif
  1184   000ABA  0008               	tblrd		*
  1185   000ABC  50F5               	movf	tablat,w,c
  1186   000ABE  0900               	iorlw	0
  1187   000AC0  A4D8               	btfss	status,2,c
  1188   000AC2  EF65  F005         	goto	u901
  1189   000AC6  EF67  F005         	goto	u900
  1190   000ACA                     u901:
  1191   000ACA  EF51  F005         	goto	l1580
  1192   000ACE                     u900:
  1193   000ACE                     
  1194                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1195   000ACE  0E00               	movlw	0
  1196   000AD0  6E17               	movwf	(?_vfprintf+1)^0,c
  1197   000AD2  0E00               	movlw	0
  1198   000AD4  6E16               	movwf	?_vfprintf^0,c
  1199   000AD6  0012               	return		;funcret
  1200   000AD8                     __end_of_vfprintf:
  1201                           	callstack 0
  1202                           
  1203 ;; *************** function _vfpfcnvrt *****************
  1204 ;; Defined at:
  1205 ;;		line 1177 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  1208 ;;		 -> sprintf@f(11), 
  1209 ;;  fmt             1   11[COMRAM] PTR PTR unsigned char 
  1210 ;;		 -> vfprintf@cfmt(1), 
  1211 ;;  ap              1   12[COMRAM] PTR PTR void 
  1212 ;;		 -> sprintf@ap(1), 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  convarg         4   16[COMRAM] struct .
  1215 ;;  c               1   20[COMRAM] unsigned char 
  1216 ;;  cp              1   15[COMRAM] PTR unsigned char 
  1217 ;;		 -> STR_6(4), STR_5(3), STR_3(5), STR_2(3), 
  1218 ;;  done            1   14[COMRAM] _Bool 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1
  1228 ;;      Params:         3       0       0
  1229 ;;      Locals:         7       0       0
  1230 ;;      Temps:          1       0       0
  1231 ;;      Totals:        11       0       0
  1232 ;;Total ram usage:       11 bytes
  1233 ;; Hardware stack levels used: 1
  1234 ;; Hardware stack levels required when called: 2
  1235 ;; This function calls:
  1236 ;;		___awdiv
  1237 ;;		___awmod
  1238 ;;		_abs
  1239 ;;		_fputc
  1240 ;; This function is called by:
  1241 ;;		_vfprintf
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text3
  1246   00021E                     __ptext3:
  1247                           	callstack 0
  1248   00021E                     _vfpfcnvrt:
  1249                           	callstack 26
  1250   00021E                     
  1251                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(FILE *fp, char 
      +                          *fmt[], va_list ap);E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1178: {;E:\M
      +                          icrochip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1179:     char c, *cp;;E:\Microchip\
      +                          xc8\v2.50\pic\sources\c99\common\doprnt.c: 1180:     _Bool done;;E:\Microchip\xc8\v2.50\
      +                          pic\sources\c99\common\doprnt.c: 1188:  } convarg;;E:\Microchip\xc8\v2.50\pic\sources\c9
      +                          9\common\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1252   00021E  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1253   000220  6ED9               	movwf	fsr2l,c
  1254   000222  6ADA               	clrf	fsr2h,c
  1255   000224  CFDF FFF6          	movff	indf2,tblptrl
  1256   000228                     	if	1	;There is more than 1 active tblptr byte
  1257   000228  0E02               	movlw	high __smallconst
  1258   00022A  6EF7               	movwf	tblptrh,c
  1259   00022C                     	endif
  1260   00022C                     	if	0	;tblptru may be non-zero
  1261   00022C                     	endif
  1262   00022C                     	if	0	;tblptru may be non-zero
  1263   00022C                     	endif
  1264   00022C  0008               	tblrd		*
  1265   00022E  50F5               	movf	tablat,w,c
  1266   000230  0A25               	xorlw	37
  1267   000232  A4D8               	btfss	status,2,c
  1268   000234  EF1E  F001         	goto	u801
  1269   000238  EF20  F001         	goto	u800
  1270   00023C                     u801:
  1271   00023C  EFD9  F001         	goto	l1572
  1272   000240                     u800:
  1273   000240                     
  1274                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*fmt;
  1275   000240  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1276   000242  6ED9               	movwf	fsr2l,c
  1277   000244  6ADA               	clrf	fsr2h,c
  1278   000246  2ADF               	incf	indf2,f,c
  1279   000248                     
  1280                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         flags = width = 0
      +                          ;
  1281   000248  0E00               	movlw	0
  1282   00024A  6E5F               	movwf	(_width+1)^0,c
  1283   00024C  0E00               	movlw	0
  1284   00024E  6E5E               	movwf	_width^0,c
  1285   000250  C05E  F062         	movff	_width,_flags
  1286   000254                     
  1287                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         prec = -1;
  1288   000254  6860               	setf	_prec^0,c
  1289   000256  6861               	setf	(_prec+1)^0,c
  1290   000258                     
  1291                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt;
  1292   000258  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1293   00025A  6ED9               	movwf	fsr2l,c
  1294   00025C  6ADA               	clrf	fsr2h,c
  1295   00025E  50DF               	movf	indf2,w,c
  1296   000260  6E10               	movwf	vfpfcnvrt@cp^0,c
  1297   000262                     
  1298                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp == 'd' || *cp =
      +                          = 'i') {
  1299   000262  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1300   000266                     	if	1	;There is more than 1 active tblptr byte
  1301   000266  0E02               	movlw	high __smallconst
  1302   000268  6EF7               	movwf	tblptrh,c
  1303   00026A                     	endif
  1304   00026A                     	if	0	;tblptru may be non-zero
  1305   00026A                     	endif
  1306   00026A                     	if	0	;tblptru may be non-zero
  1307   00026A                     	endif
  1308   00026A  0008               	tblrd		*
  1309   00026C  50F5               	movf	tablat,w,c
  1310   00026E  0A64               	xorlw	100
  1311   000270  B4D8               	btfsc	status,2,c
  1312   000272  EF3D  F001         	goto	u811
  1313   000276  EF3F  F001         	goto	u810
  1314   00027A                     u811:
  1315   00027A  EF4D  F001         	goto	l1542
  1316   00027E                     u810:
  1317   00027E  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1318   000282                     	if	1	;There is more than 1 active tblptr byte
  1319   000282  0E02               	movlw	high __smallconst
  1320   000284  6EF7               	movwf	tblptrh,c
  1321   000286                     	endif
  1322   000286                     	if	0	;tblptru may be non-zero
  1323   000286                     	endif
  1324   000286                     	if	0	;tblptru may be non-zero
  1325   000286                     	endif
  1326   000286  0008               	tblrd		*
  1327   000288  50F5               	movf	tablat,w,c
  1328   00028A  0A69               	xorlw	105
  1329   00028C  A4D8               	btfss	status,2,c
  1330   00028E  EF4B  F001         	goto	u821
  1331   000292  EF4D  F001         	goto	u820
  1332   000296                     u821:
  1333   000296  EFD3  F001         	goto	l1568
  1334   00029A                     u820:
  1335   00029A                     l1542:
  1336                           
  1337                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.sint = (vfpf_s
      +                          int_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1338   00029A  500D               	movf	vfpfcnvrt@ap^0,w,c
  1339   00029C  6ED9               	movwf	fsr2l,c
  1340   00029E  6ADA               	clrf	fsr2h,c
  1341   0002A0  0E02               	movlw	2
  1342   0002A2  26DF               	addwf	indf2,f,c
  1343   0002A4  5CDF               	subwf	indf2,w,c
  1344   0002A6  6ED9               	movwf	fsr2l,c
  1345   0002A8  6ADA               	clrf	fsr2h,c
  1346   0002AA  CFDE F011          	movff	postinc2,vfpfcnvrt@convarg
  1347   0002AE  CFDE F012          	movff	postinc2,vfpfcnvrt@convarg+1
  1348   0002B2                     
  1349                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = cp+1;
  1350   0002B2  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1351   0002B4  6ED9               	movwf	fsr2l,c
  1352   0002B6  6ADA               	clrf	fsr2h,c
  1353   0002B8  2810               	incf	vfpfcnvrt@cp^0,w,c
  1354   0002BA  6EDF               	movwf	indf2,c
  1355   0002BC                     
  1356                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = sizeof(dbuf);
  1357   0002BC  0E20               	movlw	32
  1358   0002BE  6E15               	movwf	vfpfcnvrt@c^0,c
  1359                           
  1360                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = convarg.sint < 
      +                          0;
  1361   0002C0  BE12               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1362   0002C2  EF65  F001         	goto	u831
  1363   0002C6  EF68  F001         	goto	u830
  1364   0002CA                     u831:
  1365   0002CA  0E01               	movlw	1
  1366   0002CC  EF69  F001         	goto	u840
  1367   0002D0                     u830:
  1368   0002D0  0E00               	movlw	0
  1369   0002D2                     u840:
  1370   0002D2  6E0F               	movwf	vfpfcnvrt@done^0,c
  1371   0002D4                     l1548:
  1372                           
  1373                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--c] = abs(conva
      +                          rg.sint % 10) + '0';
  1374   0002D4  0615               	decf	vfpfcnvrt@c^0,f,c
  1375   0002D6  5015               	movf	vfpfcnvrt@c^0,w,c
  1376   0002D8  0F3A               	addlw	low _dbuf
  1377   0002DA  6ED9               	movwf	fsr2l,c
  1378   0002DC  6ADA               	clrf	fsr2h,c
  1379   0002DE  C011  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1380   0002E2  C012  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1381   0002E6  0E00               	movlw	0
  1382   0002E8  6E04               	movwf	(___awmod@divisor+1)^0,c
  1383   0002EA  0E0A               	movlw	10
  1384   0002EC  6E03               	movwf	___awmod@divisor^0,c
  1385   0002EE  ECC8  F003         	call	___awmod	;wreg free
  1386   0002F2  C001  F007         	movff	?___awmod,abs@a
  1387   0002F6  C002  F008         	movff	?___awmod+1,abs@a+1
  1388   0002FA  EC86  F005         	call	_abs	;wreg free
  1389   0002FE  5007               	movf	?_abs^0,w,c
  1390   000300  0F30               	addlw	48
  1391   000302  6EDF               	movwf	indf2,c
  1392   000304                     
  1393                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg.sint /= 10;
  1394   000304  C011  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1395   000308  C012  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1396   00030C  0E00               	movlw	0
  1397   00030E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1398   000310  0E0A               	movlw	10
  1399   000312  6E03               	movwf	___awdiv@divisor^0,c
  1400   000314  EC67  F003         	call	___awdiv	;wreg free
  1401   000318  C001  F011         	movff	?___awdiv,vfpfcnvrt@convarg
  1402   00031C  C002  F012         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1403   000320                     
  1404                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while (convarg.sint 
      +                          != 0 && c != 0);
  1405   000320  5011               	movf	vfpfcnvrt@convarg^0,w,c
  1406   000322  1012               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1407   000324  B4D8               	btfsc	status,2,c
  1408   000326  EF97  F001         	goto	u851
  1409   00032A  EF99  F001         	goto	u850
  1410   00032E                     u851:
  1411   00032E  EFA1  F001         	goto	l1556
  1412   000332                     u850:
  1413   000332  5015               	movf	vfpfcnvrt@c^0,w,c
  1414   000334  A4D8               	btfss	status,2,c
  1415   000336  EF9F  F001         	goto	u861
  1416   00033A  EFA1  F001         	goto	u860
  1417   00033E                     u861:
  1418   00033E  EF6A  F001         	goto	l1548
  1419   000342                     u860:
  1420   000342                     l1556:
  1421                           
  1422                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c != 0 && done) {
  1423   000342  5015               	movf	vfpfcnvrt@c^0,w,c
  1424   000344  B4D8               	btfsc	status,2,c
  1425   000346  EFA7  F001         	goto	u871
  1426   00034A  EFA9  F001         	goto	u870
  1427   00034E                     u871:
  1428   00034E  EFC8  F001         	goto	l1566
  1429   000352                     u870:
  1430   000352  500F               	movf	vfpfcnvrt@done^0,w,c
  1431   000354  B4D8               	btfsc	status,2,c
  1432   000356  EFAF  F001         	goto	u881
  1433   00035A  EFB1  F001         	goto	u880
  1434   00035E                     u881:
  1435   00035E  EFC8  F001         	goto	l1566
  1436   000362                     u880:
  1437   000362                     
  1438                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--c] = '-';
  1439   000362  0615               	decf	vfpfcnvrt@c^0,f,c
  1440   000364  5015               	movf	vfpfcnvrt@c^0,w,c
  1441   000366  0F3A               	addlw	low _dbuf
  1442   000368  6ED9               	movwf	fsr2l,c
  1443   00036A  6ADA               	clrf	fsr2h,c
  1444   00036C  0E2D               	movlw	45
  1445   00036E  6EDF               	movwf	indf2,c
  1446   000370  EFC8  F001         	goto	l1566
  1447   000374                     l1562:
  1448                           
  1449                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(dbuf[c++], fp);
  1450   000374  5015               	movf	vfpfcnvrt@c^0,w,c
  1451   000376  0F3A               	addlw	low _dbuf
  1452   000378  6ED9               	movwf	fsr2l,c
  1453   00037A  6ADA               	clrf	fsr2h,c
  1454   00037C  50DF               	movf	indf2,w,c
  1455   00037E  6E0E               	movwf	??_vfpfcnvrt^0,c
  1456   000380  500E               	movf	??_vfpfcnvrt^0,w,c
  1457   000382  6E01               	movwf	fputc@c^0,c
  1458   000384  6A02               	clrf	(fputc@c+1)^0,c
  1459   000386  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1460   00038A  EC1F  F004         	call	_fputc	;wreg free
  1461   00038E  2A15               	incf	vfpfcnvrt@c^0,f,c
  1462   000390                     l1566:
  1463                           
  1464                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c != sizeof(dbu
      +                          f)) {
  1465   000390  0E20               	movlw	32
  1466   000392  1815               	xorwf	vfpfcnvrt@c^0,w,c
  1467   000394  A4D8               	btfss	status,2,c
  1468   000396  EFCF  F001         	goto	u891
  1469   00039A  EFD1  F001         	goto	u890
  1470   00039E                     u891:
  1471   00039E  EFBA  F001         	goto	l1562
  1472   0003A2                     u890:
  1473   0003A2  EFEA  F001         	goto	l912
  1474   0003A6                     l1568:
  1475                           
  1476                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*fmt;
  1477   0003A6  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1478   0003A8  6ED9               	movwf	fsr2l,c
  1479   0003AA  6ADA               	clrf	fsr2h,c
  1480   0003AC  2ADF               	incf	indf2,f,c
  1481   0003AE  EFEA  F001         	goto	l912
  1482   0003B2                     l1572:
  1483                           
  1484                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((int)(*fmt)[0],
      +                           fp);
  1485   0003B2  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1486   0003B4  6ED9               	movwf	fsr2l,c
  1487   0003B6  6ADA               	clrf	fsr2h,c
  1488   0003B8  CFDF FFF6          	movff	indf2,tblptrl
  1489   0003BC                     	if	1	;There is more than 1 active tblptr byte
  1490   0003BC  0E02               	movlw	high __smallconst
  1491   0003BE  6EF7               	movwf	tblptrh,c
  1492   0003C0                     	endif
  1493   0003C0                     	if	0	;tblptru may be non-zero
  1494   0003C0                     	endif
  1495   0003C0                     	if	0	;tblptru may be non-zero
  1496   0003C0                     	endif
  1497   0003C0  0008               	tblrd		*
  1498   0003C2  50F5               	movf	tablat,w,c
  1499   0003C4  6E01               	movwf	fputc@c^0,c
  1500   0003C6  6A02               	clrf	(fputc@c+1)^0,c
  1501   0003C8  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1502   0003CC  EC1F  F004         	call	_fputc	;wreg free
  1503   0003D0  EFD3  F001         	goto	l1568
  1504   0003D4                     l912:
  1505   0003D4  0012               	return		;funcret
  1506   0003D6                     __end_of_vfpfcnvrt:
  1507                           	callstack 0
  1508                           
  1509 ;; *************** function _fputc *****************
  1510 ;; Defined at:
  1511 ;;		line 8 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  c               2    0[COMRAM] int 
  1514 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  1515 ;;		 -> sprintf@f(11), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  2    0[COMRAM] int 
  1520 ;; Registers used:
  1521 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1
  1527 ;;      Params:         3       0       0
  1528 ;;      Locals:         0       0       0
  1529 ;;      Temps:          5       0       0
  1530 ;;      Totals:         8       0       0
  1531 ;;Total ram usage:        8 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; Hardware stack levels required when called: 1
  1534 ;; This function calls:
  1535 ;;		_putch
  1536 ;; This function is called by:
  1537 ;;		_vfpfcnvrt
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text4
  1542   00083E                     __ptext4:
  1543                           	callstack 0
  1544   00083E                     _fputc:
  1545                           	callstack 26
  1546   00083E  5003               	movf	fputc@fp^0,w,c
  1547   000840  B4D8               	btfsc	status,2,c
  1548   000842  EF25  F004         	goto	u751
  1549   000846  EF27  F004         	goto	u750
  1550   00084A                     u751:
  1551   00084A  EF2F  F004         	goto	l1514
  1552   00084E                     u750:
  1553   00084E  5003               	movf	fputc@fp^0,w,c
  1554   000850  A4D8               	btfss	status,2,c
  1555   000852  EF2D  F004         	goto	u761
  1556   000856  EF2F  F004         	goto	u760
  1557   00085A                     u761:
  1558   00085A  EF34  F004         	goto	l1516
  1559   00085E                     u760:
  1560   00085E                     l1514:
  1561   00085E  5001               	movf	fputc@c^0,w,c
  1562   000860  ECF9  F005         	call	_putch
  1563   000864  EF73  F004         	goto	l937
  1564   000868                     l1516:
  1565   000868  5003               	movf	fputc@fp^0,w,c
  1566   00086A  6ED9               	movwf	fsr2l,c
  1567   00086C  6ADA               	clrf	fsr2h,c
  1568   00086E  0E09               	movlw	9
  1569   000870  26D9               	addwf	fsr2l,f,c
  1570   000872  50DE               	movf	postinc2,w,c
  1571   000874  10DE               	iorwf	postinc2,w,c
  1572   000876  B4D8               	btfsc	status,2,c
  1573   000878  EF40  F004         	goto	u771
  1574   00087C  EF42  F004         	goto	u770
  1575   000880                     u771:
  1576   000880  EF5B  F004         	goto	l1520
  1577   000884                     u770:
  1578   000884  5003               	movf	fputc@fp^0,w,c
  1579   000886  6ED9               	movwf	fsr2l,c
  1580   000888  6ADA               	clrf	fsr2h,c
  1581   00088A  0E09               	movlw	9
  1582   00088C  26D9               	addwf	fsr2l,f,c
  1583   00088E  5003               	movf	fputc@fp^0,w,c
  1584   000890  6EE1               	movwf	fsr1l,c
  1585   000892  6AE2               	clrf	fsr1h,c
  1586   000894  0E02               	movlw	2
  1587   000896  26E1               	addwf	fsr1l,f,c
  1588   000898  50DE               	movf	postinc2,w,c
  1589   00089A  5CE6               	subwf	postinc1,w,c
  1590   00089C  50E6               	movf	postinc1,w,c
  1591   00089E  0A80               	xorlw	128
  1592   0008A0  6E08               	movwf	(??_fputc+4)^0,c
  1593   0008A2  50DE               	movf	postinc2,w,c
  1594   0008A4  0A80               	xorlw	128
  1595   0008A6  5808               	subwfb	(??_fputc+4)^0,w,c
  1596   0008A8  B0D8               	btfsc	status,0,c
  1597   0008AA  EF59  F004         	goto	u781
  1598   0008AE  EF5B  F004         	goto	u780
  1599   0008B2                     u781:
  1600   0008B2  EF73  F004         	goto	l937
  1601   0008B6                     u780:
  1602   0008B6                     l1520:
  1603   0008B6  5003               	movf	fputc@fp^0,w,c
  1604   0008B8  6ED9               	movwf	fsr2l,c
  1605   0008BA  6ADA               	clrf	fsr2h,c
  1606   0008BC  0E02               	movlw	2
  1607   0008BE  26D9               	addwf	fsr2l,f,c
  1608   0008C0  50DF               	movf	indf2,w,c
  1609   0008C2  6E04               	movwf	??_fputc^0,c
  1610   0008C4  5003               	movf	fputc@fp^0,w,c
  1611   0008C6  6ED9               	movwf	fsr2l,c
  1612   0008C8  6ADA               	clrf	fsr2h,c
  1613   0008CA  50DF               	movf	indf2,w,c
  1614   0008CC  2404               	addwf	??_fputc^0,w,c
  1615   0008CE  6ED9               	movwf	fsr2l,c
  1616   0008D0  6ADA               	clrf	fsr2h,c
  1617   0008D2  C001  FFDF         	movff	fputc@c,indf2
  1618   0008D6  5003               	movf	fputc@fp^0,w,c
  1619   0008D8  6ED9               	movwf	fsr2l,c
  1620   0008DA  6ADA               	clrf	fsr2h,c
  1621   0008DC  0E02               	movlw	2
  1622   0008DE  26D9               	addwf	fsr2l,f,c
  1623   0008E0  2ADE               	incf	postinc2,f,c
  1624   0008E2  0E00               	movlw	0
  1625   0008E4  22DD               	addwfc	postdec2,f,c
  1626   0008E6                     l937:
  1627   0008E6  0012               	return		;funcret
  1628   0008E8                     __end_of_fputc:
  1629                           	callstack 0
  1630                           
  1631 ;; *************** function _putch *****************
  1632 ;; Defined at:
  1633 ;;		line 7 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;  c               1    wreg     unsigned char 
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;  c               1    0[COMRAM] unsigned char 
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1
  1647 ;;      Params:         0       0       0
  1648 ;;      Locals:         0       0       0
  1649 ;;      Temps:          0       0       0
  1650 ;;      Totals:         0       0       0
  1651 ;;Total ram usage:        0 bytes
  1652 ;; Hardware stack levels used: 1
  1653 ;; This function calls:
  1654 ;;		Nothing
  1655 ;; This function is called by:
  1656 ;;		_fputc
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text5
  1661   000BF2                     __ptext5:
  1662                           	callstack 0
  1663   000BF2                     _putch:
  1664                           	callstack 26
  1665   000BF2  0012               	return		;funcret
  1666   000BF4                     __end_of_putch:
  1667                           	callstack 0
  1668                           
  1669 ;; *************** function _abs *****************
  1670 ;; Defined at:
  1671 ;;		line 1 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  a               2    6[COMRAM] int 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2    6[COMRAM] int 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1
  1685 ;;      Params:         2       0       0
  1686 ;;      Locals:         0       0       0
  1687 ;;      Temps:          2       0       0
  1688 ;;      Totals:         4       0       0
  1689 ;;Total ram usage:        4 bytes
  1690 ;; Hardware stack levels used: 1
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_vfpfcnvrt
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text6
  1699   000B0C                     __ptext6:
  1700                           	callstack 0
  1701   000B0C                     _abs:
  1702                           	callstack 27
  1703   000B0C  BE08               	btfsc	(abs@a+1)^0,7,c
  1704   000B0E  EF8B  F005         	goto	u791
  1705   000B12  EF8D  F005         	goto	u790
  1706   000B16                     u791:
  1707   000B16  EF93  F005         	goto	l922
  1708   000B1A                     u790:
  1709   000B1A  C007  F007         	movff	abs@a,?_abs
  1710   000B1E  C008  F008         	movff	abs@a+1,?_abs+1
  1711   000B22  EF9F  F005         	goto	l925
  1712   000B26                     l922:
  1713   000B26  C007  F009         	movff	abs@a,??_abs
  1714   000B2A  C008  F00A         	movff	abs@a+1,??_abs+1
  1715   000B2E  1E09               	comf	??_abs^0,f,c
  1716   000B30  1E0A               	comf	(??_abs+1)^0,f,c
  1717   000B32  4A09               	infsnz	??_abs^0,f,c
  1718   000B34  2A0A               	incf	(??_abs+1)^0,f,c
  1719   000B36  C009  F007         	movff	??_abs,?_abs
  1720   000B3A  C00A  F008         	movff	??_abs+1,?_abs+1
  1721   000B3E                     l925:
  1722   000B3E  0012               	return		;funcret
  1723   000B40                     __end_of_abs:
  1724                           	callstack 0
  1725                           
  1726 ;; *************** function ___awmod *****************
  1727 ;; Defined at:
  1728 ;;		line 7 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  dividend        2    0[COMRAM] int 
  1731 ;;  divisor         2    2[COMRAM] int 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  sign            1    5[COMRAM] unsigned char 
  1734 ;;  counter         1    4[COMRAM] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  2    0[COMRAM] int 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1
  1744 ;;      Params:         4       0       0
  1745 ;;      Locals:         2       0       0
  1746 ;;      Temps:          0       0       0
  1747 ;;      Totals:         6       0       0
  1748 ;;Total ram usage:        6 bytes
  1749 ;; Hardware stack levels used: 1
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_vfpfcnvrt
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text7
  1758   000790                     __ptext7:
  1759                           	callstack 0
  1760   000790                     ___awmod:
  1761                           	callstack 27
  1762   000790  6A06               	clrf	___awmod@sign^0,c
  1763   000792  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1764   000794  EFD0  F003         	goto	u690
  1765   000798  EFCE  F003         	goto	u691
  1766   00079C                     u691:
  1767   00079C  EFD6  F003         	goto	l1482
  1768   0007A0                     u690:
  1769   0007A0  6C01               	negf	___awmod@dividend^0,c
  1770   0007A2  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1771   0007A4  B0D8               	btfsc	status,0,c
  1772   0007A6  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1773   0007A8  0E01               	movlw	1
  1774   0007AA  6E06               	movwf	___awmod@sign^0,c
  1775   0007AC                     l1482:
  1776   0007AC  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1777   0007AE  EFDD  F003         	goto	u700
  1778   0007B2  EFDB  F003         	goto	u701
  1779   0007B6                     u701:
  1780   0007B6  EFE1  F003         	goto	l1486
  1781   0007BA                     u700:
  1782   0007BA  6C03               	negf	___awmod@divisor^0,c
  1783   0007BC  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1784   0007BE  B0D8               	btfsc	status,0,c
  1785   0007C0  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1786   0007C2                     l1486:
  1787   0007C2  5003               	movf	___awmod@divisor^0,w,c
  1788   0007C4  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1789   0007C6  B4D8               	btfsc	status,2,c
  1790   0007C8  EFE8  F003         	goto	u711
  1791   0007CC  EFEA  F003         	goto	u710
  1792   0007D0                     u711:
  1793   0007D0  EF0E  F004         	goto	l1502
  1794   0007D4                     u710:
  1795   0007D4  0E01               	movlw	1
  1796   0007D6  6E05               	movwf	___awmod@counter^0,c
  1797   0007D8  EFF2  F003         	goto	l1492
  1798   0007DC                     l1490:
  1799   0007DC  90D8               	bcf	status,0,c
  1800   0007DE  3603               	rlcf	___awmod@divisor^0,f,c
  1801   0007E0  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1802   0007E2  2A05               	incf	___awmod@counter^0,f,c
  1803   0007E4                     l1492:
  1804   0007E4  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1805   0007E6  EFF7  F003         	goto	u721
  1806   0007EA  EFF9  F003         	goto	u720
  1807   0007EE                     u721:
  1808   0007EE  EFEE  F003         	goto	l1490
  1809   0007F2                     u720:
  1810   0007F2                     l1494:
  1811   0007F2  5003               	movf	___awmod@divisor^0,w,c
  1812   0007F4  5C01               	subwf	___awmod@dividend^0,w,c
  1813   0007F6  5004               	movf	(___awmod@divisor+1)^0,w,c
  1814   0007F8  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1815   0007FA  A0D8               	btfss	status,0,c
  1816   0007FC  EF02  F004         	goto	u731
  1817   000800  EF04  F004         	goto	u730
  1818   000804                     u731:
  1819   000804  EF08  F004         	goto	l1498
  1820   000808                     u730:
  1821   000808  5003               	movf	___awmod@divisor^0,w,c
  1822   00080A  5E01               	subwf	___awmod@dividend^0,f,c
  1823   00080C  5004               	movf	(___awmod@divisor+1)^0,w,c
  1824   00080E  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1825   000810                     l1498:
  1826   000810  90D8               	bcf	status,0,c
  1827   000812  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1828   000814  3203               	rrcf	___awmod@divisor^0,f,c
  1829   000816  2E05               	decfsz	___awmod@counter^0,f,c
  1830   000818  EFF9  F003         	goto	l1494
  1831   00081C                     l1502:
  1832   00081C  5006               	movf	___awmod@sign^0,w,c
  1833   00081E  B4D8               	btfsc	status,2,c
  1834   000820  EF14  F004         	goto	u741
  1835   000824  EF16  F004         	goto	u740
  1836   000828                     u741:
  1837   000828  EF1A  F004         	goto	l1506
  1838   00082C                     u740:
  1839   00082C  6C01               	negf	___awmod@dividend^0,c
  1840   00082E  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1841   000830  B0D8               	btfsc	status,0,c
  1842   000832  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1843   000834                     l1506:
  1844   000834  C001  F001         	movff	___awmod@dividend,?___awmod
  1845   000838  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1846   00083C  0012               	return		;funcret
  1847   00083E                     __end_of___awmod:
  1848                           	callstack 0
  1849                           
  1850 ;; *************** function ___awdiv *****************
  1851 ;; Defined at:
  1852 ;;		line 7 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  dividend        2    0[COMRAM] int 
  1855 ;;  divisor         2    2[COMRAM] int 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  quotient        2    6[COMRAM] int 
  1858 ;;  sign            1    5[COMRAM] unsigned char 
  1859 ;;  counter         1    4[COMRAM] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  2    0[COMRAM] int 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1
  1869 ;;      Params:         4       0       0
  1870 ;;      Locals:         4       0       0
  1871 ;;      Temps:          0       0       0
  1872 ;;      Totals:         8       0       0
  1873 ;;Total ram usage:        8 bytes
  1874 ;; Hardware stack levels used: 1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_vfpfcnvrt
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text8
  1883   0006CE                     __ptext8:
  1884                           	callstack 0
  1885   0006CE                     ___awdiv:
  1886                           	callstack 27
  1887   0006CE  6A06               	clrf	___awdiv@sign^0,c
  1888   0006D0  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1889   0006D2  EF6F  F003         	goto	u630
  1890   0006D6  EF6D  F003         	goto	u631
  1891   0006DA                     u631:
  1892   0006DA  EF75  F003         	goto	l1438
  1893   0006DE                     u630:
  1894   0006DE  6C03               	negf	___awdiv@divisor^0,c
  1895   0006E0  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1896   0006E2  B0D8               	btfsc	status,0,c
  1897   0006E4  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1898   0006E6  0E01               	movlw	1
  1899   0006E8  6E06               	movwf	___awdiv@sign^0,c
  1900   0006EA                     l1438:
  1901   0006EA  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1902   0006EC  EF7C  F003         	goto	u640
  1903   0006F0  EF7A  F003         	goto	u641
  1904   0006F4                     u641:
  1905   0006F4  EF82  F003         	goto	l1444
  1906   0006F8                     u640:
  1907   0006F8  6C01               	negf	___awdiv@dividend^0,c
  1908   0006FA  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1909   0006FC  B0D8               	btfsc	status,0,c
  1910   0006FE  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1911   000700  0E01               	movlw	1
  1912   000702  1A06               	xorwf	___awdiv@sign^0,f,c
  1913   000704                     l1444:
  1914   000704  0E00               	movlw	0
  1915   000706  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1916   000708  0E00               	movlw	0
  1917   00070A  6E07               	movwf	___awdiv@quotient^0,c
  1918   00070C  5003               	movf	___awdiv@divisor^0,w,c
  1919   00070E  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1920   000710  B4D8               	btfsc	status,2,c
  1921   000712  EF8D  F003         	goto	u651
  1922   000716  EF8F  F003         	goto	u650
  1923   00071A                     u651:
  1924   00071A  EFB7  F003         	goto	l1466
  1925   00071E                     u650:
  1926   00071E  0E01               	movlw	1
  1927   000720  6E05               	movwf	___awdiv@counter^0,c
  1928   000722  EF97  F003         	goto	l1452
  1929   000726                     l1450:
  1930   000726  90D8               	bcf	status,0,c
  1931   000728  3603               	rlcf	___awdiv@divisor^0,f,c
  1932   00072A  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1933   00072C  2A05               	incf	___awdiv@counter^0,f,c
  1934   00072E                     l1452:
  1935   00072E  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1936   000730  EF9C  F003         	goto	u661
  1937   000734  EF9E  F003         	goto	u660
  1938   000738                     u661:
  1939   000738  EF93  F003         	goto	l1450
  1940   00073C                     u660:
  1941   00073C                     l1454:
  1942   00073C  90D8               	bcf	status,0,c
  1943   00073E  3607               	rlcf	___awdiv@quotient^0,f,c
  1944   000740  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1945   000742  5003               	movf	___awdiv@divisor^0,w,c
  1946   000744  5C01               	subwf	___awdiv@dividend^0,w,c
  1947   000746  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1948   000748  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1949   00074A  A0D8               	btfss	status,0,c
  1950   00074C  EFAA  F003         	goto	u671
  1951   000750  EFAC  F003         	goto	u670
  1952   000754                     u671:
  1953   000754  EFB1  F003         	goto	l1462
  1954   000758                     u670:
  1955   000758  5003               	movf	___awdiv@divisor^0,w,c
  1956   00075A  5E01               	subwf	___awdiv@dividend^0,f,c
  1957   00075C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1958   00075E  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1959   000760  8007               	bsf	___awdiv@quotient^0,0,c
  1960   000762                     l1462:
  1961   000762  90D8               	bcf	status,0,c
  1962   000764  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1963   000766  3203               	rrcf	___awdiv@divisor^0,f,c
  1964   000768  2E05               	decfsz	___awdiv@counter^0,f,c
  1965   00076A  EF9E  F003         	goto	l1454
  1966   00076E                     l1466:
  1967   00076E  5006               	movf	___awdiv@sign^0,w,c
  1968   000770  B4D8               	btfsc	status,2,c
  1969   000772  EFBD  F003         	goto	u681
  1970   000776  EFBF  F003         	goto	u680
  1971   00077A                     u681:
  1972   00077A  EFC3  F003         	goto	l1470
  1973   00077E                     u680:
  1974   00077E  6C07               	negf	___awdiv@quotient^0,c
  1975   000780  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1976   000782  B0D8               	btfsc	status,0,c
  1977   000784  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1978   000786                     l1470:
  1979   000786  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1980   00078A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1981   00078E  0012               	return		;funcret
  1982   000790                     __end_of___awdiv:
  1983                           	callstack 0
  1984                           
  1985 ;; *************** function _LCD_write_string *****************
  1986 ;; Defined at:
  1987 ;;		line 392 in file "LCD.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  string          2    3[COMRAM] PTR unsigned char 
  1990 ;;		 -> STR_4(7), main@value(10), STR_1(11), 
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  i               1    7[COMRAM] unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1
  2002 ;;      Params:         2       0       0
  2003 ;;      Locals:         1       0       0
  2004 ;;      Temps:          2       0       0
  2005 ;;      Totals:         5       0       0
  2006 ;;Total ram usage:        5 bytes
  2007 ;; Hardware stack levels used: 1
  2008 ;; Hardware stack levels required when called: 2
  2009 ;; This function calls:
  2010 ;;		_LCD_write_data
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text9
  2017   00096C                     __ptext9:
  2018                           	callstack 0
  2019   00096C                     _LCD_write_string:
  2020                           	callstack 28
  2021   00096C                     
  2022                           ;LCD.c: 395:     for(uint8_t i=0 ; string[i] != '\0' ; i++){
  2023   00096C  6A08               	clrf	LCD_write_string@i^0,c
  2024   00096E  EFD2  F004         	goto	l1606
  2025   000972                     l1602:
  2026                           
  2027                           ;LCD.c: 396:         LCD_write_data(string[i]);
  2028   000972  5008               	movf	LCD_write_string@i^0,w,c
  2029   000974  2404               	addwf	LCD_write_string@string^0,w,c
  2030   000976  6E06               	movwf	??_LCD_write_string^0,c
  2031   000978  0E00               	movlw	0
  2032   00097A  2005               	addwfc	(LCD_write_string@string+1)^0,w,c
  2033   00097C  6E07               	movwf	(??_LCD_write_string+1)^0,c
  2034   00097E  C006  FFF6         	movff	??_LCD_write_string,tblptrl
  2035   000982  C007  FFF7         	movff	??_LCD_write_string+1,tblptrh
  2036   000986  6AF8               	clrf	tblptru,c
  2037   000988  0E01               	movlw	(high __ramtop+-1)
  2038   00098A  64F7               	cpfsgt	tblptrh,c
  2039   00098C  D003               	bra	u957
  2040   00098E  0008               	tblrd		*
  2041   000990  50F5               	movf	tablat,w,c
  2042   000992  D005               	bra	u950
  2043   000994                     u957:
  2044   000994  CFF6 FFE9          	movff	tblptrl,fsr0l
  2045   000998  CFF7 FFEA          	movff	tblptrh,fsr0h
  2046   00099C  50EF               	movf	indf0,w,c
  2047   00099E                     u950:
  2048   00099E  EC6B  F002         	call	_LCD_write_data
  2049   0009A2                     
  2050                           ;LCD.c: 397:     }
  2051   0009A2  2A08               	incf	LCD_write_string@i^0,f,c
  2052   0009A4                     l1606:
  2053   0009A4  5008               	movf	LCD_write_string@i^0,w,c
  2054   0009A6  2404               	addwf	LCD_write_string@string^0,w,c
  2055   0009A8  6E06               	movwf	??_LCD_write_string^0,c
  2056   0009AA  0E00               	movlw	0
  2057   0009AC  2005               	addwfc	(LCD_write_string@string+1)^0,w,c
  2058   0009AE  6E07               	movwf	(??_LCD_write_string+1)^0,c
  2059   0009B0  C006  FFF6         	movff	??_LCD_write_string,tblptrl
  2060   0009B4  C007  FFF7         	movff	??_LCD_write_string+1,tblptrh
  2061   0009B8  6AF8               	clrf	tblptru,c
  2062   0009BA  0E01               	movlw	(high __ramtop+-1)
  2063   0009BC  64F7               	cpfsgt	tblptrh,c
  2064   0009BE  D003               	bra	u967
  2065   0009C0  0008               	tblrd		*
  2066   0009C2  50F5               	movf	tablat,w,c
  2067   0009C4  D005               	bra	u960
  2068   0009C6                     u967:
  2069   0009C6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2070   0009CA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2071   0009CE  50EF               	movf	indf0,w,c
  2072   0009D0                     u960:
  2073   0009D0  0900               	iorlw	0
  2074   0009D2  A4D8               	btfss	status,2,c
  2075   0009D4  EFEE  F004         	goto	u971
  2076   0009D8  EFF0  F004         	goto	u970
  2077   0009DC                     u971:
  2078   0009DC  EFB9  F004         	goto	l1602
  2079   0009E0                     u970:
  2080   0009E0  0012               	return		;funcret
  2081   0009E2                     __end_of_LCD_write_string:
  2082                           	callstack 0
  2083                           
  2084 ;; *************** function _LCD_write_char *****************
  2085 ;; Defined at:
  2086 ;;		line 404 in file "LCD.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  character       1    wreg     unsigned char 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  character       1    3[COMRAM] unsigned char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, status,2, status,0, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1
  2100 ;;      Params:         0       0       0
  2101 ;;      Locals:         1       0       0
  2102 ;;      Temps:          0       0       0
  2103 ;;      Totals:         1       0       0
  2104 ;;Total ram usage:        1 bytes
  2105 ;; Hardware stack levels used: 1
  2106 ;; Hardware stack levels required when called: 2
  2107 ;; This function calls:
  2108 ;;		_LCD_write_data
  2109 ;; This function is called by:
  2110 ;;		_main
  2111 ;;		_LCD_write_float
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text10
  2116   000BE6                     __ptext10:
  2117                           	callstack 0
  2118   000BE6                     _LCD_write_char:
  2119                           	callstack 28
  2120                           
  2121                           ;incstack = 0
  2122                           ;LCD_write_char@character stored from wreg
  2123   000BE6  6E04               	movwf	LCD_write_char@character^0,c
  2124   000BE8                     
  2125                           ;LCD.c: 407:     LCD_write_data(character);
  2126   000BE8  5004               	movf	LCD_write_char@character^0,w,c
  2127   000BEA  EC6B  F002         	call	_LCD_write_data
  2128   000BEE  0012               	return		;funcret
  2129   000BF0                     __end_of_LCD_write_char:
  2130                           	callstack 0
  2131                           
  2132 ;; *************** function _LCD_write_data *****************
  2133 ;; Defined at:
  2134 ;;		line 104 in file "LCD.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;  data            1    wreg     unsigned char 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;  data            1    2[COMRAM] unsigned char 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1
  2148 ;;      Params:         0       0       0
  2149 ;;      Locals:         1       0       0
  2150 ;;      Temps:          2       0       0
  2151 ;;      Totals:         3       0       0
  2152 ;;Total ram usage:        3 bytes
  2153 ;; Hardware stack levels used: 1
  2154 ;; Hardware stack levels required when called: 1
  2155 ;; This function calls:
  2156 ;;		_LCD_pulse_clock
  2157 ;; This function is called by:
  2158 ;;		_LCD_write_string
  2159 ;;		_LCD_write_char
  2160 ;;		_LCD_add_character
  2161 ;;		_LCD_write_variable
  2162 ;;		_LCD_write_float
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text11
  2167   0004D6                     __ptext11:
  2168                           	callstack 0
  2169   0004D6                     _LCD_write_data:
  2170                           	callstack 28
  2171                           
  2172                           ;incstack = 0
  2173                           ;LCD_write_data@data stored from wreg
  2174   0004D6  6E03               	movwf	LCD_write_data@data^0,c
  2175   0004D8                     
  2176                           ;LCD.c: 106:     LATDbits.LATD2 = 1;
  2177   0004D8  848C               	bsf	140,2,c	;volatile
  2178   0004DA                     
  2179                           ;LCD.c: 109:     LATDbits.LATD7 = (data & 0b10000000) >> 7;
  2180   0004DA  6A01               	clrf	??_LCD_write_data^0,c
  2181   0004DC  AE03               	btfss	LCD_write_data@data^0,7,c
  2182   0004DE  D001               	bra	u315
  2183   0004E0  2A01               	incf	??_LCD_write_data^0,f,c
  2184   0004E2                     u315:
  2185   0004E2  0E01               	movlw	1
  2186   0004E4  1601               	andwf	??_LCD_write_data^0,f,c
  2187   0004E6  3201               	rrcf	??_LCD_write_data^0,f,c
  2188   0004E8  3201               	rrcf	??_LCD_write_data^0,f,c
  2189   0004EA  508C               	movf	140,w,c	;volatile
  2190   0004EC  1801               	xorwf	??_LCD_write_data^0,w,c
  2191   0004EE  0B7F               	andlw	-129
  2192   0004F0  1801               	xorwf	??_LCD_write_data^0,w,c
  2193   0004F2  6E8C               	movwf	140,c	;volatile
  2194                           
  2195                           ;LCD.c: 110:     LATDbits.LATD6 = (data & 0b01000000) >> 6;
  2196   0004F4  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2197   0004F8  0E06               	movlw	6
  2198   0004FA  6E02               	movwf	(??_LCD_write_data+1)^0,c
  2199   0004FC                     u325:
  2200   0004FC  90D8               	bcf	status,0,c
  2201   0004FE  3201               	rrcf	??_LCD_write_data^0,f,c
  2202   000500  2E02               	decfsz	(??_LCD_write_data+1)^0,f,c
  2203   000502  EF7E  F002         	goto	u325
  2204   000506  0E01               	movlw	1
  2205   000508  1601               	andwf	??_LCD_write_data^0,f,c
  2206   00050A  3A01               	swapf	??_LCD_write_data^0,f,c
  2207   00050C  4601               	rlncf	??_LCD_write_data^0,f,c
  2208   00050E  4601               	rlncf	??_LCD_write_data^0,f,c
  2209   000510  508C               	movf	140,w,c	;volatile
  2210   000512  1801               	xorwf	??_LCD_write_data^0,w,c
  2211   000514  0BBF               	andlw	-65
  2212   000516  1801               	xorwf	??_LCD_write_data^0,w,c
  2213   000518  6E8C               	movwf	140,c	;volatile
  2214                           
  2215                           ;LCD.c: 111:     LATDbits.LATD5 = (data & 0b00100000) >> 5;
  2216   00051A  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2217   00051E  0E05               	movlw	5
  2218   000520  6E02               	movwf	(??_LCD_write_data+1)^0,c
  2219   000522                     u335:
  2220   000522  90D8               	bcf	status,0,c
  2221   000524  3201               	rrcf	??_LCD_write_data^0,f,c
  2222   000526  2E02               	decfsz	(??_LCD_write_data+1)^0,f,c
  2223   000528  EF91  F002         	goto	u335
  2224   00052C  0E01               	movlw	1
  2225   00052E  1601               	andwf	??_LCD_write_data^0,f,c
  2226   000530  3A01               	swapf	??_LCD_write_data^0,f,c
  2227   000532  4601               	rlncf	??_LCD_write_data^0,f,c
  2228   000534  508C               	movf	140,w,c	;volatile
  2229   000536  1801               	xorwf	??_LCD_write_data^0,w,c
  2230   000538  0BDF               	andlw	-33
  2231   00053A  1801               	xorwf	??_LCD_write_data^0,w,c
  2232   00053C  6E8C               	movwf	140,c	;volatile
  2233                           
  2234                           ;LCD.c: 112:     LATDbits.LATD4 = (data & 0b00010000) >> 4;
  2235   00053E  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2236   000542  3A01               	swapf	??_LCD_write_data^0,f,c
  2237   000544  0E0F               	movlw	15
  2238   000546  1601               	andwf	??_LCD_write_data^0,f,c
  2239   000548  0E01               	movlw	1
  2240   00054A  1601               	andwf	??_LCD_write_data^0,f,c
  2241   00054C  3A01               	swapf	??_LCD_write_data^0,f,c
  2242   00054E  508C               	movf	140,w,c	;volatile
  2243   000550  1801               	xorwf	??_LCD_write_data^0,w,c
  2244   000552  0BEF               	andlw	-17
  2245   000554  1801               	xorwf	??_LCD_write_data^0,w,c
  2246   000556  6E8C               	movwf	140,c	;volatile
  2247   000558                     
  2248                           ;LCD.c: 115:     LCD_pulse_clock();
  2249   000558  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2250   00055C                     
  2251                           ;LCD.c: 118:     LATDbits.LATD7 = (data & 0b00001000) >> 3;
  2252   00055C  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2253   000560  90D8               	bcf	status,0,c
  2254   000562  3201               	rrcf	??_LCD_write_data^0,f,c
  2255   000564  90D8               	bcf	status,0,c
  2256   000566  3201               	rrcf	??_LCD_write_data^0,f,c
  2257   000568  90D8               	bcf	status,0,c
  2258   00056A  3201               	rrcf	??_LCD_write_data^0,f,c
  2259   00056C  0E01               	movlw	1
  2260   00056E  1601               	andwf	??_LCD_write_data^0,f,c
  2261   000570  3201               	rrcf	??_LCD_write_data^0,f,c
  2262   000572  3201               	rrcf	??_LCD_write_data^0,f,c
  2263   000574  508C               	movf	140,w,c	;volatile
  2264   000576  1801               	xorwf	??_LCD_write_data^0,w,c
  2265   000578  0B7F               	andlw	-129
  2266   00057A  1801               	xorwf	??_LCD_write_data^0,w,c
  2267   00057C  6E8C               	movwf	140,c	;volatile
  2268   00057E                     
  2269                           ;LCD.c: 119:     LATDbits.LATD6 = (data & 0b00000100) >> 2;
  2270   00057E  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2271   000582  90D8               	bcf	status,0,c
  2272   000584  3201               	rrcf	??_LCD_write_data^0,f,c
  2273   000586  90D8               	bcf	status,0,c
  2274   000588  3201               	rrcf	??_LCD_write_data^0,f,c
  2275   00058A  0E01               	movlw	1
  2276   00058C  1601               	andwf	??_LCD_write_data^0,f,c
  2277   00058E  3A01               	swapf	??_LCD_write_data^0,f,c
  2278   000590  4601               	rlncf	??_LCD_write_data^0,f,c
  2279   000592  4601               	rlncf	??_LCD_write_data^0,f,c
  2280   000594  508C               	movf	140,w,c	;volatile
  2281   000596  1801               	xorwf	??_LCD_write_data^0,w,c
  2282   000598  0BBF               	andlw	-65
  2283   00059A  1801               	xorwf	??_LCD_write_data^0,w,c
  2284   00059C  6E8C               	movwf	140,c	;volatile
  2285   00059E                     
  2286                           ;LCD.c: 120:     LATDbits.LATD5 = (data & 0b00000010) >> 1;
  2287   00059E  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2288   0005A2  90D8               	bcf	status,0,c
  2289   0005A4  3201               	rrcf	??_LCD_write_data^0,f,c
  2290   0005A6  0E01               	movlw	1
  2291   0005A8  1601               	andwf	??_LCD_write_data^0,f,c
  2292   0005AA  3A01               	swapf	??_LCD_write_data^0,f,c
  2293   0005AC  4601               	rlncf	??_LCD_write_data^0,f,c
  2294   0005AE  508C               	movf	140,w,c	;volatile
  2295   0005B0  1801               	xorwf	??_LCD_write_data^0,w,c
  2296   0005B2  0BDF               	andlw	-33
  2297   0005B4  1801               	xorwf	??_LCD_write_data^0,w,c
  2298   0005B6  6E8C               	movwf	140,c	;volatile
  2299   0005B8                     
  2300                           ;LCD.c: 121:     LATDbits.LATD4 = (data & 0b00000001) ;
  2301   0005B8  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2302   0005BC  0E01               	movlw	1
  2303   0005BE  1601               	andwf	??_LCD_write_data^0,f,c
  2304   0005C0  3A01               	swapf	??_LCD_write_data^0,f,c
  2305   0005C2  508C               	movf	140,w,c	;volatile
  2306   0005C4  1801               	xorwf	??_LCD_write_data^0,w,c
  2307   0005C6  0BEF               	andlw	-17
  2308   0005C8  1801               	xorwf	??_LCD_write_data^0,w,c
  2309   0005CA  6E8C               	movwf	140,c	;volatile
  2310   0005CC                     
  2311                           ;LCD.c: 124:     LCD_pulse_clock();
  2312   0005CC  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2313   0005D0  0012               	return		;funcret
  2314   0005D2                     __end_of_LCD_write_data:
  2315                           	callstack 0
  2316                           
  2317 ;; *************** function _LCD_init *****************
  2318 ;; Defined at:
  2319 ;;		line 136 in file "LCD.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1
  2333 ;;      Params:         0       0       0
  2334 ;;      Locals:         0       0       0
  2335 ;;      Temps:          2       0       0
  2336 ;;      Totals:         2       0       0
  2337 ;;Total ram usage:        2 bytes
  2338 ;; Hardware stack levels used: 1
  2339 ;; Hardware stack levels required when called: 3
  2340 ;; This function calls:
  2341 ;;		_LCD_clear
  2342 ;;		_LCD_pulse_clock
  2343 ;;		_LCD_write_command
  2344 ;; This function is called by:
  2345 ;;		_main
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text12
  2350   0008E8                     __ptext12:
  2351                           	callstack 0
  2352   0008E8                     _LCD_init:
  2353                           	callstack 27
  2354   0008E8                     
  2355                           ;LCD.c: 139:     TRISDbits.TRISD2 = 0; LATDbits.LATD2 = 0;
  2356   0008E8  9495               	bcf	149,2,c	;volatile
  2357   0008EA  948C               	bcf	140,2,c	;volatile
  2358                           
  2359                           ;LCD.c: 140:     TRISDbits.TRISD3 = 0; LATDbits.LATD3 = 0;
  2360   0008EC  9695               	bcf	149,3,c	;volatile
  2361   0008EE  968C               	bcf	140,3,c	;volatile
  2362                           
  2363                           ;LCD.c: 141:     TRISDbits.TRISD4 = 0; LATDbits.LATD4 = 0;
  2364   0008F0  9895               	bcf	149,4,c	;volatile
  2365   0008F2  988C               	bcf	140,4,c	;volatile
  2366                           
  2367                           ;LCD.c: 142:     TRISDbits.TRISD5 = 0; LATDbits.LATD5 = 0;
  2368   0008F4  9A95               	bcf	149,5,c	;volatile
  2369   0008F6  9A8C               	bcf	140,5,c	;volatile
  2370                           
  2371                           ;LCD.c: 143:     TRISDbits.TRISD6 = 0; LATDbits.LATD6 = 0;
  2372   0008F8  9C95               	bcf	149,6,c	;volatile
  2373   0008FA  9C8C               	bcf	140,6,c	;volatile
  2374                           
  2375                           ;LCD.c: 144:     TRISDbits.TRISD7 = 0; LATDbits.LATD7 = 0;
  2376   0008FC  9E95               	bcf	149,7,c	;volatile
  2377   0008FE  9E8C               	bcf	140,7,c	;volatile
  2378   000900                     
  2379                           ;LCD.c: 151:     _delay((unsigned long)((60)*(64000000/4000.0)));
  2380   000900  0E05               	movlw	5
  2381   000902  6E06               	movwf	(??_LCD_init+1)^0,c
  2382   000904  0EDF               	movlw	223
  2383   000906  6E05               	movwf	??_LCD_init^0,c
  2384   000908  0EBC               	movlw	188
  2385   00090A                     u1007:
  2386   00090A  2EE8               	decfsz	wreg,f,c
  2387   00090C  D7FE               	bra	u1007
  2388   00090E  2E05               	decfsz	??_LCD_init^0,f,c
  2389   000910  D7FC               	bra	u1007
  2390   000912  2E06               	decfsz	(??_LCD_init+1)^0,f,c
  2391   000914  D7FA               	bra	u1007
  2392   000916                     
  2393                           ;LCD.c: 154:     LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LA
      +                          TD4 = 1;
  2394   000916  9E8C               	bcf	140,7,c	;volatile
  2395   000918  9C8C               	bcf	140,6,c	;volatile
  2396   00091A  8A8C               	bsf	140,5,c	;volatile
  2397   00091C  888C               	bsf	140,4,c	;volatile
  2398   00091E                     
  2399                           ;LCD.c: 157:     LCD_pulse_clock();
  2400   00091E  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2401   000922                     
  2402                           ;LCD.c: 160:     _delay((unsigned long)((6)*(64000000/4000.0)));
  2403   000922  0E7D               	movlw	125
  2404   000924  6E05               	movwf	??_LCD_init^0,c
  2405   000926  0EAC               	movlw	172
  2406   000928                     u1017:
  2407   000928  2EE8               	decfsz	wreg,f,c
  2408   00092A  D7FE               	bra	u1017
  2409   00092C  2E05               	decfsz	??_LCD_init^0,f,c
  2410   00092E  D7FC               	bra	u1017
  2411                           
  2412                           ;LCD.c: 163:     LCD_pulse_clock();
  2413   000930  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2414   000934                     
  2415                           ;LCD.c: 166:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  2416   000934  0E04               	movlw	4
  2417   000936  6E05               	movwf	??_LCD_init^0,c
  2418   000938  0E1C               	movlw	28
  2419   00093A                     u1027:
  2420   00093A  2EE8               	decfsz	wreg,f,c
  2421   00093C  D7FE               	bra	u1027
  2422   00093E  2E05               	decfsz	??_LCD_init^0,f,c
  2423   000940  D7FC               	bra	u1027
  2424   000942  D000               	nop2	
  2425   000944                     
  2426                           ;LCD.c: 169:     LCD_pulse_clock();
  2427   000944  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2428   000948                     
  2429                           ;LCD.c: 172:     LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LA
      +                          TD4 = 0;
  2430   000948  9E8C               	bcf	140,7,c	;volatile
  2431   00094A  9C8C               	bcf	140,6,c	;volatile
  2432   00094C  8A8C               	bsf	140,5,c	;volatile
  2433   00094E  988C               	bcf	140,4,c	;volatile
  2434   000950                     
  2435                           ;LCD.c: 175:     LCD_pulse_clock();
  2436   000950  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2437   000954                     
  2438                           ;LCD.c: 178:     LCD_write_command(0x28);
  2439   000954  0E28               	movlw	40
  2440   000956  ECE9  F002         	call	_LCD_write_command
  2441   00095A                     
  2442                           ;LCD.c: 179:     LCD_write_command(LCD_display_control);
  2443   00095A  5064               	movf	_LCD_display_control^0,w,c
  2444   00095C  ECE9  F002         	call	_LCD_write_command
  2445   000960                     
  2446                           ;LCD.c: 180:     LCD_write_command(LCD_entry_mode);
  2447   000960  5063               	movf	_LCD_entry_mode^0,w,c
  2448   000962  ECE9  F002         	call	_LCD_write_command
  2449   000966                     
  2450                           ;LCD.c: 181:     LCD_clear();
  2451   000966  ECDD  F005         	call	_LCD_clear	;wreg free
  2452   00096A  0012               	return		;funcret
  2453   00096C                     __end_of_LCD_init:
  2454                           	callstack 0
  2455                           
  2456 ;; *************** function _LCD_clear *****************
  2457 ;; Defined at:
  2458 ;;		line 278 in file "LCD.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0, cstack
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1
  2472 ;;      Params:         0       0       0
  2473 ;;      Locals:         0       0       0
  2474 ;;      Temps:          1       0       0
  2475 ;;      Totals:         1       0       0
  2476 ;;Total ram usage:        1 bytes
  2477 ;; Hardware stack levels used: 1
  2478 ;; Hardware stack levels required when called: 2
  2479 ;; This function calls:
  2480 ;;		_LCD_write_command
  2481 ;; This function is called by:
  2482 ;;		_LCD_init
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text13
  2487   000BBA                     __ptext13:
  2488                           	callstack 0
  2489   000BBA                     _LCD_clear:
  2490                           	callstack 27
  2491   000BBA                     
  2492                           ;LCD.c: 281:     LCD_write_command(0x01);
  2493   000BBA  0E01               	movlw	1
  2494   000BBC  ECE9  F002         	call	_LCD_write_command
  2495   000BC0                     
  2496                           ;LCD.c: 284:     _delay((unsigned long)(((2300-60))*(64000000/4000000.0)));
  2497   000BC0  0E2F               	movlw	47
  2498   000BC2  6E04               	movwf	??_LCD_clear^0,c
  2499   000BC4  0E8A               	movlw	138
  2500   000BC6                     u1037:
  2501   000BC6  2EE8               	decfsz	wreg,f,c
  2502   000BC8  D7FE               	bra	u1037
  2503   000BCA  2E04               	decfsz	??_LCD_clear^0,f,c
  2504   000BCC  D7FC               	bra	u1037
  2505   000BCE  D000               	nop2	
  2506   000BD0                     
  2507                           ;LCD.c: 287:     LCD_write_command(LCD_entry_mode);
  2508   000BD0  5063               	movf	_LCD_entry_mode^0,w,c
  2509   000BD2  ECE9  F002         	call	_LCD_write_command
  2510   000BD6  0012               	return		;funcret
  2511   000BD8                     __end_of_LCD_clear:
  2512                           	callstack 0
  2513                           
  2514 ;; *************** function _LCD_cursor_set *****************
  2515 ;; Defined at:
  2516 ;;		line 189 in file "LCD.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  row             1    wreg     unsigned char 
  2519 ;;  column          1    3[COMRAM] unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  row             1    4[COMRAM] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1
  2531 ;;      Params:         1       0       0
  2532 ;;      Locals:         1       0       0
  2533 ;;      Temps:          0       0       0
  2534 ;;      Totals:         2       0       0
  2535 ;;Total ram usage:        2 bytes
  2536 ;; Hardware stack levels used: 1
  2537 ;; Hardware stack levels required when called: 2
  2538 ;; This function calls:
  2539 ;;		_LCD_write_command
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;;		_LCD_add_character
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text14
  2547   0009E2                     __ptext14:
  2548                           	callstack 0
  2549   0009E2                     _LCD_cursor_set:
  2550                           	callstack 28
  2551                           
  2552                           ;incstack = 0
  2553                           ;LCD_cursor_set@row stored from wreg
  2554   0009E2  6E05               	movwf	LCD_cursor_set@row^0,c
  2555   0009E4                     
  2556                           ;LCD.c: 192:     if(row == 1) column += (0x80-1);
  2557   0009E4  0405               	decf	LCD_cursor_set@row^0,w,c
  2558   0009E6  A4D8               	btfss	status,2,c
  2559   0009E8  EFF8  F004         	goto	u911
  2560   0009EC  EFFA  F004         	goto	u910
  2561   0009F0                     u911:
  2562   0009F0  EFFC  F004         	goto	l29
  2563   0009F4                     u910:
  2564   0009F4  0E7F               	movlw	127
  2565   0009F6  2604               	addwf	LCD_cursor_set@column^0,f,c
  2566   0009F8                     l29:
  2567                           
  2568                           ;LCD.c: 193:     if(row == 2) column += (0xC0-1);
  2569   0009F8  0E02               	movlw	2
  2570   0009FA  1805               	xorwf	LCD_cursor_set@row^0,w,c
  2571   0009FC  A4D8               	btfss	status,2,c
  2572   0009FE  EF03  F005         	goto	u921
  2573   000A02  EF05  F005         	goto	u920
  2574   000A06                     u921:
  2575   000A06  EF07  F005         	goto	l30
  2576   000A0A                     u920:
  2577   000A0A  0EBF               	movlw	191
  2578   000A0C  2604               	addwf	LCD_cursor_set@column^0,f,c
  2579   000A0E                     l30:
  2580                           
  2581                           ;LCD.c: 194:     if(row == 3) column += (0x80+19);
  2582   000A0E  0E03               	movlw	3
  2583   000A10  1805               	xorwf	LCD_cursor_set@row^0,w,c
  2584   000A12  A4D8               	btfss	status,2,c
  2585   000A14  EF0E  F005         	goto	u931
  2586   000A18  EF10  F005         	goto	u930
  2587   000A1C                     u931:
  2588   000A1C  EF12  F005         	goto	l31
  2589   000A20                     u930:
  2590   000A20  0E93               	movlw	147
  2591   000A22  2604               	addwf	LCD_cursor_set@column^0,f,c
  2592   000A24                     l31:
  2593                           
  2594                           ;LCD.c: 195:     if(row == 4) column += (0xC0+19);
  2595   000A24  0E04               	movlw	4
  2596   000A26  1805               	xorwf	LCD_cursor_set@row^0,w,c
  2597   000A28  A4D8               	btfss	status,2,c
  2598   000A2A  EF19  F005         	goto	u941
  2599   000A2E  EF1B  F005         	goto	u940
  2600   000A32                     u941:
  2601   000A32  EF1D  F005         	goto	l1598
  2602   000A36                     u940:
  2603   000A36  0ED3               	movlw	211
  2604   000A38  2604               	addwf	LCD_cursor_set@column^0,f,c
  2605   000A3A                     l1598:
  2606                           
  2607                           ;LCD.c: 198:    LCD_write_command(column);
  2608   000A3A  5004               	movf	LCD_cursor_set@column^0,w,c
  2609   000A3C  ECE9  F002         	call	_LCD_write_command
  2610   000A40  0012               	return		;funcret
  2611   000A42                     __end_of_LCD_cursor_set:
  2612                           	callstack 0
  2613                           
  2614 ;; *************** function _LCD_write_command *****************
  2615 ;; Defined at:
  2616 ;;		line 76 in file "LCD.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;  command         1    wreg     unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  command         1    2[COMRAM] unsigned char 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1
  2630 ;;      Params:         0       0       0
  2631 ;;      Locals:         1       0       0
  2632 ;;      Temps:          2       0       0
  2633 ;;      Totals:         3       0       0
  2634 ;;Total ram usage:        3 bytes
  2635 ;; Hardware stack levels used: 1
  2636 ;; Hardware stack levels required when called: 1
  2637 ;; This function calls:
  2638 ;;		_LCD_pulse_clock
  2639 ;; This function is called by:
  2640 ;;		_LCD_init
  2641 ;;		_LCD_cursor_set
  2642 ;;		_LCD_clear
  2643 ;;		_LCD_cursor_increment
  2644 ;;		_LCD_cursor_decrement
  2645 ;;		_LCD_configure_lcd_display
  2646 ;;		_LCD_configure_cursor_display
  2647 ;;		_LCD_configure_cursor_blink
  2648 ;;		_LCD_shift_reset
  2649 ;;		_LCD_shift_left
  2650 ;;		_LCD_shift_right
  2651 ;;		_LCD_configure_entry_id
  2652 ;;		_LCD_configure_entry_shift
  2653 ;;		_LCD_add_character
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text15
  2658   0005D2                     __ptext15:
  2659                           	callstack 0
  2660   0005D2                     _LCD_write_command:
  2661                           	callstack 28
  2662                           
  2663                           ;incstack = 0
  2664                           ;LCD_write_command@command stored from wreg
  2665   0005D2  6E03               	movwf	LCD_write_command@command^0,c
  2666   0005D4                     
  2667                           ;LCD.c: 78:     LATDbits.LATD2 = 0;
  2668   0005D4  948C               	bcf	140,2,c	;volatile
  2669   0005D6                     
  2670                           ;LCD.c: 81:     LATDbits.LATD7 = (command & 0b10000000) >> 7;
  2671   0005D6  6A01               	clrf	??_LCD_write_command^0,c
  2672   0005D8  AE03               	btfss	LCD_write_command@command^0,7,c
  2673   0005DA  D001               	bra	u185
  2674   0005DC  2A01               	incf	??_LCD_write_command^0,f,c
  2675   0005DE                     u185:
  2676   0005DE  0E01               	movlw	1
  2677   0005E0  1601               	andwf	??_LCD_write_command^0,f,c
  2678   0005E2  3201               	rrcf	??_LCD_write_command^0,f,c
  2679   0005E4  3201               	rrcf	??_LCD_write_command^0,f,c
  2680   0005E6  508C               	movf	140,w,c	;volatile
  2681   0005E8  1801               	xorwf	??_LCD_write_command^0,w,c
  2682   0005EA  0B7F               	andlw	-129
  2683   0005EC  1801               	xorwf	??_LCD_write_command^0,w,c
  2684   0005EE  6E8C               	movwf	140,c	;volatile
  2685                           
  2686                           ;LCD.c: 82:     LATDbits.LATD6 = (command & 0b01000000) >> 6;
  2687   0005F0  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2688   0005F4  0E06               	movlw	6
  2689   0005F6  6E02               	movwf	(??_LCD_write_command+1)^0,c
  2690   0005F8                     u195:
  2691   0005F8  90D8               	bcf	status,0,c
  2692   0005FA  3201               	rrcf	??_LCD_write_command^0,f,c
  2693   0005FC  2E02               	decfsz	(??_LCD_write_command+1)^0,f,c
  2694   0005FE  EFFC  F002         	goto	u195
  2695   000602  0E01               	movlw	1
  2696   000604  1601               	andwf	??_LCD_write_command^0,f,c
  2697   000606  3A01               	swapf	??_LCD_write_command^0,f,c
  2698   000608  4601               	rlncf	??_LCD_write_command^0,f,c
  2699   00060A  4601               	rlncf	??_LCD_write_command^0,f,c
  2700   00060C  508C               	movf	140,w,c	;volatile
  2701   00060E  1801               	xorwf	??_LCD_write_command^0,w,c
  2702   000610  0BBF               	andlw	-65
  2703   000612  1801               	xorwf	??_LCD_write_command^0,w,c
  2704   000614  6E8C               	movwf	140,c	;volatile
  2705                           
  2706                           ;LCD.c: 83:     LATDbits.LATD5 = (command & 0b00100000) >> 5;
  2707   000616  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2708   00061A  0E05               	movlw	5
  2709   00061C  6E02               	movwf	(??_LCD_write_command+1)^0,c
  2710   00061E                     u205:
  2711   00061E  90D8               	bcf	status,0,c
  2712   000620  3201               	rrcf	??_LCD_write_command^0,f,c
  2713   000622  2E02               	decfsz	(??_LCD_write_command+1)^0,f,c
  2714   000624  EF0F  F003         	goto	u205
  2715   000628  0E01               	movlw	1
  2716   00062A  1601               	andwf	??_LCD_write_command^0,f,c
  2717   00062C  3A01               	swapf	??_LCD_write_command^0,f,c
  2718   00062E  4601               	rlncf	??_LCD_write_command^0,f,c
  2719   000630  508C               	movf	140,w,c	;volatile
  2720   000632  1801               	xorwf	??_LCD_write_command^0,w,c
  2721   000634  0BDF               	andlw	-33
  2722   000636  1801               	xorwf	??_LCD_write_command^0,w,c
  2723   000638  6E8C               	movwf	140,c	;volatile
  2724                           
  2725                           ;LCD.c: 84:     LATDbits.LATD4 = (command & 0b00010000) >> 4;
  2726   00063A  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2727   00063E  3A01               	swapf	??_LCD_write_command^0,f,c
  2728   000640  0E0F               	movlw	15
  2729   000642  1601               	andwf	??_LCD_write_command^0,f,c
  2730   000644  0E01               	movlw	1
  2731   000646  1601               	andwf	??_LCD_write_command^0,f,c
  2732   000648  3A01               	swapf	??_LCD_write_command^0,f,c
  2733   00064A  508C               	movf	140,w,c	;volatile
  2734   00064C  1801               	xorwf	??_LCD_write_command^0,w,c
  2735   00064E  0BEF               	andlw	-17
  2736   000650  1801               	xorwf	??_LCD_write_command^0,w,c
  2737   000652  6E8C               	movwf	140,c	;volatile
  2738   000654                     
  2739                           ;LCD.c: 87:     LCD_pulse_clock();
  2740   000654  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2741   000658                     
  2742                           ;LCD.c: 90:     LATDbits.LATD7 = (command & 0b00001000) >> 3;
  2743   000658  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2744   00065C  90D8               	bcf	status,0,c
  2745   00065E  3201               	rrcf	??_LCD_write_command^0,f,c
  2746   000660  90D8               	bcf	status,0,c
  2747   000662  3201               	rrcf	??_LCD_write_command^0,f,c
  2748   000664  90D8               	bcf	status,0,c
  2749   000666  3201               	rrcf	??_LCD_write_command^0,f,c
  2750   000668  0E01               	movlw	1
  2751   00066A  1601               	andwf	??_LCD_write_command^0,f,c
  2752   00066C  3201               	rrcf	??_LCD_write_command^0,f,c
  2753   00066E  3201               	rrcf	??_LCD_write_command^0,f,c
  2754   000670  508C               	movf	140,w,c	;volatile
  2755   000672  1801               	xorwf	??_LCD_write_command^0,w,c
  2756   000674  0B7F               	andlw	-129
  2757   000676  1801               	xorwf	??_LCD_write_command^0,w,c
  2758   000678  6E8C               	movwf	140,c	;volatile
  2759   00067A                     
  2760                           ;LCD.c: 91:     LATDbits.LATD6 = (command & 0b00000100) >> 2;
  2761   00067A  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2762   00067E  90D8               	bcf	status,0,c
  2763   000680  3201               	rrcf	??_LCD_write_command^0,f,c
  2764   000682  90D8               	bcf	status,0,c
  2765   000684  3201               	rrcf	??_LCD_write_command^0,f,c
  2766   000686  0E01               	movlw	1
  2767   000688  1601               	andwf	??_LCD_write_command^0,f,c
  2768   00068A  3A01               	swapf	??_LCD_write_command^0,f,c
  2769   00068C  4601               	rlncf	??_LCD_write_command^0,f,c
  2770   00068E  4601               	rlncf	??_LCD_write_command^0,f,c
  2771   000690  508C               	movf	140,w,c	;volatile
  2772   000692  1801               	xorwf	??_LCD_write_command^0,w,c
  2773   000694  0BBF               	andlw	-65
  2774   000696  1801               	xorwf	??_LCD_write_command^0,w,c
  2775   000698  6E8C               	movwf	140,c	;volatile
  2776   00069A                     
  2777                           ;LCD.c: 92:     LATDbits.LATD5 = (command & 0b00000010) >> 1;
  2778   00069A  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2779   00069E  90D8               	bcf	status,0,c
  2780   0006A0  3201               	rrcf	??_LCD_write_command^0,f,c
  2781   0006A2  0E01               	movlw	1
  2782   0006A4  1601               	andwf	??_LCD_write_command^0,f,c
  2783   0006A6  3A01               	swapf	??_LCD_write_command^0,f,c
  2784   0006A8  4601               	rlncf	??_LCD_write_command^0,f,c
  2785   0006AA  508C               	movf	140,w,c	;volatile
  2786   0006AC  1801               	xorwf	??_LCD_write_command^0,w,c
  2787   0006AE  0BDF               	andlw	-33
  2788   0006B0  1801               	xorwf	??_LCD_write_command^0,w,c
  2789   0006B2  6E8C               	movwf	140,c	;volatile
  2790   0006B4                     
  2791                           ;LCD.c: 93:     LATDbits.LATD4 = (command & 0b00000001) ;
  2792   0006B4  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2793   0006B8  0E01               	movlw	1
  2794   0006BA  1601               	andwf	??_LCD_write_command^0,f,c
  2795   0006BC  3A01               	swapf	??_LCD_write_command^0,f,c
  2796   0006BE  508C               	movf	140,w,c	;volatile
  2797   0006C0  1801               	xorwf	??_LCD_write_command^0,w,c
  2798   0006C2  0BEF               	andlw	-17
  2799   0006C4  1801               	xorwf	??_LCD_write_command^0,w,c
  2800   0006C6  6E8C               	movwf	140,c	;volatile
  2801   0006C8                     
  2802                           ;LCD.c: 96:     LCD_pulse_clock();
  2803   0006C8  ECEC  F005         	call	_LCD_pulse_clock	;wreg free
  2804   0006CC  0012               	return		;funcret
  2805   0006CE                     __end_of_LCD_write_command:
  2806                           	callstack 0
  2807                           
  2808 ;; *************** function _LCD_pulse_clock *****************
  2809 ;; Defined at:
  2810 ;;		line 64 in file "LCD.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1
  2824 ;;      Params:         0       0       0
  2825 ;;      Locals:         0       0       0
  2826 ;;      Temps:          0       0       0
  2827 ;;      Totals:         0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used: 1
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_LCD_write_command
  2834 ;;		_LCD_write_data
  2835 ;;		_LCD_init
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text16
  2840   000BD8                     __ptext16:
  2841                           	callstack 0
  2842   000BD8                     _LCD_pulse_clock:
  2843                           	callstack 28
  2844   000BD8                     
  2845                           ;LCD.c: 66:   LATDbits.LATD3 = 1;
  2846   000BD8  868C               	bsf	140,3,c	;volatile
  2847   000BDA                     
  2848                           ;LCD.c: 67:   _delay((unsigned long)((60)*(64000000/4000000.0)));
  2849   000BDA  0EC0               	movlw	192
  2850   000BDC                     u1047:
  2851   000BDC  D000               	nop2	
  2852   000BDE  2EE8               	decfsz	wreg,f,c
  2853   000BE0  D7FD               	bra	u1047
  2854   000BE2                     
  2855                           ;LCD.c: 68:   LATDbits.LATD3 = 0;
  2856   000BE2  968C               	bcf	140,3,c	;volatile
  2857   000BE4  0012               	return		;funcret
  2858   000BE6                     __end_of_LCD_pulse_clock:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _DHT11_Start *****************
  2862 ;; Defined at:
  2863 ;;		line 5 in file "DHT.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1
  2877 ;;      Params:         0       0       0
  2878 ;;      Locals:         0       0       0
  2879 ;;      Temps:          1       0       0
  2880 ;;      Totals:         1       0       0
  2881 ;;Total ram usage:        1 bytes
  2882 ;; Hardware stack levels used: 1
  2883 ;; This function calls:
  2884 ;;		Nothing
  2885 ;; This function is called by:
  2886 ;;		_main
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           	psect	text17
  2891   000B9A                     __ptext17:
  2892                           	callstack 0
  2893   000B9A                     _DHT11_Start:
  2894                           	callstack 30
  2895   000B9A                     
  2896                           ;DHT.c: 7:     TRISAbits.RA0 = 0;
  2897   000B9A  9092               	bcf	146,0,c	;volatile
  2898                           
  2899                           ;DHT.c: 8:     LATA0 = 0;
  2900   000B9C  9089               	bcf	3977,0,c	;volatile
  2901   000B9E                     
  2902                           ;DHT.c: 9:     _delay((unsigned long)((18)*(8000000/4000.0)));
  2903   000B9E  0E2F               	movlw	47
  2904   000BA0  6E01               	movwf	??_DHT11_Start^0,c
  2905   000BA2  0EC0               	movlw	192
  2906   000BA4                     u1057:
  2907   000BA4  2EE8               	decfsz	wreg,f,c
  2908   000BA6  D7FE               	bra	u1057
  2909   000BA8  2E01               	decfsz	??_DHT11_Start^0,f,c
  2910   000BAA  D7FC               	bra	u1057
  2911   000BAC                     
  2912                           ;DHT.c: 10:     LATA0 = 1;
  2913   000BAC  8089               	bsf	3977,0,c	;volatile
  2914                           
  2915                           ;DHT.c: 11:     _delay((unsigned long)((20)*(8000000/4000000.0)));
  2916   000BAE  0E0D               	movlw	13
  2917   000BB0                     u1067:
  2918   000BB0  2EE8               	decfsz	wreg,f,c
  2919   000BB2  D7FE               	bra	u1067
  2920   000BB4  0000               	nop	
  2921   000BB6                     
  2922                           ;DHT.c: 12:     TRISAbits.RA0 = 1;
  2923   000BB6  8092               	bsf	146,0,c	;volatile
  2924   000BB8  0012               	return		;funcret
  2925   000BBA                     __end_of_DHT11_Start:
  2926                           	callstack 0
  2927                           
  2928 ;; *************** function _DHT11_ReadData *****************
  2929 ;; Defined at:
  2930 ;;		line 16 in file "DHT.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;		None
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  data            1    1[COMRAM] unsigned char 
  2935 ;;  i               1    0[COMRAM] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      unsigned char 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1
  2945 ;;      Params:         0       0       0
  2946 ;;      Locals:         2       0       0
  2947 ;;      Temps:          0       0       0
  2948 ;;      Totals:         2       0       0
  2949 ;;Total ram usage:        2 bytes
  2950 ;; Hardware stack levels used: 1
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_main
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text18
  2959   000A42                     __ptext18:
  2960                           	callstack 0
  2961   000A42                     _DHT11_ReadData:
  2962                           	callstack 30
  2963   000A42                     
  2964                           ;DHT.c: 18:   char i,data = 0;
  2965   000A42  6A02               	clrf	DHT11_ReadData@data^0,c
  2966                           
  2967                           ;DHT.c: 19:     for(i=0;i<8;i++)
  2968   000A44  6A01               	clrf	DHT11_ReadData@i^0,c
  2969   000A46                     l164:
  2970   000A46  A080               	btfss	128,0,c	;volatile
  2971   000A48  EF28  F005         	goto	u501
  2972   000A4C  EF2A  F005         	goto	u500
  2973   000A50                     u501:
  2974   000A50  EF23  F005         	goto	l164
  2975   000A54                     u500:
  2976   000A54                     
  2977                           ;DHT.c: 22:         _delay((unsigned long)((30)*(8000000/4000000.0)));
  2978   000A54  0E14               	movlw	20
  2979   000A56                     u1077:
  2980   000A56  2EE8               	decfsz	wreg,f,c
  2981   000A58  D7FE               	bra	u1077
  2982   000A5A                     
  2983                           ;DHT.c: 23:         if(PORTAbits.RA0 & 1)
  2984   000A5A  A080               	btfss	128,0,c	;volatile
  2985   000A5C  EF32  F005         	goto	u511
  2986   000A60  EF34  F005         	goto	u510
  2987   000A64                     u511:
  2988   000A64  EF38  F005         	goto	l1274
  2989   000A68                     u510:
  2990   000A68                     
  2991                           ;DHT.c: 24:           data = ((data<<1) | 1);
  2992   000A68  80D8               	bsf	status,0,c
  2993   000A6A  3602               	rlcf	DHT11_ReadData@data^0,f,c
  2994   000A6C  EF3B  F005         	goto	l169
  2995   000A70                     l1274:
  2996                           
  2997                           ;DHT.c: 26:           data = (data<<1);
  2998   000A70  5002               	movf	DHT11_ReadData@data^0,w,c
  2999   000A72  2402               	addwf	DHT11_ReadData@data^0,w,c
  3000   000A74  6E02               	movwf	DHT11_ReadData@data^0,c
  3001   000A76                     l169:
  3002   000A76  B080               	btfsc	128,0,c	;volatile
  3003   000A78  EF40  F005         	goto	u521
  3004   000A7C  EF42  F005         	goto	u520
  3005   000A80                     u521:
  3006   000A80  EF3B  F005         	goto	l169
  3007   000A84                     u520:
  3008   000A84                     
  3009                           ;DHT.c: 28:     }
  3010   000A84  2A01               	incf	DHT11_ReadData@i^0,f,c
  3011   000A86  0E07               	movlw	7
  3012   000A88  6401               	cpfsgt	DHT11_ReadData@i^0,c
  3013   000A8A  EF49  F005         	goto	u531
  3014   000A8E  EF4B  F005         	goto	u530
  3015   000A92                     u531:
  3016   000A92  EF23  F005         	goto	l164
  3017   000A96                     u530:
  3018   000A96                     
  3019                           ;DHT.c: 29:   return data;
  3020   000A96  5002               	movf	DHT11_ReadData@data^0,w,c
  3021   000A98  0012               	return		;funcret
  3022   000A9A                     __end_of_DHT11_ReadData:
  3023                           	callstack 0
  3024                           
  3025 ;; *************** function _DHT11_CheckResponse *****************
  3026 ;; Defined at:
  3027 ;;		line 32 in file "DHT.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		None
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1
  3041 ;;      Params:         0       0       0
  3042 ;;      Locals:         0       0       0
  3043 ;;      Temps:          0       0       0
  3044 ;;      Totals:         0       0       0
  3045 ;;Total ram usage:        0 bytes
  3046 ;; Hardware stack levels used: 1
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_main
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text19
  3055   000B6E                     __ptext19:
  3056                           	callstack 0
  3057   000B6E                     _DHT11_CheckResponse:
  3058                           	callstack 30
  3059   000B6E                     l175:
  3060   000B6E  B080               	btfsc	128,0,c	;volatile
  3061   000B70  EFBC  F005         	goto	u471
  3062   000B74  EFBE  F005         	goto	u470
  3063   000B78                     u471:
  3064   000B78  EFB7  F005         	goto	l175
  3065   000B7C                     u470:
  3066   000B7C                     l178:
  3067   000B7C  A080               	btfss	128,0,c	;volatile
  3068   000B7E  EFC3  F005         	goto	u481
  3069   000B82  EFC5  F005         	goto	u480
  3070   000B86                     u481:
  3071   000B86  EFBE  F005         	goto	l178
  3072   000B8A                     u480:
  3073   000B8A                     l181:
  3074   000B8A  B080               	btfsc	128,0,c	;volatile
  3075   000B8C  EFCA  F005         	goto	u491
  3076   000B90  EFCC  F005         	goto	u490
  3077   000B94                     u491:
  3078   000B94  EFC5  F005         	goto	l181
  3079   000B98                     u490:
  3080   000B98  0012               	return		;funcret
  3081   000B9A                     __end_of_DHT11_CheckResponse:
  3082                           	callstack 0
  3083                           
  3084                           	psect	rparam
  3085   000001                     ___rparam_used  equ	1
  3086   000000                     ___param_bank   equ	0
  3087   000000                     __Lparam        equ	__Lrparam
  3088   000000                     __Hparam        equ	__Hrparam
  3089                           
  3090                           	psect	config
  3091                           
  3092                           ; Padding undefined space
  3093   300000                     	org	3145728
  3094   300000  FF                 	db	255
  3095                           
  3096                           ;Config register CONFIG1H @ 0x300001
  3097                           ;	Oscillator
  3098                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  3099                           ;	Fail-Safe Clock Monitor Enable bit
  3100                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3101                           ;	Internal/External Oscillator Switchover bit
  3102                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3103   300001                     	org	3145729
  3104   300001  08                 	db	8
  3105                           
  3106                           ;Config register CONFIG2L @ 0x300002
  3107                           ;	Power-up Timer Enable bit
  3108                           ;	PWRT = OFF, PWRT disabled
  3109                           ;	Brown-out Reset Enable bits
  3110                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3111                           ;	Brown-out Reset Voltage bits
  3112                           ;	BORV = 3, Minimum Setting
  3113   300002                     	org	3145730
  3114   300002  19                 	db	25
  3115                           
  3116                           ;Config register CONFIG2H @ 0x300003
  3117                           ;	Watchdog Timer Enable bit
  3118                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3119                           ;	Watchdog Timer Postscale Select bits
  3120                           ;	WDTPS = 32768, 1:32768
  3121   300003                     	org	3145731
  3122   300003  1E                 	db	30
  3123                           
  3124                           ; Padding undefined space
  3125   300004                     	org	3145732
  3126   300004  FF                 	db	255
  3127                           
  3128                           ;Config register CONFIG3H @ 0x300005
  3129                           ;	CCP2 MUX bit
  3130                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  3131                           ;	PORTB A/D Enable bit
  3132                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  3133                           ;	Low-Power Timer1 Oscillator Enable bit
  3134                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3135                           ;	MCLR Pin Enable bit
  3136                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3137   300005                     	org	3145733
  3138   300005  83                 	db	131
  3139                           
  3140                           ;Config register CONFIG4L @ 0x300006
  3141                           ;	Stack Full/Underflow Reset Enable bit
  3142                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3143                           ;	Single-Supply ICSP Enable bit
  3144                           ;	LVP = OFF, Single-Supply ICSP disabled
  3145                           ;	Boot Block Size Select bits
  3146                           ;	BBSIZ = BB256, 256 Word
  3147                           ;	Extended Instruction Set Enable bit
  3148                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3149                           ;	Background Debugger Enable bit
  3150                           ;	DEBUG = 0x1, unprogrammed default
  3151   300006                     	org	3145734
  3152   300006  81                 	db	129
  3153                           
  3154                           ; Padding undefined space
  3155   300007                     	org	3145735
  3156   300007  FF                 	db	255
  3157                           
  3158                           ;Config register CONFIG5L @ 0x300008
  3159                           ;	Code Protection bit
  3160                           ;	CP0 = OFF, Block 0 not code-protected
  3161                           ;	Code Protection bit
  3162                           ;	CP1 = OFF, Block 1 not code-protected
  3163   300008                     	org	3145736
  3164   300008  03                 	db	3
  3165                           
  3166                           ;Config register CONFIG5H @ 0x300009
  3167                           ;	Boot Block Code Protection bitProtect Boot
  3168                           ;	CPB = OFF, Boot block not code-protected
  3169                           ;	Data EEPROM Code Protection bit
  3170                           ;	CPD = OFF, Data EEPROM not code-protected
  3171   300009                     	org	3145737
  3172   300009  C0                 	db	192
  3173                           
  3174                           ;Config register CONFIG6L @ 0x30000A
  3175                           ;	Write Protection bit
  3176                           ;	WRT0 = OFF, Block 0 not write-protected
  3177                           ;	Write Protection bit
  3178                           ;	WRT1 = OFF, Block 1 not write-protected
  3179   30000A                     	org	3145738
  3180   30000A  03                 	db	3
  3181                           
  3182                           ;Config register CONFIG6H @ 0x30000B
  3183                           ;	Configuration Register Write Protection bit
  3184                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3185                           ;	Boot Block Write Protection bit
  3186                           ;	WRTB = OFF, Boot block not write-protected
  3187                           ;	Data EEPROM Write Protection bit
  3188                           ;	WRTD = OFF, Data EEPROM not write-protected
  3189   30000B                     	org	3145739
  3190   30000B  E0                 	db	224
  3191                           
  3192                           ;Config register CONFIG7L @ 0x30000C
  3193                           ;	Table Read Protection bit
  3194                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  3195                           ;	Table Read Protection bit
  3196                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  3197   30000C                     	org	3145740
  3198   30000C  03                 	db	3
  3199                           
  3200                           ;Config register CONFIG7H @ 0x30000D
  3201                           ;	Boot Block Table Read Protection bit
  3202                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  3203   30000D                     	org	3145741
  3204   30000D  40                 	db	64
  3205                           tosu	equ	0xFFF
  3206                           tosh	equ	0xFFE
  3207                           tosl	equ	0xFFD
  3208                           stkptr	equ	0xFFC
  3209                           pclatu	equ	0xFFB
  3210                           pclath	equ	0xFFA
  3211                           pcl	equ	0xFF9
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           indf0	equ	0xFEF
  3219                           postinc0	equ	0xFEE
  3220                           postdec0	equ	0xFED
  3221                           preinc0	equ	0xFEC
  3222                           plusw0	equ	0xFEB
  3223                           fsr0h	equ	0xFEA
  3224                           fsr0l	equ	0xFE9
  3225                           wreg	equ	0xFE8
  3226                           indf1	equ	0xFE7
  3227                           postinc1	equ	0xFE6
  3228                           postdec1	equ	0xFE5
  3229                           preinc1	equ	0xFE4
  3230                           plusw1	equ	0xFE3
  3231                           fsr1h	equ	0xFE2
  3232                           fsr1l	equ	0xFE1
  3233                           bsr	equ	0xFE0
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           preinc2	equ	0xFDC
  3238                           plusw2	equ	0xFDB
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8

Data Sizes:
    Strings     27
    Constant    0
    Data        2
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     57     100
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    LCD_write_string@string	PTR unsigned char  size(2) Largest target is 11
		 -> main@value(COMRAM[10]), STR_1(CODE[11]), STR_4(CODE[7]), 

    S855$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    S855$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[3]), STR_3(CODE[5]), STR_5(CODE[3]), STR_6(CODE[4]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[3]), STR_3(CODE[5]), STR_5(CODE[3]), STR_6(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[3]), STR_3(CODE[5]), STR_5(CODE[3]), STR_6(CODE[4]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[3]), STR_3(CODE[5]), STR_5(CODE[3]), STR_6(CODE[4]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _LCD_write_string->_LCD_write_data
    _LCD_write_char->_LCD_write_data
    _LCD_init->_LCD_clear
    _LCD_clear->_LCD_write_command
    _LCD_cursor_set->_LCD_write_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    2971
                                             41 COMRAM    16    16      0
                _DHT11_CheckResponse
                     _DHT11_ReadData
                        _DHT11_Start
                     _LCD_cursor_set
                           _LCD_init
                     _LCD_write_char
                   _LCD_write_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    14      4    1766
                                             25 COMRAM    16    12      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    1559
                                             21 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    1434
                                             10 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     230
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     302
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_write_string                                     5     3      2     216
                                              3 COMRAM     5     3      2
                     _LCD_write_data
 ---------------------------------------------------------------------------------
 (1) _LCD_write_char                                       1     1      0     135
                                              3 COMRAM     1     1      0
                     _LCD_write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_write_data                                       3     3      0     120
                                              0 COMRAM     3     3      0
                    _LCD_pulse_clock
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0     240
                                              4 COMRAM     2     2      0
                          _LCD_clear
                    _LCD_pulse_clock
                  _LCD_write_command
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            1     1      0     120
                                              3 COMRAM     1     1      0
                  _LCD_write_command
 ---------------------------------------------------------------------------------
 (1) _LCD_cursor_set                                       2     1      1     265
                                              3 COMRAM     2     1      1
                  _LCD_write_command
 ---------------------------------------------------------------------------------
 (2) _LCD_write_command                                    3     3      0     120
                                              0 COMRAM     3     3      0
                    _LCD_pulse_clock
 ---------------------------------------------------------------------------------
 (3) _LCD_pulse_clock                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DHT11_Start                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DHT11_ReadData                                       2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DHT11_CheckResponse                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DHT11_CheckResponse
   _DHT11_ReadData
   _DHT11_Start
   _LCD_cursor_set
     _LCD_write_command
       _LCD_pulse_clock
   _LCD_init
     _LCD_clear
       _LCD_write_command
     _LCD_pulse_clock
     _LCD_write_command
   _LCD_write_char
     _LCD_write_data
       _LCD_pulse_clock
   _LCD_write_string
     _LCD_write_data
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          127      0       0      0.0%
COMRAM             127     57     100     78.7%
BITBIGSFRh         115      0       0      0.0%
BITBIGSFRll          8      0       0      0.0%
BITBIGSFRlh          2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     100      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Nov 14 22:44:55 2024

                         l20 06CC                           l30 0A0E                           l31 0A24  
                         l23 05D0                           l17 0BE4                           l33 0A40  
                         l26 096A                           l29 09F8                           l57 0BD6  
                         l90 0BEE                           l87 09E0                 ___awdiv@sign 0006  
                        l172 0A98                          l164 0A46                          l181 0B8A  
                        l175 0B6E                          l159 0BB8                          l431 083C  
                        l184 0B98                          l169 0A76                          l178 0B7C  
                        l418 078E                          l912 03D4                          l922 0B26  
                        l925 0B3E                          l950 0BD8                          l918 0AD6  
                        l952 0BDA                          l937 08E6                          l954 0BE2  
                        l874 0B0A                          l948 0BF2                          u205 061E  
                        u315 04E2                          u500 0A54                          u501 0A50  
                        u325 04FC                          u510 0A68                main@T_Decimal 0038  
                        u511 0A64                          u335 0522                          u520 0A84  
                        u521 0A80                          u185 05DE                          u530 0A96  
                        u531 0A92                          u195 05F8                          u700 07BA  
                        u701 07B6                          u470 0B7C                          u630 06DE  
                        u710 07D4                          u471 0B78                          u631 06DA  
                        u711 07D0                          u480 0B8A                          u640 06F8  
                        u720 07F2                          u800 0240                          u481 0B86  
                        u641 06F4                          u721 07EE                          u801 023C  
                        u490 0B98                          u650 071E                          u730 0808  
                        u810 027E                          u491 0B94                          u651 071A  
                        u731 0804                          u811 027A                          u660 073C  
                        u740 082C                          u820 029A                          u900 0ACE  
                        u661 0738                          u741 0828                          u821 0296  
                        u901 0ACA                          u910 09F4                          u670 0758  
                        u750 084E                          u830 02D0                          u911 09F0  
                        u671 0754                          u751 084A                          u831 02CA  
                        u920 0A0A                          u680 077E                          u760 085E  
                        u840 02D2                          u921 0A06                          u681 077A  
                        u761 085A                          u930 0A20                          u690 07A0  
                        u770 0884                          u850 0332                          u931 0A1C  
                        u691 079C                          u771 0880                          u851 032E  
                        u940 0A36                          u780 08B6                          u860 0342  
                        u941 0A32                          u781 08B2                          u861 033E  
                        u950 099E                          u790 0B1A                          u870 0352  
                        u791 0B16                          u871 034E                          u960 09D0  
                        u880 0362                          u881 035E                          u970 09E0  
                        u890 03A2                          u971 09DC                          u891 039E  
                        u957 0994                          u967 09C6                          u997 04C2  
                        _abs 0B0C                 ___awmod@sign 0006                          wreg 0FE8  
                       l1120 04D8                         l1130 059E                         l1122 04DA  
                       l1210 0BE8                         ?_abs 0007                         l1060 0658  
                       l1140 0BD0                         l1132 05B8                         l1124 0558  
                       l1062 067A                         l1054 05D4                         l1134 05CC  
                       l1126 055C                         l1064 069A                         l1056 05D6  
                       l1136 0BBA                         l1160 091A                         l1152 08E8  
                       l1128 057E                         l1066 06B4                         l1058 0654  
                       l1138 0BC0                         l1170 0944                         l1162 091C  
                       l1154 0900                         l1260 0B6E                         l1252 0B9A  
                       l1068 06C8                         l1180 0950                         l1172 0948  
                       l1164 091E                         l1156 0916                         l1500 0816  
                       l1270 0A5A                         l1262 0A42                         l1254 0B9E  
                       l1182 0954                         l1174 094A                         l1166 0922  
                       l1158 0918                         l1430 06CE                         l1502 081C  
                       l1510 083E                         l1280 0A96                         l1272 0A68  
                       l1256 0BAC                         l1184 095A                         l1176 094C  
                       l1168 0934                         l1600 096C                         l1440 06F8  
                       l1432 06D0                         l1504 082C                         l1520 08B6  
                       l1512 084E                         l1274 0A70                         l1258 0BB6  
                       l1186 0960                         l1178 094E                         l1602 0972  
                       l1450 0726                         l1442 0700                         l1434 06DE  
                       l1506 0834                         l1514 085E                         l1530 0240  
                       l1610 0AE0                         l1276 0A84                         l1268 0A54  
                       l1188 0966                         l1604 09A2                         l1460 0760  
                       l1452 072E                         l1444 0704                         l1436 06E6  
                       l1524 0B0C                         l1516 0868                         l1540 027E  
                       l1532 0248                         l1612 0AE8                         l1278 0A86  
                       l1606 09A4                         l1470 0786                         l1462 0762  
                       l1454 073C                         l1446 070C                         l1438 06EA  
                       l1526 0B1A                         l1518 0884                         l1550 0304  
                       l1542 029A                         l1534 0254                         l1614 0AF0  
                       l1464 0768                         l1456 0742                         l1448 071E  
                       l1480 07A8                         l1560 0362                         l1552 0320  
                       l1544 02B2                         l1536 0258                         l1528 021E  
                       l1616 0B00                         l1608 0AD8                         l1640 03E2  
                       l1458 0758                         l1466 076E                         l1490 07DC  
                       l1482 07AC                         l1474 0790                         l1562 0374  
                       l1554 0332                         l1546 02BC                         l1538 0262  
                       l1650 03FC                         l1642 03E6                         l1468 077E  
                       l1492 07E4                         l1484 07BA                         l1476 0792  
                       l1564 038E                         l1556 0342                         l1548 02D4  
                       l1572 03B2                         l1580 0AA2                         l1660 0438  
                       l1652 0402                         l1644 03EA                         l1636 03D6  
                       l1590 09F4                         l1494 07F2                         l1486 07C2  
                       l1478 07A0                         l1558 0352                         l1566 0390  
                       l1582 0AB2                         l1670 0474                         l1662 044A  
                       l1654 040C                         l1646 03F0                         l1638 03DE  
                       l1592 0A0A                         l1496 0808                         l1488 07D4  
                       l1568 03A6                         l1584 0ACE                         l1680 04B2  
                       l1672 0486                         l1664 0454                         l1656 041C  
                       l1648 03F6                         l1594 0A20                         l1498 0810  
                       l1578 0A9A                         l1682 04B8                         l1674 0490  
                       l1666 045A                         l1658 042E                         l1596 0A36  
                       l1588 09E4                         l1676 04A2                         l1668 0464  
                       l1598 0A3A                         l1678 04AC                         STR_1 0201  
                       STR_2 0219                         STR_3 0213                         STR_4 020C  
                       STR_5 0219                         STR_6 0218                         u1007 090A  
                       u1017 0928                         u1027 093A                         u1037 0BC6  
                       u1047 0BDC                         u1057 0BA4                         u1067 0BB0  
                       u1077 0A56                         abs@a 0007                         _dbuf 003A  
                       _main 03D6                         _prec 0060                         fsr0h 0FEA  
                       fsr1h 0FE2                         indf0 0FEF                         fsr2h 0FDA  
                       fsr0l 0FE9                         indf2 0FDF                         fsr1l 0FE1  
                       fsr2l 0FD9                         start 0000             ??_DHT11_ReadData 0001  
               ___param_bank 0000               main@T_Integral 0039                        ??_abs 0009  
           __end_of_LCD_init 096C                        ?_main 0001              __end_of___awdiv 0790  
            __end_of___awmod 083E              ___awdiv@divisor 0003                        _LATA0 7C48  
            ___awdiv@counter 0005                 vfpfcnvrt@fmt 000C                        _flags 0062  
                      _fputc 083E                        _width 005E                        _putch 0BF2  
                      tablat 0FF5                        status 0FD8              __end_of_sprintf 0B0C  
            __initialization 0B40                 __end_of_main 04D6            ?_LCD_write_string 0004  
                     ??_main 002A                __activetblptr 0002           ??_LCD_write_string 0006  
          __end_of_LCD_clear 0BD8                       _ADCON1 0FC1                       ?_fputc 0001  
           ___awdiv@dividend 0001                       ?_putch 0001          _DHT11_CheckResponse 0B6E  
     LCD_write_string@string 0004                       _OSCCON 0FD3                vfpfcnvrt@done 000F  
               vfprintf@cfmt 0019                    ??___awdiv 0005                    ??___awmod 0005  
       ?_DHT11_CheckResponse 0001                       clear_0 0B5E             ___awdiv@quotient 0007  
            ___awmod@divisor 0003                       isa$std 0001              ___awmod@counter 0005  
                     fputc@c 0001                 __pdataCOMRAM 0063                 __mediumconst 0000  
                     tblptrh 0FF7                       tblptrl 0FF6                       tblptru 0FF8  
                     putch@c 0001             __end_of_vfprintf 0AD8                    ??_sprintf 001E  
                 __accesstop 0080      __end_of__initialization 0B64                    ?_LCD_init 0001  
              ___rparam_used 0001               __pcstackCOMRAM 0001        ??_DHT11_CheckResponse 0001  
             _LCD_entry_mode 0063            _LCD_write_command 05D2                __end_of_fputc 08E8  
              __end_of_putch 0BF4               _LCD_cursor_set 09E2           ?_LCD_write_command 0001  
        ??_LCD_write_command 0001                      ??_fputc 0004                      ??_putch 0001  
                 ??_LCD_init 0005    __end_of_LCD_write_command 06CE       __end_of_LCD_cursor_set 0A42  
   LCD_write_command@command 0003                ??_DHT11_Start 0001                      __Hparam 0000  
                    __Lparam 0000              ?_LCD_cursor_set 0004                      ___awdiv 06CE  
                    ___awmod 0790               _LCD_write_char 0BE6               _LCD_write_data 04D6  
                  ?_vfprintf 0016                 __psmallconst 0200                      __pcinit 0B40  
                    __ramtop 0200                      __ptext0 03D6                      __ptext1 0AD8  
                    __ptext2 0A9A                      __ptext3 021E                      __ptext4 083E  
                    __ptext5 0BF2                      __ptext6 0B0C                      __ptext7 0790  
                    __ptext8 06CE                      __ptext9 096C             ___awmod@dividend 0001  
                    _sprintf 0AD8                    _LCD_clear 0BBA         end_of_initialization 0B64  
                    fputc@fp 0003                __Lmediumconst 0000         LCD_cursor_set@column 0004  
        _LCD_display_control 0064       __end_of_LCD_write_char 0BF0       __end_of_LCD_write_data 05D2  
          __end_of_vfpfcnvrt 03D6          __end_of_DHT11_Start 0BBA                      postdec2 0FDD  
                    postinc0 0FEE                      postinc1 0FE6                      postinc2 0FDE  
           vfpfcnvrt@convarg 0011                   ??_vfprintf 0019                    _PORTAbits 0F80  
          ??_LCD_pulse_clock 0001                    _TRISAbits 0F92                    _TRISDbits 0F95  
                 ?_LCD_clear 0001           DHT11_ReadData@data 0002              ?_LCD_write_char 0001  
            ?_LCD_write_data 0001                  vfpfcnvrt@ap 000D                  vfpfcnvrt@cp 0010  
                vfpfcnvrt@fp 000B                __pidataCOMRAM 0BF0          start_initialization 0B40  
                __end_of_abs 0B40                  _DHT11_Start 0B9A  __end_of_DHT11_CheckResponse 0B9A  
                vfprintf@fmt 0017      LCD_write_char@character 0004                  __pbssCOMRAM 003A  
                ??_LCD_clear 0004             _LCD_write_string 096C             ??_LCD_cursor_set 0005  
                   ?___awdiv 0001                     ?___awmod 0001               _DHT11_ReadData 0A42  
                __smallconst 0200                     ?_sprintf 001A           LCD_write_data@data 0003  
                   _LATDbits 0F8C                     _LCD_init 08E8              _LCD_pulse_clock 0BD8  
     __end_of_DHT11_ReadData 0A9A                    _vfpfcnvrt 021E                    main@value 002C  
                 vfpfcnvrt@c 0015             ??_LCD_write_char 0004             ??_LCD_write_data 0001  
                   __Hrparam 0000                    modff@F522 005A                   vfprintf@ap 0018  
                   __Lrparam 0000                   vfprintf@fp 0016            LCD_cursor_set@row 0005  
            ?_DHT11_ReadData 0001                   ?_vfpfcnvrt 000B              DHT11_ReadData@i 0001  
                 sprintf@fmt 001B                     __ptext10 0BE6                     __ptext11 04D6  
                   __ptext12 08E8                     __ptext13 0BBA                     __ptext14 09E2  
                   __ptext15 05D2                     __ptext16 0BD8                     __ptext17 0B9A  
                   __ptext18 0A42                     __ptext19 0B6E      __end_of_LCD_pulse_clock 0BE6  
               ?_DHT11_Start 0001                     isa$xinst 0000                     _vfprintf 0A9A  
   __end_of_LCD_write_string 09E2            LCD_write_string@i 0008                    sprintf@ap 001E  
            main@RH_Integral 0037                  ??_vfpfcnvrt 000E               main@RH_Decimal 0036  
                   sprintf@f 001F                     sprintf@s 001A             ?_LCD_pulse_clock 0001  
