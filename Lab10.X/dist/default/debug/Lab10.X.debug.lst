

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Nov 14 19:51:58 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=3
    16                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=3
    17                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Generated 17/10/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4321 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000FE0                     bsr             equ	4064
    70   000FE9                     fsr0            equ	4073
    71   000FEA                     fsr0h           equ	4074
    72   000FE9                     fsr0l           equ	4073
    73   000FE1                     fsr1            equ	4065
    74   000FE2                     fsr1h           equ	4066
    75   000FE1                     fsr1l           equ	4065
    76   000FD9                     fsr2            equ	4057
    77   000FDA                     fsr2h           equ	4058
    78   000FD9                     fsr2l           equ	4057
    79   000FEF                     indf0           equ	4079
    80   000FE7                     indf1           equ	4071
    81   000FDF                     indf2           equ	4063
    82   000FF2                     intcon          equ	4082
    83   000000                     nvmcon          equ	0
    84   000FF9                     pcl             equ	4089
    85   000FFA                     pclath          equ	4090
    86   000FFB                     pclatu          equ	4091
    87   000FEB                     plusw0          equ	4075
    88   000FE3                     plusw1          equ	4067
    89   000FDB                     plusw2          equ	4059
    90   000FED                     postdec0        equ	4077
    91   000FE5                     postdec1        equ	4069
    92   000FDD                     postdec2        equ	4061
    93   000FEE                     postinc0        equ	4078
    94   000FE6                     postinc1        equ	4070
    95   000FDE                     postinc2        equ	4062
    96   000FEC                     preinc0         equ	4076
    97   000FE4                     preinc1         equ	4068
    98   000FDC                     preinc2         equ	4060
    99   000FF3                     prod            equ	4083
   100   000FF4                     prodh           equ	4084
   101   000FF3                     prodl           equ	4083
   102   000FD8                     status          equ	4056
   103   000FF5                     tablat          equ	4085
   104   000FF6                     tblptr          equ	4086
   105   000FF7                     tblptrh         equ	4087
   106   000FF6                     tblptrl         equ	4086
   107   000FF8                     tblptru         equ	4088
   108   000FFD                     tosl            equ	4093
   109   000FE8                     wreg            equ	4072
   110   000F80                     PORTA           equ	3968	;# 
   111   000F81                     PORTB           equ	3969	;# 
   112   000F82                     PORTC           equ	3970	;# 
   113   000F83                     PORTD           equ	3971	;# 
   114   000F84                     PORTE           equ	3972	;# 
   115   000F89                     LATA            equ	3977	;# 
   116   000F8A                     LATB            equ	3978	;# 
   117   000F8B                     LATC            equ	3979	;# 
   118   000F8C                     LATD            equ	3980	;# 
   119   000F8D                     LATE            equ	3981	;# 
   120   000F92                     TRISA           equ	3986	;# 
   121   000F92                     DDRA            equ	3986	;# 
   122   000F93                     TRISB           equ	3987	;# 
   123   000F93                     DDRB            equ	3987	;# 
   124   000F94                     TRISC           equ	3988	;# 
   125   000F94                     DDRC            equ	3988	;# 
   126   000F95                     TRISD           equ	3989	;# 
   127   000F95                     DDRD            equ	3989	;# 
   128   000F96                     TRISE           equ	3990	;# 
   129   000F96                     DDRE            equ	3990	;# 
   130   000F9B                     OSCTUNE         equ	3995	;# 
   131   000F9D                     PIE1            equ	3997	;# 
   132   000F9E                     PIR1            equ	3998	;# 
   133   000F9F                     IPR1            equ	3999	;# 
   134   000FA0                     PIE2            equ	4000	;# 
   135   000FA1                     PIR2            equ	4001	;# 
   136   000FA2                     IPR2            equ	4002	;# 
   137   000FA6                     EECON1          equ	4006	;# 
   138   000FA7                     EECON2          equ	4007	;# 
   139   000FA8                     EEDATA          equ	4008	;# 
   140   000FA9                     EEADR           equ	4009	;# 
   141   000FAB                     RCSTA           equ	4011	;# 
   142   000FAB                     RCSTA1          equ	4011	;# 
   143   000FAC                     TXSTA           equ	4012	;# 
   144   000FAC                     TXSTA1          equ	4012	;# 
   145   000FAD                     TXREG           equ	4013	;# 
   146   000FAD                     TXREG1          equ	4013	;# 
   147   000FAE                     RCREG           equ	4014	;# 
   148   000FAE                     RCREG1          equ	4014	;# 
   149   000FAF                     SPBRG           equ	4015	;# 
   150   000FAF                     SPBRG1          equ	4015	;# 
   151   000FB0                     SPBRGH          equ	4016	;# 
   152   000FB1                     T3CON           equ	4017	;# 
   153   000FB2                     TMR3            equ	4018	;# 
   154   000FB2                     TMR3L           equ	4018	;# 
   155   000FB3                     TMR3H           equ	4019	;# 
   156   000FB4                     CMCON           equ	4020	;# 
   157   000FB5                     CVRCON          equ	4021	;# 
   158   000FB6                     ECCP1AS         equ	4022	;# 
   159   000FB7                     ECCP1DEL        equ	4023	;# 
   160   000FB7                     PWM1CON         equ	4023	;# 
   161   000FB8                     BAUDCON         equ	4024	;# 
   162   000FB8                     BAUDCTL         equ	4024	;# 
   163   000FBA                     CCP2CON         equ	4026	;# 
   164   000FBB                     CCPR2           equ	4027	;# 
   165   000FBB                     CCPR2L          equ	4027	;# 
   166   000FBC                     CCPR2H          equ	4028	;# 
   167   000FBD                     CCP1CON         equ	4029	;# 
   168   000FBD                     ECCP1CON        equ	4029	;# 
   169   000FBE                     CCPR1           equ	4030	;# 
   170   000FBE                     CCPR1L          equ	4030	;# 
   171   000FBF                     CCPR1H          equ	4031	;# 
   172   000FC0                     ADCON2          equ	4032	;# 
   173   000FC1                     ADCON1          equ	4033	;# 
   174   000FC2                     ADCON0          equ	4034	;# 
   175   000FC3                     ADRES           equ	4035	;# 
   176   000FC3                     ADRESL          equ	4035	;# 
   177   000FC4                     ADRESH          equ	4036	;# 
   178   000FC5                     SSPCON2         equ	4037	;# 
   179   000FC6                     SSPCON1         equ	4038	;# 
   180   000FC7                     SSPSTAT         equ	4039	;# 
   181   000FC8                     SSPADD          equ	4040	;# 
   182   000FC9                     SSPBUF          equ	4041	;# 
   183   000FCA                     T2CON           equ	4042	;# 
   184   000FCB                     PR2             equ	4043	;# 
   185   000FCB                     MEMCON          equ	4043	;# 
   186   000FCC                     TMR2            equ	4044	;# 
   187   000FCD                     T1CON           equ	4045	;# 
   188   000FCE                     TMR1            equ	4046	;# 
   189   000FCE                     TMR1L           equ	4046	;# 
   190   000FCF                     TMR1H           equ	4047	;# 
   191   000FD0                     RCON            equ	4048	;# 
   192   000FD1                     WDTCON          equ	4049	;# 
   193   000FD2                     HLVDCON         equ	4050	;# 
   194   000FD2                     LVDCON          equ	4050	;# 
   195   000FD3                     OSCCON          equ	4051	;# 
   196   000FD5                     T0CON           equ	4053	;# 
   197   000FD6                     TMR0            equ	4054	;# 
   198   000FD6                     TMR0L           equ	4054	;# 
   199   000FD7                     TMR0H           equ	4055	;# 
   200   000FD8                     STATUS          equ	4056	;# 
   201   000FD9                     FSR2            equ	4057	;# 
   202   000FD9                     FSR2L           equ	4057	;# 
   203   000FDA                     FSR2H           equ	4058	;# 
   204   000FDB                     PLUSW2          equ	4059	;# 
   205   000FDC                     PREINC2         equ	4060	;# 
   206   000FDD                     POSTDEC2        equ	4061	;# 
   207   000FDE                     POSTINC2        equ	4062	;# 
   208   000FDF                     INDF2           equ	4063	;# 
   209   000FE0                     BSR             equ	4064	;# 
   210   000FE1                     FSR1            equ	4065	;# 
   211   000FE1                     FSR1L           equ	4065	;# 
   212   000FE2                     FSR1H           equ	4066	;# 
   213   000FE3                     PLUSW1          equ	4067	;# 
   214   000FE4                     PREINC1         equ	4068	;# 
   215   000FE5                     POSTDEC1        equ	4069	;# 
   216   000FE6                     POSTINC1        equ	4070	;# 
   217   000FE7                     INDF1           equ	4071	;# 
   218   000FE8                     WREG            equ	4072	;# 
   219   000FE9                     FSR0            equ	4073	;# 
   220   000FE9                     FSR0L           equ	4073	;# 
   221   000FEA                     FSR0H           equ	4074	;# 
   222   000FEB                     PLUSW0          equ	4075	;# 
   223   000FEC                     PREINC0         equ	4076	;# 
   224   000FED                     POSTDEC0        equ	4077	;# 
   225   000FEE                     POSTINC0        equ	4078	;# 
   226   000FEF                     INDF0           equ	4079	;# 
   227   000FF0                     INTCON3         equ	4080	;# 
   228   000FF1                     INTCON2         equ	4081	;# 
   229   000FF2                     INTCON          equ	4082	;# 
   230   000FF3                     PROD            equ	4083	;# 
   231   000FF3                     PRODL           equ	4083	;# 
   232   000FF4                     PRODH           equ	4084	;# 
   233   000FF5                     TABLAT          equ	4085	;# 
   234   000FF6                     TBLPTR          equ	4086	;# 
   235   000FF6                     TBLPTRL         equ	4086	;# 
   236   000FF7                     TBLPTRH         equ	4087	;# 
   237   000FF8                     TBLPTRU         equ	4088	;# 
   238   000FF9                     PCLAT           equ	4089	;# 
   239   000FF9                     PC              equ	4089	;# 
   240   000FF9                     PCL             equ	4089	;# 
   241   000FFA                     PCLATH          equ	4090	;# 
   242   000FFB                     PCLATU          equ	4091	;# 
   243   000FFC                     STKPTR          equ	4092	;# 
   244   000FFD                     TOS             equ	4093	;# 
   245   000FFD                     TOSL            equ	4093	;# 
   246   000FFE                     TOSH            equ	4094	;# 
   247   000FFF                     TOSU            equ	4095	;# 
   248   000F80                     PORTA           equ	3968	;# 
   249   000F81                     PORTB           equ	3969	;# 
   250   000F82                     PORTC           equ	3970	;# 
   251   000F83                     PORTD           equ	3971	;# 
   252   000F84                     PORTE           equ	3972	;# 
   253   000F89                     LATA            equ	3977	;# 
   254   000F8A                     LATB            equ	3978	;# 
   255   000F8B                     LATC            equ	3979	;# 
   256   000F8C                     LATD            equ	3980	;# 
   257   000F8D                     LATE            equ	3981	;# 
   258   000F92                     TRISA           equ	3986	;# 
   259   000F92                     DDRA            equ	3986	;# 
   260   000F93                     TRISB           equ	3987	;# 
   261   000F93                     DDRB            equ	3987	;# 
   262   000F94                     TRISC           equ	3988	;# 
   263   000F94                     DDRC            equ	3988	;# 
   264   000F95                     TRISD           equ	3989	;# 
   265   000F95                     DDRD            equ	3989	;# 
   266   000F96                     TRISE           equ	3990	;# 
   267   000F96                     DDRE            equ	3990	;# 
   268   000F9B                     OSCTUNE         equ	3995	;# 
   269   000F9D                     PIE1            equ	3997	;# 
   270   000F9E                     PIR1            equ	3998	;# 
   271   000F9F                     IPR1            equ	3999	;# 
   272   000FA0                     PIE2            equ	4000	;# 
   273   000FA1                     PIR2            equ	4001	;# 
   274   000FA2                     IPR2            equ	4002	;# 
   275   000FA6                     EECON1          equ	4006	;# 
   276   000FA7                     EECON2          equ	4007	;# 
   277   000FA8                     EEDATA          equ	4008	;# 
   278   000FA9                     EEADR           equ	4009	;# 
   279   000FAB                     RCSTA           equ	4011	;# 
   280   000FAB                     RCSTA1          equ	4011	;# 
   281   000FAC                     TXSTA           equ	4012	;# 
   282   000FAC                     TXSTA1          equ	4012	;# 
   283   000FAD                     TXREG           equ	4013	;# 
   284   000FAD                     TXREG1          equ	4013	;# 
   285   000FAE                     RCREG           equ	4014	;# 
   286   000FAE                     RCREG1          equ	4014	;# 
   287   000FAF                     SPBRG           equ	4015	;# 
   288   000FAF                     SPBRG1          equ	4015	;# 
   289   000FB0                     SPBRGH          equ	4016	;# 
   290   000FB1                     T3CON           equ	4017	;# 
   291   000FB2                     TMR3            equ	4018	;# 
   292   000FB2                     TMR3L           equ	4018	;# 
   293   000FB3                     TMR3H           equ	4019	;# 
   294   000FB4                     CMCON           equ	4020	;# 
   295   000FB5                     CVRCON          equ	4021	;# 
   296   000FB6                     ECCP1AS         equ	4022	;# 
   297   000FB7                     ECCP1DEL        equ	4023	;# 
   298   000FB7                     PWM1CON         equ	4023	;# 
   299   000FB8                     BAUDCON         equ	4024	;# 
   300   000FB8                     BAUDCTL         equ	4024	;# 
   301   000FBA                     CCP2CON         equ	4026	;# 
   302   000FBB                     CCPR2           equ	4027	;# 
   303   000FBB                     CCPR2L          equ	4027	;# 
   304   000FBC                     CCPR2H          equ	4028	;# 
   305   000FBD                     CCP1CON         equ	4029	;# 
   306   000FBD                     ECCP1CON        equ	4029	;# 
   307   000FBE                     CCPR1           equ	4030	;# 
   308   000FBE                     CCPR1L          equ	4030	;# 
   309   000FBF                     CCPR1H          equ	4031	;# 
   310   000FC0                     ADCON2          equ	4032	;# 
   311   000FC1                     ADCON1          equ	4033	;# 
   312   000FC2                     ADCON0          equ	4034	;# 
   313   000FC3                     ADRES           equ	4035	;# 
   314   000FC3                     ADRESL          equ	4035	;# 
   315   000FC4                     ADRESH          equ	4036	;# 
   316   000FC5                     SSPCON2         equ	4037	;# 
   317   000FC6                     SSPCON1         equ	4038	;# 
   318   000FC7                     SSPSTAT         equ	4039	;# 
   319   000FC8                     SSPADD          equ	4040	;# 
   320   000FC9                     SSPBUF          equ	4041	;# 
   321   000FCA                     T2CON           equ	4042	;# 
   322   000FCB                     PR2             equ	4043	;# 
   323   000FCB                     MEMCON          equ	4043	;# 
   324   000FCC                     TMR2            equ	4044	;# 
   325   000FCD                     T1CON           equ	4045	;# 
   326   000FCE                     TMR1            equ	4046	;# 
   327   000FCE                     TMR1L           equ	4046	;# 
   328   000FCF                     TMR1H           equ	4047	;# 
   329   000FD0                     RCON            equ	4048	;# 
   330   000FD1                     WDTCON          equ	4049	;# 
   331   000FD2                     HLVDCON         equ	4050	;# 
   332   000FD2                     LVDCON          equ	4050	;# 
   333   000FD3                     OSCCON          equ	4051	;# 
   334   000FD5                     T0CON           equ	4053	;# 
   335   000FD6                     TMR0            equ	4054	;# 
   336   000FD6                     TMR0L           equ	4054	;# 
   337   000FD7                     TMR0H           equ	4055	;# 
   338   000FD8                     STATUS          equ	4056	;# 
   339   000FD9                     FSR2            equ	4057	;# 
   340   000FD9                     FSR2L           equ	4057	;# 
   341   000FDA                     FSR2H           equ	4058	;# 
   342   000FDB                     PLUSW2          equ	4059	;# 
   343   000FDC                     PREINC2         equ	4060	;# 
   344   000FDD                     POSTDEC2        equ	4061	;# 
   345   000FDE                     POSTINC2        equ	4062	;# 
   346   000FDF                     INDF2           equ	4063	;# 
   347   000FE0                     BSR             equ	4064	;# 
   348   000FE1                     FSR1            equ	4065	;# 
   349   000FE1                     FSR1L           equ	4065	;# 
   350   000FE2                     FSR1H           equ	4066	;# 
   351   000FE3                     PLUSW1          equ	4067	;# 
   352   000FE4                     PREINC1         equ	4068	;# 
   353   000FE5                     POSTDEC1        equ	4069	;# 
   354   000FE6                     POSTINC1        equ	4070	;# 
   355   000FE7                     INDF1           equ	4071	;# 
   356   000FE8                     WREG            equ	4072	;# 
   357   000FE9                     FSR0            equ	4073	;# 
   358   000FE9                     FSR0L           equ	4073	;# 
   359   000FEA                     FSR0H           equ	4074	;# 
   360   000FEB                     PLUSW0          equ	4075	;# 
   361   000FEC                     PREINC0         equ	4076	;# 
   362   000FED                     POSTDEC0        equ	4077	;# 
   363   000FEE                     POSTINC0        equ	4078	;# 
   364   000FEF                     INDF0           equ	4079	;# 
   365   000FF0                     INTCON3         equ	4080	;# 
   366   000FF1                     INTCON2         equ	4081	;# 
   367   000FF2                     INTCON          equ	4082	;# 
   368   000FF3                     PROD            equ	4083	;# 
   369   000FF3                     PRODL           equ	4083	;# 
   370   000FF4                     PRODH           equ	4084	;# 
   371   000FF5                     TABLAT          equ	4085	;# 
   372   000FF6                     TBLPTR          equ	4086	;# 
   373   000FF6                     TBLPTRL         equ	4086	;# 
   374   000FF7                     TBLPTRH         equ	4087	;# 
   375   000FF8                     TBLPTRU         equ	4088	;# 
   376   000FF9                     PCLAT           equ	4089	;# 
   377   000FF9                     PC              equ	4089	;# 
   378   000FF9                     PCL             equ	4089	;# 
   379   000FFA                     PCLATH          equ	4090	;# 
   380   000FFB                     PCLATU          equ	4091	;# 
   381   000FFC                     STKPTR          equ	4092	;# 
   382   000FFD                     TOS             equ	4093	;# 
   383   000FFD                     TOSL            equ	4093	;# 
   384   000FFE                     TOSH            equ	4094	;# 
   385   000FFF                     TOSU            equ	4095	;# 
   386   000F80                     PORTA           equ	3968	;# 
   387   000F81                     PORTB           equ	3969	;# 
   388   000F82                     PORTC           equ	3970	;# 
   389   000F83                     PORTD           equ	3971	;# 
   390   000F84                     PORTE           equ	3972	;# 
   391   000F89                     LATA            equ	3977	;# 
   392   000F8A                     LATB            equ	3978	;# 
   393   000F8B                     LATC            equ	3979	;# 
   394   000F8C                     LATD            equ	3980	;# 
   395   000F8D                     LATE            equ	3981	;# 
   396   000F92                     TRISA           equ	3986	;# 
   397   000F92                     DDRA            equ	3986	;# 
   398   000F93                     TRISB           equ	3987	;# 
   399   000F93                     DDRB            equ	3987	;# 
   400   000F94                     TRISC           equ	3988	;# 
   401   000F94                     DDRC            equ	3988	;# 
   402   000F95                     TRISD           equ	3989	;# 
   403   000F95                     DDRD            equ	3989	;# 
   404   000F96                     TRISE           equ	3990	;# 
   405   000F96                     DDRE            equ	3990	;# 
   406   000F9B                     OSCTUNE         equ	3995	;# 
   407   000F9D                     PIE1            equ	3997	;# 
   408   000F9E                     PIR1            equ	3998	;# 
   409   000F9F                     IPR1            equ	3999	;# 
   410   000FA0                     PIE2            equ	4000	;# 
   411   000FA1                     PIR2            equ	4001	;# 
   412   000FA2                     IPR2            equ	4002	;# 
   413   000FA6                     EECON1          equ	4006	;# 
   414   000FA7                     EECON2          equ	4007	;# 
   415   000FA8                     EEDATA          equ	4008	;# 
   416   000FA9                     EEADR           equ	4009	;# 
   417   000FAB                     RCSTA           equ	4011	;# 
   418   000FAB                     RCSTA1          equ	4011	;# 
   419   000FAC                     TXSTA           equ	4012	;# 
   420   000FAC                     TXSTA1          equ	4012	;# 
   421   000FAD                     TXREG           equ	4013	;# 
   422   000FAD                     TXREG1          equ	4013	;# 
   423   000FAE                     RCREG           equ	4014	;# 
   424   000FAE                     RCREG1          equ	4014	;# 
   425   000FAF                     SPBRG           equ	4015	;# 
   426   000FAF                     SPBRG1          equ	4015	;# 
   427   000FB0                     SPBRGH          equ	4016	;# 
   428   000FB1                     T3CON           equ	4017	;# 
   429   000FB2                     TMR3            equ	4018	;# 
   430   000FB2                     TMR3L           equ	4018	;# 
   431   000FB3                     TMR3H           equ	4019	;# 
   432   000FB4                     CMCON           equ	4020	;# 
   433   000FB5                     CVRCON          equ	4021	;# 
   434   000FB6                     ECCP1AS         equ	4022	;# 
   435   000FB7                     ECCP1DEL        equ	4023	;# 
   436   000FB7                     PWM1CON         equ	4023	;# 
   437   000FB8                     BAUDCON         equ	4024	;# 
   438   000FB8                     BAUDCTL         equ	4024	;# 
   439   000FBA                     CCP2CON         equ	4026	;# 
   440   000FBB                     CCPR2           equ	4027	;# 
   441   000FBB                     CCPR2L          equ	4027	;# 
   442   000FBC                     CCPR2H          equ	4028	;# 
   443   000FBD                     CCP1CON         equ	4029	;# 
   444   000FBD                     ECCP1CON        equ	4029	;# 
   445   000FBE                     CCPR1           equ	4030	;# 
   446   000FBE                     CCPR1L          equ	4030	;# 
   447   000FBF                     CCPR1H          equ	4031	;# 
   448   000FC0                     ADCON2          equ	4032	;# 
   449   000FC1                     ADCON1          equ	4033	;# 
   450   000FC2                     ADCON0          equ	4034	;# 
   451   000FC3                     ADRES           equ	4035	;# 
   452   000FC3                     ADRESL          equ	4035	;# 
   453   000FC4                     ADRESH          equ	4036	;# 
   454   000FC5                     SSPCON2         equ	4037	;# 
   455   000FC6                     SSPCON1         equ	4038	;# 
   456   000FC7                     SSPSTAT         equ	4039	;# 
   457   000FC8                     SSPADD          equ	4040	;# 
   458   000FC9                     SSPBUF          equ	4041	;# 
   459   000FCA                     T2CON           equ	4042	;# 
   460   000FCB                     PR2             equ	4043	;# 
   461   000FCB                     MEMCON          equ	4043	;# 
   462   000FCC                     TMR2            equ	4044	;# 
   463   000FCD                     T1CON           equ	4045	;# 
   464   000FCE                     TMR1            equ	4046	;# 
   465   000FCE                     TMR1L           equ	4046	;# 
   466   000FCF                     TMR1H           equ	4047	;# 
   467   000FD0                     RCON            equ	4048	;# 
   468   000FD1                     WDTCON          equ	4049	;# 
   469   000FD2                     HLVDCON         equ	4050	;# 
   470   000FD2                     LVDCON          equ	4050	;# 
   471   000FD3                     OSCCON          equ	4051	;# 
   472   000FD5                     T0CON           equ	4053	;# 
   473   000FD6                     TMR0            equ	4054	;# 
   474   000FD6                     TMR0L           equ	4054	;# 
   475   000FD7                     TMR0H           equ	4055	;# 
   476   000FD8                     STATUS          equ	4056	;# 
   477   000FD9                     FSR2            equ	4057	;# 
   478   000FD9                     FSR2L           equ	4057	;# 
   479   000FDA                     FSR2H           equ	4058	;# 
   480   000FDB                     PLUSW2          equ	4059	;# 
   481   000FDC                     PREINC2         equ	4060	;# 
   482   000FDD                     POSTDEC2        equ	4061	;# 
   483   000FDE                     POSTINC2        equ	4062	;# 
   484   000FDF                     INDF2           equ	4063	;# 
   485   000FE0                     BSR             equ	4064	;# 
   486   000FE1                     FSR1            equ	4065	;# 
   487   000FE1                     FSR1L           equ	4065	;# 
   488   000FE2                     FSR1H           equ	4066	;# 
   489   000FE3                     PLUSW1          equ	4067	;# 
   490   000FE4                     PREINC1         equ	4068	;# 
   491   000FE5                     POSTDEC1        equ	4069	;# 
   492   000FE6                     POSTINC1        equ	4070	;# 
   493   000FE7                     INDF1           equ	4071	;# 
   494   000FE8                     WREG            equ	4072	;# 
   495   000FE9                     FSR0            equ	4073	;# 
   496   000FE9                     FSR0L           equ	4073	;# 
   497   000FEA                     FSR0H           equ	4074	;# 
   498   000FEB                     PLUSW0          equ	4075	;# 
   499   000FEC                     PREINC0         equ	4076	;# 
   500   000FED                     POSTDEC0        equ	4077	;# 
   501   000FEE                     POSTINC0        equ	4078	;# 
   502   000FEF                     INDF0           equ	4079	;# 
   503   000FF0                     INTCON3         equ	4080	;# 
   504   000FF1                     INTCON2         equ	4081	;# 
   505   000FF2                     INTCON          equ	4082	;# 
   506   000FF3                     PROD            equ	4083	;# 
   507   000FF3                     PRODL           equ	4083	;# 
   508   000FF4                     PRODH           equ	4084	;# 
   509   000FF5                     TABLAT          equ	4085	;# 
   510   000FF6                     TBLPTR          equ	4086	;# 
   511   000FF6                     TBLPTRL         equ	4086	;# 
   512   000FF7                     TBLPTRH         equ	4087	;# 
   513   000FF8                     TBLPTRU         equ	4088	;# 
   514   000FF9                     PCLAT           equ	4089	;# 
   515   000FF9                     PC              equ	4089	;# 
   516   000FF9                     PCL             equ	4089	;# 
   517   000FFA                     PCLATH          equ	4090	;# 
   518   000FFB                     PCLATU          equ	4091	;# 
   519   000FFC                     STKPTR          equ	4092	;# 
   520   000FFD                     TOS             equ	4093	;# 
   521   000FFD                     TOSL            equ	4093	;# 
   522   000FFE                     TOSH            equ	4094	;# 
   523   000FFF                     TOSU            equ	4095	;# 
   524                           
   525                           	psect	idataCOMRAM
   526   000C6E                     __pidataCOMRAM:
   527                           	callstack 0
   528                           
   529                           ;initializer for _LCD_entry_mode
   530   000C6E  06                 	db	6
   531                           
   532                           ;initializer for _LCD_display_control
   533   000C6F  0C                 	db	12
   534   007C48                     _LATA0          set	31816
   535   000F80                     _PORTAbits      set	3968
   536   000F92                     _TRISAbits      set	3986
   537   000FC1                     _ADCON1         set	4033
   538   000FD3                     _OSCCON         set	4051
   539   000F95                     _TRISDbits      set	3989
   540   000F8C                     _LATDbits       set	3980
   541                           
   542                           	psect	smallconst
   543   000200                     __psmallconst:
   544                           	callstack 0
   545   000200  00                 	db	0
   546   000201                     STR_7:
   547   000201  4E                 	db	78	;'N'
   548   000202  6F                 	db	111	;'o'
   549   000203  20                 	db	32
   550   000204  45                 	db	69	;'E'
   551   000205  72                 	db	114	;'r'
   552   000206  72                 	db	114	;'r'
   553   000207  6F                 	db	111	;'o'
   554   000208  72                 	db	114	;'r'
   555   000209  00                 	db	0
   556   00020A                     STR_5:
   557   00020A  25                 	db	37
   558   00020B  64                 	db	100	;'d'
   559   00020C  20                 	db	32
   560   00020D  20                 	db	32
   561   00020E  00                 	db	0
   562   00020F                     STR_2:
   563   00020F  2E                 	db	46
   564   000210  25                 	db	37
   565   000211  64                 	db	100	;'d'
   566   000212  20                 	db	32
   567   000213  00                 	db	0
   568   000214                     STR_4:
   569   000214  2E                 	db	46
   570   000215  25                 	db	37
   571   000216  64                 	db	100	;'d'
   572   000217  00                 	db	0
   573   000204                     STR_6           equ	STR_7+3
   574   000215                     STR_1           equ	STR_4+1
   575   000215                     STR_3           equ	STR_4+1
   576   000218  00                 	db	0	; dummy byte at the end
   577   000002                     __activetblptr  equ	2
   578                           
   579                           ; #config settings
   580                           
   581                           	psect	cinit
   582   000BBE                     __pcinit:
   583                           	callstack 0
   584   000BBE                     start_initialization:
   585                           	callstack 0
   586   000BBE                     __initialization:
   587                           	callstack 0
   588                           
   589                           ; Initialize objects allocated to COMRAM (2 bytes)
   590                           ; load TBLPTR registers with __pidataCOMRAM
   591   000BBE  0E6E               	movlw	low __pidataCOMRAM
   592   000BC0  6EF6               	movwf	tblptrl,c
   593   000BC2  0E0C               	movlw	high __pidataCOMRAM
   594   000BC4  6EF7               	movwf	tblptrh,c
   595   000BC6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   596   000BC8  6EF8               	movwf	tblptru,c
   597   000BCA  0009               	tblrd		*+	;fetch initializer
   598   000BCC  CFF5 F066          	movff	tablat,__pdataCOMRAM
   599   000BD0  0009               	tblrd		*+	;fetch initializer
   600   000BD2  CFF5 F067          	movff	tablat,__pdataCOMRAM+1
   601                           
   602                           ; Clear objects allocated to COMRAM (41 bytes)
   603   000BD6  EE00  F03D         	lfsr	0,__pbssCOMRAM
   604   000BDA  0E29               	movlw	41
   605   000BDC                     clear_0:
   606   000BDC  6AEE               	clrf	postinc0,c
   607   000BDE  06E8               	decf	wreg,f,c
   608   000BE0  E1FD               	bnz	clear_0
   609   000BE2                     end_of_initialization:
   610                           	callstack 0
   611   000BE2                     __end_of__initialization:
   612                           	callstack 0
   613   000BE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   614   000BE4  6EF8               	movwf	tblptru,c
   615   000BE6  0100               	movlb	0
   616   000BE8  EFE9  F001         	goto	_main	;jump to C main() function
   617                           
   618                           	psect	bssCOMRAM
   619   00003D                     __pbssCOMRAM:
   620                           	callstack 0
   621   00003D                     _dbuf:
   622                           	callstack 0
   623   00003D                     	ds	32
   624   00005D                     	ds	4
   625   000061                     _width:
   626                           	callstack 0
   627   000061                     	ds	2
   628   000063                     _prec:
   629                           	callstack 0
   630   000063                     	ds	2
   631   000065                     _flags:
   632                           	callstack 0
   633   000065                     	ds	1
   634                           
   635                           	psect	dataCOMRAM
   636   000066                     __pdataCOMRAM:
   637                           	callstack 0
   638   000066                     _LCD_entry_mode:
   639                           	callstack 0
   640   000066                     	ds	1
   641   000067                     _LCD_display_control:
   642                           	callstack 0
   643   000067                     	ds	1
   644                           
   645                           	psect	cstackCOMRAM
   646   000001                     __pcstackCOMRAM:
   647                           	callstack 0
   648   000001                     ?___awdiv:
   649                           	callstack 0
   650   000001                     ?___awmod:
   651                           	callstack 0
   652   000001                     DHT11_ReadData@i:
   653                           	callstack 0
   654   000001                     ___awdiv@dividend:
   655                           	callstack 0
   656   000001                     ___awmod@dividend:
   657                           	callstack 0
   658   000001                     fputc@c:
   659                           	callstack 0
   660   000001                     ??_DHT11_Start:
   661   000001                     ??_LCD_write_command:
   662   000001                     ??_LCD_write_data:
   663                           
   664                           ; 1 bytes @ 0x0
   665   000001                     	ds	1
   666   000002                     DHT11_ReadData@data:
   667                           	callstack 0
   668                           
   669                           ; 1 bytes @ 0x1
   670   000002                     	ds	1
   671   000003                     LCD_write_command@command:
   672                           	callstack 0
   673   000003                     LCD_write_data@data:
   674                           	callstack 0
   675   000003                     fputc@fp:
   676                           	callstack 0
   677   000003                     ___awdiv@divisor:
   678                           	callstack 0
   679   000003                     ___awmod@divisor:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x2
   683   000003                     	ds	1
   684   000004                     LCD_cursor_set@column:
   685                           	callstack 0
   686   000004                     LCD_write_char@character:
   687                           	callstack 0
   688   000004                     LCD_write_string@string:
   689                           	callstack 0
   690   000004                     ??_LCD_clear:
   691   000004                     ??_fputc:
   692   000004                     
   693                           ; 1 bytes @ 0x3
   694   000004                     	ds	1
   695   000005                     LCD_cursor_set@row:
   696                           	callstack 0
   697   000005                     ___awdiv@counter:
   698                           	callstack 0
   699   000005                     ___awmod@counter:
   700                           	callstack 0
   701   000005                     ??_LCD_init:
   702   000005                     
   703                           ; 1 bytes @ 0x4
   704   000005                     	ds	1
   705   000006                     ___awdiv@sign:
   706                           	callstack 0
   707   000006                     ___awmod@sign:
   708                           	callstack 0
   709   000006                     ??_LCD_write_string:
   710                           
   711                           ; 1 bytes @ 0x5
   712   000006                     	ds	1
   713   000007                     ?_abs:
   714                           	callstack 0
   715   000007                     ___awdiv@quotient:
   716                           	callstack 0
   717   000007                     abs@a:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x6
   721   000007                     	ds	1
   722   000008                     LCD_write_string@i:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x7
   726   000008                     	ds	1
   727   000009                     ??_abs:
   728                           
   729                           ; 1 bytes @ 0x8
   730   000009                     	ds	2
   731   00000B                     vfpfcnvrt@fp:
   732                           	callstack 0
   733                           
   734                           ; 1 bytes @ 0xA
   735   00000B                     	ds	1
   736   00000C                     vfpfcnvrt@fmt:
   737                           	callstack 0
   738                           
   739                           ; 1 bytes @ 0xB
   740   00000C                     	ds	1
   741   00000D                     vfpfcnvrt@ap:
   742                           	callstack 0
   743                           
   744                           ; 1 bytes @ 0xC
   745   00000D                     	ds	1
   746   00000E                     ??_vfpfcnvrt:
   747                           
   748                           ; 1 bytes @ 0xD
   749   00000E                     	ds	1
   750   00000F                     vfpfcnvrt@done:
   751                           	callstack 0
   752                           
   753                           ; 1 bytes @ 0xE
   754   00000F                     	ds	1
   755   000010                     vfpfcnvrt@cp:
   756                           	callstack 0
   757                           
   758                           ; 1 bytes @ 0xF
   759   000010                     	ds	1
   760   000011                     vfpfcnvrt@convarg:
   761                           	callstack 0
   762                           
   763                           ; 4 bytes @ 0x10
   764   000011                     	ds	4
   765   000015                     vfpfcnvrt@c:
   766                           	callstack 0
   767                           
   768                           ; 1 bytes @ 0x14
   769   000015                     	ds	1
   770   000016                     ?_vfprintf:
   771                           	callstack 0
   772   000016                     vfprintf@fp:
   773                           	callstack 0
   774                           
   775                           ; 1 bytes @ 0x15
   776   000016                     	ds	1
   777   000017                     vfprintf@fmt:
   778                           	callstack 0
   779                           
   780                           ; 1 bytes @ 0x16
   781   000017                     	ds	1
   782   000018                     vfprintf@ap:
   783                           	callstack 0
   784                           
   785                           ; 1 bytes @ 0x17
   786   000018                     	ds	1
   787   000019                     vfprintf@cfmt:
   788                           	callstack 0
   789   000019                     
   790                           ; 1 bytes @ 0x18
   791   000019                     	ds	1
   792   00001A                     ?_sprintf:
   793                           	callstack 0
   794   00001A                     sprintf@s:
   795                           	callstack 0
   796                           
   797                           ; 1 bytes @ 0x19
   798   00001A                     	ds	1
   799   00001B                     sprintf@fmt:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0x1A
   803   00001B                     	ds	3
   804   00001E                     sprintf@ap:
   805                           	callstack 0
   806   00001E                     
   807                           ; 1 bytes @ 0x1D
   808   00001E                     	ds	1
   809   00001F                     sprintf@f:
   810                           	callstack 0
   811                           
   812                           ; 11 bytes @ 0x1E
   813   00001F                     	ds	11
   814   00002A                     ??_main:
   815                           
   816                           ; 1 bytes @ 0x29
   817   00002A                     	ds	4
   818   00002E                     main@value:
   819                           	callstack 0
   820                           
   821                           ; 10 bytes @ 0x2D
   822   00002E                     	ds	10
   823   000038                     main@RH_Decimal:
   824                           	callstack 0
   825                           
   826                           ; 1 bytes @ 0x37
   827   000038                     	ds	1
   828   000039                     main@RH_Integral:
   829                           	callstack 0
   830                           
   831                           ; 1 bytes @ 0x38
   832   000039                     	ds	1
   833   00003A                     main@T_Decimal:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x39
   837   00003A                     	ds	1
   838   00003B                     main@T_Integral:
   839                           	callstack 0
   840                           
   841                           ; 1 bytes @ 0x3A
   842   00003B                     	ds	1
   843   00003C                     main@Checksum:
   844                           	callstack 0
   845                           
   846                           ; 1 bytes @ 0x3B
   847   00003C                     	ds	1
   848                           
   849 ;;
   850 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   851 ;;
   852 ;; *************** function _main *****************
   853 ;; Defined at:
   854 ;;		line 6 in file "Lab10.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  value          10   45[COMRAM] unsigned char [10]
   859 ;;  Checksum        1   59[COMRAM] unsigned char 
   860 ;;  T_Integral      1   58[COMRAM] unsigned char 
   861 ;;  T_Decimal       1   57[COMRAM] unsigned char 
   862 ;;  RH_Integral     1   56[COMRAM] unsigned char 
   863 ;;  RH_Decimal      1   55[COMRAM] unsigned char 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1
   873 ;;      Params:         0       0       0
   874 ;;      Locals:        15       0       0
   875 ;;      Temps:          4       0       0
   876 ;;      Totals:        19       0       0
   877 ;;Total ram usage:       19 bytes
   878 ;; Hardware stack levels required when called: 5
   879 ;; This function calls:
   880 ;;		_DHT11_CheckResponse
   881 ;;		_DHT11_ReadData
   882 ;;		_DHT11_Start
   883 ;;		_LCD_cursor_set
   884 ;;		_LCD_init
   885 ;;		_LCD_write_char
   886 ;;		_LCD_write_string
   887 ;;		_sprintf
   888 ;; This function is called by:
   889 ;;		Startup code after reset
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text0
   894   0003D2                     __ptext0:
   895                           	callstack 0
   896   0003D2                     _main:
   897                           	callstack 26
   898   0003D2                     
   899                           ;Lab10.c: 8:     char RH_Decimal, RH_Integral, T_Decimal, T_Integral;;Lab10.c: 9:     ch
      +                          ar Checksum;;Lab10.c: 10:     char value[10];;Lab10.c: 13:     OSCCON = 0x72;
   900   0003D2  0E72               	movlw	114
   901   0003D4  6ED3               	movwf	211,c	;volatile
   902                           
   903                           ;Lab10.c: 14:     ADCON1=0x0F;
   904   0003D6  0E0F               	movlw	15
   905   0003D8  6EC1               	movwf	193,c	;volatile
   906   0003DA                     
   907                           ;Lab10.c: 16:     LCD_init();
   908   0003DA  ECB3  F004         	call	_LCD_init	;wreg free
   909   0003DE                     l1656:
   910                           
   911                           ;Lab10.c: 19:         DHT11_Start();
   912   0003DE  EC0C  F006         	call	_DHT11_Start	;wreg free
   913   0003E2                     
   914                           ;Lab10.c: 20:         DHT11_CheckResponse();
   915   0003E2  ECF6  F005         	call	_DHT11_CheckResponse	;wreg free
   916   0003E6                     
   917                           ;Lab10.c: 23:         RH_Integral = DHT11_ReadData();
   918   0003E6  EC60  F005         	call	_DHT11_ReadData	;wreg free
   919   0003EA  6E39               	movwf	main@RH_Integral^0,c
   920   0003EC                     
   921                           ;Lab10.c: 24:         RH_Decimal = DHT11_ReadData();
   922   0003EC  EC60  F005         	call	_DHT11_ReadData	;wreg free
   923   0003F0  6E38               	movwf	main@RH_Decimal^0,c
   924   0003F2                     
   925                           ;Lab10.c: 25:         T_Integral = DHT11_ReadData();
   926   0003F2  EC60  F005         	call	_DHT11_ReadData	;wreg free
   927   0003F6  6E3B               	movwf	main@T_Integral^0,c
   928   0003F8                     
   929                           ;Lab10.c: 26:         T_Decimal = DHT11_ReadData();
   930   0003F8  EC60  F005         	call	_DHT11_ReadData	;wreg free
   931   0003FC  6E3A               	movwf	main@T_Decimal^0,c
   932   0003FE                     
   933                           ;Lab10.c: 27:         Checksum = DHT11_ReadData();
   934   0003FE  EC60  F005         	call	_DHT11_ReadData	;wreg free
   935   000402  6E3C               	movwf	main@Checksum^0,c
   936   000404                     
   937                           ;Lab10.c: 30:         sprintf(value, "%d", RH_Integral);
   938   000404  0E2E               	movlw	low main@value
   939   000406  6E1A               	movwf	sprintf@s^0,c
   940   000408  0E15               	movlw	low (STR_4+1)
   941   00040A  6E1B               	movwf	sprintf@fmt^0,c
   942   00040C  C039  F01C         	movff	main@RH_Integral,?_sprintf+2
   943   000410  6A1D               	clrf	(?_sprintf+3)^0,c
   944   000412  ECAB  F005         	call	_sprintf	;wreg free
   945   000416                     
   946                           ;Lab10.c: 31:         LCD_cursor_set(1,1);
   947   000416  0E01               	movlw	1
   948   000418  6E04               	movwf	LCD_cursor_set@column^0,c
   949   00041A  0E01               	movlw	1
   950   00041C  EC30  F005         	call	_LCD_cursor_set
   951   000420                     
   952                           ;Lab10.c: 32:         LCD_write_string(value);
   953   000420  0E2E               	movlw	low main@value
   954   000422  6E04               	movwf	LCD_write_string@string^0,c
   955   000424  6A05               	clrf	(LCD_write_string@string+1)^0,c
   956   000426  ECF5  F004         	call	_LCD_write_string	;wreg free
   957   00042A                     
   958                           ;Lab10.c: 33:         sprintf(value, ".%d ", RH_Decimal);
   959   00042A  0E2E               	movlw	low main@value
   960   00042C  6E1A               	movwf	sprintf@s^0,c
   961   00042E  0E0F               	movlw	low STR_2
   962   000430  6E1B               	movwf	sprintf@fmt^0,c
   963   000432  C038  F01C         	movff	main@RH_Decimal,?_sprintf+2
   964   000436  6A1D               	clrf	(?_sprintf+3)^0,c
   965   000438  ECAB  F005         	call	_sprintf	;wreg free
   966   00043C                     
   967                           ;Lab10.c: 34:         LCD_write_string(value);
   968   00043C  0E2E               	movlw	low main@value
   969   00043E  6E04               	movwf	LCD_write_string@string^0,c
   970   000440  6A05               	clrf	(LCD_write_string@string+1)^0,c
   971   000442  ECF5  F004         	call	_LCD_write_string	;wreg free
   972   000446                     
   973                           ;Lab10.c: 35:         LCD_write_char('%');
   974   000446  0E25               	movlw	37
   975   000448  EC32  F006         	call	_LCD_write_char
   976   00044C                     
   977                           ;Lab10.c: 38:         sprintf(value, "%d", T_Integral);
   978   00044C  0E2E               	movlw	low main@value
   979   00044E  6E1A               	movwf	sprintf@s^0,c
   980   000450  0E15               	movlw	low (STR_4+1)
   981   000452  6E1B               	movwf	sprintf@fmt^0,c
   982   000454  C03B  F01C         	movff	main@T_Integral,?_sprintf+2
   983   000458  6A1D               	clrf	(?_sprintf+3)^0,c
   984   00045A  ECAB  F005         	call	_sprintf	;wreg free
   985   00045E                     
   986                           ;Lab10.c: 39:         LCD_cursor_set(2,1);
   987   00045E  0E01               	movlw	1
   988   000460  6E04               	movwf	LCD_cursor_set@column^0,c
   989   000462  0E02               	movlw	2
   990   000464  EC30  F005         	call	_LCD_cursor_set
   991   000468                     
   992                           ;Lab10.c: 40:         LCD_write_string(value);
   993   000468  0E2E               	movlw	low main@value
   994   00046A  6E04               	movwf	LCD_write_string@string^0,c
   995   00046C  6A05               	clrf	(LCD_write_string@string+1)^0,c
   996   00046E  ECF5  F004         	call	_LCD_write_string	;wreg free
   997   000472                     
   998                           ;Lab10.c: 41:         sprintf(value, ".%d", T_Decimal);
   999   000472  0E2E               	movlw	low main@value
  1000   000474  6E1A               	movwf	sprintf@s^0,c
  1001   000476  0E14               	movlw	low STR_4
  1002   000478  6E1B               	movwf	sprintf@fmt^0,c
  1003   00047A  C03A  F01C         	movff	main@T_Decimal,?_sprintf+2
  1004   00047E  6A1D               	clrf	(?_sprintf+3)^0,c
  1005   000480  ECAB  F005         	call	_sprintf	;wreg free
  1006   000484                     
  1007                           ;Lab10.c: 42:         LCD_write_string(value);
  1008   000484  0E2E               	movlw	low main@value
  1009   000486  6E04               	movwf	LCD_write_string@string^0,c
  1010   000488  6A05               	clrf	(LCD_write_string@string+1)^0,c
  1011   00048A  ECF5  F004         	call	_LCD_write_string	;wreg free
  1012   00048E                     
  1013                           ;Lab10.c: 43:         LCD_write_char(0xdf);
  1014   00048E  0EDF               	movlw	223
  1015   000490  EC32  F006         	call	_LCD_write_char
  1016   000494                     
  1017                           ;Lab10.c: 44:         LCD_write_char('C');
  1018   000494  0E43               	movlw	67
  1019   000496  EC32  F006         	call	_LCD_write_char
  1020   00049A                     
  1021                           ;Lab10.c: 46:         sprintf(value, "%d  ", Checksum);
  1022   00049A  0E2E               	movlw	low main@value
  1023   00049C  6E1A               	movwf	sprintf@s^0,c
  1024   00049E  0E0A               	movlw	low STR_5
  1025   0004A0  6E1B               	movwf	sprintf@fmt^0,c
  1026   0004A2  C03C  F01C         	movff	main@Checksum,?_sprintf+2
  1027   0004A6  6A1D               	clrf	(?_sprintf+3)^0,c
  1028   0004A8  ECAB  F005         	call	_sprintf	;wreg free
  1029   0004AC                     
  1030                           ;Lab10.c: 47:         LCD_cursor_set(2,8);
  1031   0004AC  0E08               	movlw	8
  1032   0004AE  6E04               	movwf	LCD_cursor_set@column^0,c
  1033   0004B0  0E02               	movlw	2
  1034   0004B2  EC30  F005         	call	_LCD_cursor_set
  1035   0004B6                     
  1036                           ;Lab10.c: 48:         LCD_write_string(value);
  1037   0004B6  0E2E               	movlw	low main@value
  1038   0004B8  6E04               	movwf	LCD_write_string@string^0,c
  1039   0004BA  6A05               	clrf	(LCD_write_string@string+1)^0,c
  1040   0004BC  ECF5  F004         	call	_LCD_write_string	;wreg free
  1041   0004C0                     
  1042                           ;Lab10.c: 51:         if (Checksum != (RH_Integral + RH_Decimal + T_Integral + T_Decimal
      +                          )){
  1043   0004C0  503C               	movf	main@Checksum^0,w,c
  1044   0004C2  6E2A               	movwf	??_main^0,c
  1045   0004C4  6A2B               	clrf	(??_main+1)^0,c
  1046   0004C6  5038               	movf	main@RH_Decimal^0,w,c
  1047   0004C8  C039  F02C         	movff	main@RH_Integral,??_main+2
  1048   0004CC  6A2D               	clrf	(??_main+3)^0,c
  1049   0004CE  262C               	addwf	(??_main+2)^0,f,c
  1050   0004D0  0E00               	movlw	0
  1051   0004D2  222D               	addwfc	(??_main+3)^0,f,c
  1052   0004D4  503B               	movf	main@T_Integral^0,w,c
  1053   0004D6  262C               	addwf	(??_main+2)^0,f,c
  1054   0004D8  0E00               	movlw	0
  1055   0004DA  222D               	addwfc	(??_main+3)^0,f,c
  1056   0004DC  503A               	movf	main@T_Decimal^0,w,c
  1057   0004DE  262C               	addwf	(??_main+2)^0,f,c
  1058   0004E0  0E00               	movlw	0
  1059   0004E2  222D               	addwfc	(??_main+3)^0,f,c
  1060   0004E4  502A               	movf	??_main^0,w,c
  1061   0004E6  182C               	xorwf	(??_main+2)^0,w,c
  1062   0004E8  E109               	bnz	u1000
  1063   0004EA  502B               	movf	(??_main+1)^0,w,c
  1064   0004EC  182D               	xorwf	(??_main+3)^0,w,c
  1065   0004EE  B4D8               	btfsc	status,2,c
  1066   0004F0  EF7C  F002         	goto	u1001
  1067   0004F4  EF7E  F002         	goto	u1000
  1068   0004F8                     u1001:
  1069   0004F8  EF8D  F002         	goto	l1708
  1070   0004FC                     u1000:
  1071   0004FC                     
  1072                           ;Lab10.c: 52:             LCD_cursor_set(1,8);
  1073   0004FC  0E08               	movlw	8
  1074   0004FE  6E04               	movwf	LCD_cursor_set@column^0,c
  1075   000500  0E01               	movlw	1
  1076   000502  EC30  F005         	call	_LCD_cursor_set
  1077   000506                     
  1078                           ;Lab10.c: 53:             LCD_write_string("Error");
  1079   000506  0E04               	movlw	low (STR_7+3)
  1080   000508  6E04               	movwf	LCD_write_string@string^0,c
  1081   00050A  5004               	movf	LCD_write_string@string^0,w,c
  1082   00050C  A4D8               	btfss	status,2,c
  1083   00050E  0E02               	movlw	high __smallconst
  1084   000510  6E05               	movwf	(LCD_write_string@string+1)^0,c
  1085   000512  ECF5  F004         	call	_LCD_write_string	;wreg free
  1086                           
  1087                           ;Lab10.c: 54:         }
  1088   000516  EF9A  F002         	goto	l1712
  1089   00051A                     l1708:
  1090                           
  1091                           ;Lab10.c: 56:             LCD_cursor_set(1,8);
  1092   00051A  0E08               	movlw	8
  1093   00051C  6E04               	movwf	LCD_cursor_set@column^0,c
  1094   00051E  0E01               	movlw	1
  1095   000520  EC30  F005         	call	_LCD_cursor_set
  1096   000524                     
  1097                           ;Lab10.c: 57:             LCD_write_string("No Error");
  1098   000524  0E01               	movlw	low STR_7
  1099   000526  6E04               	movwf	LCD_write_string@string^0,c
  1100   000528  5004               	movf	LCD_write_string@string^0,w,c
  1101   00052A  A4D8               	btfss	status,2,c
  1102   00052C  0E02               	movlw	high __smallconst
  1103   00052E  6E05               	movwf	(LCD_write_string@string+1)^0,c
  1104   000530  ECF5  F004         	call	_LCD_write_string	;wreg free
  1105   000534                     l1712:
  1106                           
  1107                           ;Lab10.c: 59:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1108   000534  0E29               	movlw	41
  1109   000536  6E2B               	movwf	(??_main+1)^0,c
  1110   000538  0E96               	movlw	150
  1111   00053A  6E2A               	movwf	??_main^0,c
  1112   00053C  0E7F               	movlw	127
  1113   00053E                     u1017:
  1114   00053E  2EE8               	decfsz	wreg,f,c
  1115   000540  D7FE               	bra	u1017
  1116   000542  2E2A               	decfsz	??_main^0,f,c
  1117   000544  D7FC               	bra	u1017
  1118   000546  2E2B               	decfsz	(??_main+1)^0,f,c
  1119   000548  D7FA               	bra	u1017
  1120   00054A  0000               	nop	
  1121   00054C  EFEF  F001         	goto	l1656
  1122   000550  EF00  F000         	goto	start
  1123   000554                     __end_of_main:
  1124                           	callstack 0
  1125                           
  1126 ;; *************** function _sprintf *****************
  1127 ;; Defined at:
  1128 ;;		line 9 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;  s               1   25[COMRAM] PTR unsigned char 
  1131 ;;		 -> main@value(10), 
  1132 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  1133 ;;		 -> STR_5(5), STR_4(4), STR_3(3), STR_2(5), 
  1134 ;;		 -> STR_1(3), 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  f              11   30[COMRAM] struct _IO_FILE
  1137 ;;  ret             2    0        int 
  1138 ;;  ap              1   29[COMRAM] PTR void [1]
  1139 ;;		 -> ?_sprintf(2), 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  2   25[COMRAM] int 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1
  1149 ;;      Params:         4       0       0
  1150 ;;      Locals:        12       0       0
  1151 ;;      Temps:          0       0       0
  1152 ;;      Totals:        16       0       0
  1153 ;;Total ram usage:       16 bytes
  1154 ;; Hardware stack levels used: 1
  1155 ;; Hardware stack levels required when called: 4
  1156 ;; This function calls:
  1157 ;;		_vfprintf
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text1
  1164   000B56                     __ptext1:
  1165                           	callstack 0
  1166   000B56                     _sprintf:
  1167                           	callstack 26
  1168   000B56  0E1C               	movlw	low (?_sprintf+2)
  1169   000B58  6E1E               	movwf	sprintf@ap^0,c
  1170   000B5A  C01A  F01F         	movff	sprintf@s,sprintf@f
  1171   000B5E  0E00               	movlw	0
  1172   000B60  6E22               	movwf	(sprintf@f+3)^0,c
  1173   000B62  0E00               	movlw	0
  1174   000B64  6E21               	movwf	(sprintf@f+2)^0,c
  1175   000B66  0E00               	movlw	0
  1176   000B68  6E29               	movwf	(sprintf@f+10)^0,c
  1177   000B6A  0E00               	movlw	0
  1178   000B6C  6E28               	movwf	(sprintf@f+9)^0,c
  1179   000B6E  0E1F               	movlw	low sprintf@f
  1180   000B70  6E16               	movwf	vfprintf@fp^0,c
  1181   000B72  C01B  F017         	movff	sprintf@fmt,vfprintf@fmt
  1182   000B76  0E1E               	movlw	low sprintf@ap
  1183   000B78  6E18               	movwf	vfprintf@ap^0,c
  1184   000B7A  EC8C  F005         	call	_vfprintf	;wreg free
  1185   000B7E  501A               	movf	sprintf@s^0,w,c
  1186   000B80  2421               	addwf	(sprintf@f+2)^0,w,c
  1187   000B82  6ED9               	movwf	fsr2l,c
  1188   000B84  6ADA               	clrf	fsr2h,c
  1189   000B86  6ADF               	clrf	indf2,c
  1190   000B88  0012               	return		;funcret
  1191   000B8A                     __end_of_sprintf:
  1192                           	callstack 0
  1193                           
  1194 ;; *************** function _vfprintf *****************
  1195 ;; Defined at:
  1196 ;;		line 1817 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
  1199 ;;		 -> sprintf@f(11), 
  1200 ;;  fmt             1   22[COMRAM] PTR const unsigned char 
  1201 ;;		 -> STR_5(5), STR_4(4), STR_3(3), STR_2(5), 
  1202 ;;		 -> STR_1(3), 
  1203 ;;  ap              1   23[COMRAM] PTR PTR void 
  1204 ;;		 -> sprintf@ap(1), 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  cfmt            1   24[COMRAM] PTR unsigned char 
  1207 ;;		 -> STR_5(5), STR_4(4), STR_3(3), STR_2(5), 
  1208 ;;		 -> STR_1(3), 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  2   21[COMRAM] int 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1
  1218 ;;      Params:         3       0       0
  1219 ;;      Locals:         1       0       0
  1220 ;;      Temps:          0       0       0
  1221 ;;      Totals:         4       0       0
  1222 ;;Total ram usage:        4 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; Hardware stack levels required when called: 3
  1225 ;; This function calls:
  1226 ;;		_vfpfcnvrt
  1227 ;; This function is called by:
  1228 ;;		_sprintf
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text2
  1233   000B18                     __ptext2:
  1234                           	callstack 0
  1235   000B18                     _vfprintf:
  1236                           	callstack 26
  1237   000B18                     
  1238                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprintf(FILE *fp, co
      +                          nst char *fmt, va_list ap);E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1818:
      +                           {;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1820:     char *cfmt;;E:\Micr
      +                          ochip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1239   000B18  C017  F019         	movff	vfprintf@fmt,vfprintf@cfmt
  1240                           
  1241                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (*cfmt) {
  1242   000B1C  EF98  F005         	goto	l1598
  1243   000B20                     l1596:
  1244                           
  1245                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvrt(fp, &cfmt, a
      +                          p);
  1246   000B20  C016  F00B         	movff	vfprintf@fp,vfpfcnvrt@fp
  1247   000B24  0E19               	movlw	low vfprintf@cfmt
  1248   000B26  6E0C               	movwf	vfpfcnvrt@fmt^0,c
  1249   000B28  C018  F00D         	movff	vfprintf@ap,vfpfcnvrt@ap
  1250   000B2C  EC0D  F001         	call	_vfpfcnvrt	;wreg free
  1251   000B30                     l1598:
  1252                           
  1253                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (*cfmt) {
  1254   000B30  C019  FFF6         	movff	vfprintf@cfmt,tblptrl
  1255   000B34                     	if	1	;There is more than 1 active tblptr byte
  1256   000B34  0E02               	movlw	high __smallconst
  1257   000B36  6EF7               	movwf	tblptrh,c
  1258   000B38                     	endif
  1259   000B38                     	if	0	;tblptru may be non-zero
  1260   000B38                     	endif
  1261   000B38                     	if	0	;tblptru may be non-zero
  1262   000B38                     	endif
  1263   000B38  0008               	tblrd		*
  1264   000B3A  50F5               	movf	tablat,w,c
  1265   000B3C  0900               	iorlw	0
  1266   000B3E  A4D8               	btfss	status,2,c
  1267   000B40  EFA4  F005         	goto	u911
  1268   000B44  EFA6  F005         	goto	u910
  1269   000B48                     u911:
  1270   000B48  EF90  F005         	goto	l1596
  1271   000B4C                     u910:
  1272   000B4C                     
  1273                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1274   000B4C  0E00               	movlw	0
  1275   000B4E  6E17               	movwf	(?_vfprintf+1)^0,c
  1276   000B50  0E00               	movlw	0
  1277   000B52  6E16               	movwf	?_vfprintf^0,c
  1278   000B54  0012               	return		;funcret
  1279   000B56                     __end_of_vfprintf:
  1280                           	callstack 0
  1281                           
  1282 ;; *************** function _vfpfcnvrt *****************
  1283 ;; Defined at:
  1284 ;;		line 1177 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  1287 ;;		 -> sprintf@f(11), 
  1288 ;;  fmt             1   11[COMRAM] PTR PTR unsigned char 
  1289 ;;		 -> vfprintf@cfmt(1), 
  1290 ;;  ap              1   12[COMRAM] PTR PTR void 
  1291 ;;		 -> sprintf@ap(1), 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  convarg         4   16[COMRAM] struct .
  1294 ;;  c               1   20[COMRAM] unsigned char 
  1295 ;;  cp              1   15[COMRAM] PTR unsigned char 
  1296 ;;		 -> STR_5(5), STR_4(4), STR_3(3), STR_2(5), 
  1297 ;;		 -> STR_1(3), 
  1298 ;;  done            1   14[COMRAM] _Bool 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1
  1308 ;;      Params:         3       0       0
  1309 ;;      Locals:         7       0       0
  1310 ;;      Temps:          1       0       0
  1311 ;;      Totals:        11       0       0
  1312 ;;Total ram usage:       11 bytes
  1313 ;; Hardware stack levels used: 1
  1314 ;; Hardware stack levels required when called: 2
  1315 ;; This function calls:
  1316 ;;		___awdiv
  1317 ;;		___awmod
  1318 ;;		_abs
  1319 ;;		_fputc
  1320 ;; This function is called by:
  1321 ;;		_vfprintf
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text3
  1326   00021A                     __ptext3:
  1327                           	callstack 0
  1328   00021A                     _vfpfcnvrt:
  1329                           	callstack 26
  1330   00021A                     
  1331                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(FILE *fp, char 
      +                          *fmt[], va_list ap);E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1178: {;E:\M
      +                          icrochip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1179:     char c, *cp;;E:\Microchip\
      +                          xc8\v2.50\pic\sources\c99\common\doprnt.c: 1180:     _Bool done;;E:\Microchip\xc8\v2.50\
      +                          pic\sources\c99\common\doprnt.c: 1188:  } convarg;;E:\Microchip\xc8\v2.50\pic\sources\c9
      +                          9\common\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1332   00021A  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1333   00021C  6ED9               	movwf	fsr2l,c
  1334   00021E  6ADA               	clrf	fsr2h,c
  1335   000220  CFDF FFF6          	movff	indf2,tblptrl
  1336   000224                     	if	1	;There is more than 1 active tblptr byte
  1337   000224  0E02               	movlw	high __smallconst
  1338   000226  6EF7               	movwf	tblptrh,c
  1339   000228                     	endif
  1340   000228                     	if	0	;tblptru may be non-zero
  1341   000228                     	endif
  1342   000228                     	if	0	;tblptru may be non-zero
  1343   000228                     	endif
  1344   000228  0008               	tblrd		*
  1345   00022A  50F5               	movf	tablat,w,c
  1346   00022C  0A25               	xorlw	37
  1347   00022E  A4D8               	btfss	status,2,c
  1348   000230  EF1C  F001         	goto	u811
  1349   000234  EF1E  F001         	goto	u810
  1350   000238                     u811:
  1351   000238  EFD7  F001         	goto	l1588
  1352   00023C                     u810:
  1353   00023C                     
  1354                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*fmt;
  1355   00023C  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1356   00023E  6ED9               	movwf	fsr2l,c
  1357   000240  6ADA               	clrf	fsr2h,c
  1358   000242  2ADF               	incf	indf2,f,c
  1359   000244                     
  1360                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         flags = width = 0
      +                          ;
  1361   000244  0E00               	movlw	0
  1362   000246  6E62               	movwf	(_width+1)^0,c
  1363   000248  0E00               	movlw	0
  1364   00024A  6E61               	movwf	_width^0,c
  1365   00024C  C061  F065         	movff	_width,_flags
  1366   000250                     
  1367                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         prec = -1;
  1368   000250  6863               	setf	_prec^0,c
  1369   000252  6864               	setf	(_prec+1)^0,c
  1370   000254                     
  1371                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt;
  1372   000254  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1373   000256  6ED9               	movwf	fsr2l,c
  1374   000258  6ADA               	clrf	fsr2h,c
  1375   00025A  50DF               	movf	indf2,w,c
  1376   00025C  6E10               	movwf	vfpfcnvrt@cp^0,c
  1377   00025E                     
  1378                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp == 'd' || *cp =
      +                          = 'i') {
  1379   00025E  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1380   000262                     	if	1	;There is more than 1 active tblptr byte
  1381   000262  0E02               	movlw	high __smallconst
  1382   000264  6EF7               	movwf	tblptrh,c
  1383   000266                     	endif
  1384   000266                     	if	0	;tblptru may be non-zero
  1385   000266                     	endif
  1386   000266                     	if	0	;tblptru may be non-zero
  1387   000266                     	endif
  1388   000266  0008               	tblrd		*
  1389   000268  50F5               	movf	tablat,w,c
  1390   00026A  0A64               	xorlw	100
  1391   00026C  B4D8               	btfsc	status,2,c
  1392   00026E  EF3B  F001         	goto	u821
  1393   000272  EF3D  F001         	goto	u820
  1394   000276                     u821:
  1395   000276  EF4B  F001         	goto	l1558
  1396   00027A                     u820:
  1397   00027A  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1398   00027E                     	if	1	;There is more than 1 active tblptr byte
  1399   00027E  0E02               	movlw	high __smallconst
  1400   000280  6EF7               	movwf	tblptrh,c
  1401   000282                     	endif
  1402   000282                     	if	0	;tblptru may be non-zero
  1403   000282                     	endif
  1404   000282                     	if	0	;tblptru may be non-zero
  1405   000282                     	endif
  1406   000282  0008               	tblrd		*
  1407   000284  50F5               	movf	tablat,w,c
  1408   000286  0A69               	xorlw	105
  1409   000288  A4D8               	btfss	status,2,c
  1410   00028A  EF49  F001         	goto	u831
  1411   00028E  EF4B  F001         	goto	u830
  1412   000292                     u831:
  1413   000292  EFD1  F001         	goto	l1584
  1414   000296                     u830:
  1415   000296                     l1558:
  1416                           
  1417                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.sint = (vfpf_s
      +                          int_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1418   000296  500D               	movf	vfpfcnvrt@ap^0,w,c
  1419   000298  6ED9               	movwf	fsr2l,c
  1420   00029A  6ADA               	clrf	fsr2h,c
  1421   00029C  0E02               	movlw	2
  1422   00029E  26DF               	addwf	indf2,f,c
  1423   0002A0  5CDF               	subwf	indf2,w,c
  1424   0002A2  6ED9               	movwf	fsr2l,c
  1425   0002A4  6ADA               	clrf	fsr2h,c
  1426   0002A6  CFDE F011          	movff	postinc2,vfpfcnvrt@convarg
  1427   0002AA  CFDE F012          	movff	postinc2,vfpfcnvrt@convarg+1
  1428   0002AE                     
  1429                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = cp+1;
  1430   0002AE  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1431   0002B0  6ED9               	movwf	fsr2l,c
  1432   0002B2  6ADA               	clrf	fsr2h,c
  1433   0002B4  2810               	incf	vfpfcnvrt@cp^0,w,c
  1434   0002B6  6EDF               	movwf	indf2,c
  1435   0002B8                     
  1436                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = sizeof(dbuf);
  1437   0002B8  0E20               	movlw	32
  1438   0002BA  6E15               	movwf	vfpfcnvrt@c^0,c
  1439                           
  1440                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = convarg.sint < 
      +                          0;
  1441   0002BC  BE12               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1442   0002BE  EF63  F001         	goto	u841
  1443   0002C2  EF66  F001         	goto	u840
  1444   0002C6                     u841:
  1445   0002C6  0E01               	movlw	1
  1446   0002C8  EF67  F001         	goto	u850
  1447   0002CC                     u840:
  1448   0002CC  0E00               	movlw	0
  1449   0002CE                     u850:
  1450   0002CE  6E0F               	movwf	vfpfcnvrt@done^0,c
  1451   0002D0                     l1564:
  1452                           
  1453                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--c] = abs(conva
      +                          rg.sint % 10) + '0';
  1454   0002D0  0615               	decf	vfpfcnvrt@c^0,f,c
  1455   0002D2  5015               	movf	vfpfcnvrt@c^0,w,c
  1456   0002D4  0F3D               	addlw	low _dbuf
  1457   0002D6  6ED9               	movwf	fsr2l,c
  1458   0002D8  6ADA               	clrf	fsr2h,c
  1459   0002DA  C011  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1460   0002DE  C012  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1461   0002E2  0E00               	movlw	0
  1462   0002E4  6E04               	movwf	(___awmod@divisor+1)^0,c
  1463   0002E6  0E0A               	movlw	10
  1464   0002E8  6E03               	movwf	___awmod@divisor^0,c
  1465   0002EA  EC07  F004         	call	___awmod	;wreg free
  1466   0002EE  C001  F007         	movff	?___awmod,abs@a
  1467   0002F2  C002  F008         	movff	?___awmod+1,abs@a+1
  1468   0002F6  ECC5  F005         	call	_abs	;wreg free
  1469   0002FA  5007               	movf	?_abs^0,w,c
  1470   0002FC  0F30               	addlw	48
  1471   0002FE  6EDF               	movwf	indf2,c
  1472   000300                     
  1473                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg.sint /= 10;
  1474   000300  C011  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1475   000304  C012  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1476   000308  0E00               	movlw	0
  1477   00030A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1478   00030C  0E0A               	movlw	10
  1479   00030E  6E03               	movwf	___awdiv@divisor^0,c
  1480   000310  ECA6  F003         	call	___awdiv	;wreg free
  1481   000314  C001  F011         	movff	?___awdiv,vfpfcnvrt@convarg
  1482   000318  C002  F012         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1483   00031C                     
  1484                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while (convarg.sint 
      +                          != 0 && c != 0);
  1485   00031C  5011               	movf	vfpfcnvrt@convarg^0,w,c
  1486   00031E  1012               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1487   000320  B4D8               	btfsc	status,2,c
  1488   000322  EF95  F001         	goto	u861
  1489   000326  EF97  F001         	goto	u860
  1490   00032A                     u861:
  1491   00032A  EF9F  F001         	goto	l1572
  1492   00032E                     u860:
  1493   00032E  5015               	movf	vfpfcnvrt@c^0,w,c
  1494   000330  A4D8               	btfss	status,2,c
  1495   000332  EF9D  F001         	goto	u871
  1496   000336  EF9F  F001         	goto	u870
  1497   00033A                     u871:
  1498   00033A  EF68  F001         	goto	l1564
  1499   00033E                     u870:
  1500   00033E                     l1572:
  1501                           
  1502                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c != 0 && done) {
  1503   00033E  5015               	movf	vfpfcnvrt@c^0,w,c
  1504   000340  B4D8               	btfsc	status,2,c
  1505   000342  EFA5  F001         	goto	u881
  1506   000346  EFA7  F001         	goto	u880
  1507   00034A                     u881:
  1508   00034A  EFC6  F001         	goto	l1582
  1509   00034E                     u880:
  1510   00034E  500F               	movf	vfpfcnvrt@done^0,w,c
  1511   000350  B4D8               	btfsc	status,2,c
  1512   000352  EFAD  F001         	goto	u891
  1513   000356  EFAF  F001         	goto	u890
  1514   00035A                     u891:
  1515   00035A  EFC6  F001         	goto	l1582
  1516   00035E                     u890:
  1517   00035E                     
  1518                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--c] = '-';
  1519   00035E  0615               	decf	vfpfcnvrt@c^0,f,c
  1520   000360  5015               	movf	vfpfcnvrt@c^0,w,c
  1521   000362  0F3D               	addlw	low _dbuf
  1522   000364  6ED9               	movwf	fsr2l,c
  1523   000366  6ADA               	clrf	fsr2h,c
  1524   000368  0E2D               	movlw	45
  1525   00036A  6EDF               	movwf	indf2,c
  1526   00036C  EFC6  F001         	goto	l1582
  1527   000370                     l1578:
  1528                           
  1529                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(dbuf[c++], fp);
  1530   000370  5015               	movf	vfpfcnvrt@c^0,w,c
  1531   000372  0F3D               	addlw	low _dbuf
  1532   000374  6ED9               	movwf	fsr2l,c
  1533   000376  6ADA               	clrf	fsr2h,c
  1534   000378  50DF               	movf	indf2,w,c
  1535   00037A  6E0E               	movwf	??_vfpfcnvrt^0,c
  1536   00037C  500E               	movf	??_vfpfcnvrt^0,w,c
  1537   00037E  6E01               	movwf	fputc@c^0,c
  1538   000380  6A02               	clrf	(fputc@c+1)^0,c
  1539   000382  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1540   000386  EC5E  F004         	call	_fputc	;wreg free
  1541   00038A  2A15               	incf	vfpfcnvrt@c^0,f,c
  1542   00038C                     l1582:
  1543                           
  1544                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c != sizeof(dbu
      +                          f)) {
  1545   00038C  0E20               	movlw	32
  1546   00038E  1815               	xorwf	vfpfcnvrt@c^0,w,c
  1547   000390  A4D8               	btfss	status,2,c
  1548   000392  EFCD  F001         	goto	u901
  1549   000396  EFCF  F001         	goto	u900
  1550   00039A                     u901:
  1551   00039A  EFB8  F001         	goto	l1578
  1552   00039E                     u900:
  1553   00039E  EFE8  F001         	goto	l914
  1554   0003A2                     l1584:
  1555                           
  1556                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*fmt;
  1557   0003A2  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1558   0003A4  6ED9               	movwf	fsr2l,c
  1559   0003A6  6ADA               	clrf	fsr2h,c
  1560   0003A8  2ADF               	incf	indf2,f,c
  1561   0003AA  EFE8  F001         	goto	l914
  1562   0003AE                     l1588:
  1563                           
  1564                           ;E:\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((int)(*fmt)[0],
      +                           fp);
  1565   0003AE  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1566   0003B0  6ED9               	movwf	fsr2l,c
  1567   0003B2  6ADA               	clrf	fsr2h,c
  1568   0003B4  CFDF FFF6          	movff	indf2,tblptrl
  1569   0003B8                     	if	1	;There is more than 1 active tblptr byte
  1570   0003B8  0E02               	movlw	high __smallconst
  1571   0003BA  6EF7               	movwf	tblptrh,c
  1572   0003BC                     	endif
  1573   0003BC                     	if	0	;tblptru may be non-zero
  1574   0003BC                     	endif
  1575   0003BC                     	if	0	;tblptru may be non-zero
  1576   0003BC                     	endif
  1577   0003BC  0008               	tblrd		*
  1578   0003BE  50F5               	movf	tablat,w,c
  1579   0003C0  6E01               	movwf	fputc@c^0,c
  1580   0003C2  6A02               	clrf	(fputc@c+1)^0,c
  1581   0003C4  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1582   0003C8  EC5E  F004         	call	_fputc	;wreg free
  1583   0003CC  EFD1  F001         	goto	l1584
  1584   0003D0                     l914:
  1585   0003D0  0012               	return		;funcret
  1586   0003D2                     __end_of_vfpfcnvrt:
  1587                           	callstack 0
  1588                           
  1589 ;; *************** function _fputc *****************
  1590 ;; Defined at:
  1591 ;;		line 8 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  c               2    0[COMRAM] int 
  1594 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  1595 ;;		 -> sprintf@f(11), 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  2    0[COMRAM] int 
  1600 ;; Registers used:
  1601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1
  1607 ;;      Params:         3       0       0
  1608 ;;      Locals:         0       0       0
  1609 ;;      Temps:          5       0       0
  1610 ;;      Totals:         8       0       0
  1611 ;;Total ram usage:        8 bytes
  1612 ;; Hardware stack levels used: 1
  1613 ;; Hardware stack levels required when called: 1
  1614 ;; This function calls:
  1615 ;;		_putch
  1616 ;; This function is called by:
  1617 ;;		_vfpfcnvrt
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text4
  1622   0008BC                     __ptext4:
  1623                           	callstack 0
  1624   0008BC                     _fputc:
  1625                           	callstack 26
  1626   0008BC  5003               	movf	fputc@fp^0,w,c
  1627   0008BE  B4D8               	btfsc	status,2,c
  1628   0008C0  EF64  F004         	goto	u761
  1629   0008C4  EF66  F004         	goto	u760
  1630   0008C8                     u761:
  1631   0008C8  EF6E  F004         	goto	l1530
  1632   0008CC                     u760:
  1633   0008CC  5003               	movf	fputc@fp^0,w,c
  1634   0008CE  A4D8               	btfss	status,2,c
  1635   0008D0  EF6C  F004         	goto	u771
  1636   0008D4  EF6E  F004         	goto	u770
  1637   0008D8                     u771:
  1638   0008D8  EF73  F004         	goto	l1532
  1639   0008DC                     u770:
  1640   0008DC                     l1530:
  1641   0008DC  5001               	movf	fputc@c^0,w,c
  1642   0008DE  EC38  F006         	call	_putch
  1643   0008E2  EFB2  F004         	goto	l939
  1644   0008E6                     l1532:
  1645   0008E6  5003               	movf	fputc@fp^0,w,c
  1646   0008E8  6ED9               	movwf	fsr2l,c
  1647   0008EA  6ADA               	clrf	fsr2h,c
  1648   0008EC  0E09               	movlw	9
  1649   0008EE  26D9               	addwf	fsr2l,f,c
  1650   0008F0  50DE               	movf	postinc2,w,c
  1651   0008F2  10DE               	iorwf	postinc2,w,c
  1652   0008F4  B4D8               	btfsc	status,2,c
  1653   0008F6  EF7F  F004         	goto	u781
  1654   0008FA  EF81  F004         	goto	u780
  1655   0008FE                     u781:
  1656   0008FE  EF9A  F004         	goto	l1536
  1657   000902                     u780:
  1658   000902  5003               	movf	fputc@fp^0,w,c
  1659   000904  6ED9               	movwf	fsr2l,c
  1660   000906  6ADA               	clrf	fsr2h,c
  1661   000908  0E09               	movlw	9
  1662   00090A  26D9               	addwf	fsr2l,f,c
  1663   00090C  5003               	movf	fputc@fp^0,w,c
  1664   00090E  6EE1               	movwf	fsr1l,c
  1665   000910  6AE2               	clrf	fsr1h,c
  1666   000912  0E02               	movlw	2
  1667   000914  26E1               	addwf	fsr1l,f,c
  1668   000916  50DE               	movf	postinc2,w,c
  1669   000918  5CE6               	subwf	postinc1,w,c
  1670   00091A  50E6               	movf	postinc1,w,c
  1671   00091C  0A80               	xorlw	128
  1672   00091E  6E08               	movwf	(??_fputc+4)^0,c
  1673   000920  50DE               	movf	postinc2,w,c
  1674   000922  0A80               	xorlw	128
  1675   000924  5808               	subwfb	(??_fputc+4)^0,w,c
  1676   000926  B0D8               	btfsc	status,0,c
  1677   000928  EF98  F004         	goto	u791
  1678   00092C  EF9A  F004         	goto	u790
  1679   000930                     u791:
  1680   000930  EFB2  F004         	goto	l939
  1681   000934                     u790:
  1682   000934                     l1536:
  1683   000934  5003               	movf	fputc@fp^0,w,c
  1684   000936  6ED9               	movwf	fsr2l,c
  1685   000938  6ADA               	clrf	fsr2h,c
  1686   00093A  0E02               	movlw	2
  1687   00093C  26D9               	addwf	fsr2l,f,c
  1688   00093E  50DF               	movf	indf2,w,c
  1689   000940  6E04               	movwf	??_fputc^0,c
  1690   000942  5003               	movf	fputc@fp^0,w,c
  1691   000944  6ED9               	movwf	fsr2l,c
  1692   000946  6ADA               	clrf	fsr2h,c
  1693   000948  50DF               	movf	indf2,w,c
  1694   00094A  2404               	addwf	??_fputc^0,w,c
  1695   00094C  6ED9               	movwf	fsr2l,c
  1696   00094E  6ADA               	clrf	fsr2h,c
  1697   000950  C001  FFDF         	movff	fputc@c,indf2
  1698   000954  5003               	movf	fputc@fp^0,w,c
  1699   000956  6ED9               	movwf	fsr2l,c
  1700   000958  6ADA               	clrf	fsr2h,c
  1701   00095A  0E02               	movlw	2
  1702   00095C  26D9               	addwf	fsr2l,f,c
  1703   00095E  2ADE               	incf	postinc2,f,c
  1704   000960  0E00               	movlw	0
  1705   000962  22DD               	addwfc	postdec2,f,c
  1706   000964                     l939:
  1707   000964  0012               	return		;funcret
  1708   000966                     __end_of_fputc:
  1709                           	callstack 0
  1710                           
  1711 ;; *************** function _putch *****************
  1712 ;; Defined at:
  1713 ;;		line 7 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  c               1    wreg     unsigned char 
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  c               1    0[COMRAM] unsigned char 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1
  1727 ;;      Params:         0       0       0
  1728 ;;      Locals:         0       0       0
  1729 ;;      Temps:          0       0       0
  1730 ;;      Totals:         0       0       0
  1731 ;;Total ram usage:        0 bytes
  1732 ;; Hardware stack levels used: 1
  1733 ;; This function calls:
  1734 ;;		Nothing
  1735 ;; This function is called by:
  1736 ;;		_fputc
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text5
  1741   000C70                     __ptext5:
  1742                           	callstack 0
  1743   000C70                     _putch:
  1744                           	callstack 26
  1745   000C70  0012               	return		;funcret
  1746   000C72                     __end_of_putch:
  1747                           	callstack 0
  1748                           
  1749 ;; *************** function _abs *****************
  1750 ;; Defined at:
  1751 ;;		line 1 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;  a               2    6[COMRAM] int 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  2    6[COMRAM] int 
  1758 ;; Registers used:
  1759 ;;		wreg, status,2, status,0
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1
  1765 ;;      Params:         2       0       0
  1766 ;;      Locals:         0       0       0
  1767 ;;      Temps:          2       0       0
  1768 ;;      Totals:         4       0       0
  1769 ;;Total ram usage:        4 bytes
  1770 ;; Hardware stack levels used: 1
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_vfpfcnvrt
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text6
  1779   000B8A                     __ptext6:
  1780                           	callstack 0
  1781   000B8A                     _abs:
  1782                           	callstack 27
  1783   000B8A  BE08               	btfsc	(abs@a+1)^0,7,c
  1784   000B8C  EFCA  F005         	goto	u801
  1785   000B90  EFCC  F005         	goto	u800
  1786   000B94                     u801:
  1787   000B94  EFD2  F005         	goto	l924
  1788   000B98                     u800:
  1789   000B98  C007  F007         	movff	abs@a,?_abs
  1790   000B9C  C008  F008         	movff	abs@a+1,?_abs+1
  1791   000BA0  EFDE  F005         	goto	l927
  1792   000BA4                     l924:
  1793   000BA4  C007  F009         	movff	abs@a,??_abs
  1794   000BA8  C008  F00A         	movff	abs@a+1,??_abs+1
  1795   000BAC  1E09               	comf	??_abs^0,f,c
  1796   000BAE  1E0A               	comf	(??_abs+1)^0,f,c
  1797   000BB0  4A09               	infsnz	??_abs^0,f,c
  1798   000BB2  2A0A               	incf	(??_abs+1)^0,f,c
  1799   000BB4  C009  F007         	movff	??_abs,?_abs
  1800   000BB8  C00A  F008         	movff	??_abs+1,?_abs+1
  1801   000BBC                     l927:
  1802   000BBC  0012               	return		;funcret
  1803   000BBE                     __end_of_abs:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function ___awmod *****************
  1807 ;; Defined at:
  1808 ;;		line 7 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  dividend        2    0[COMRAM] int 
  1811 ;;  divisor         2    2[COMRAM] int 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  sign            1    5[COMRAM] unsigned char 
  1814 ;;  counter         1    4[COMRAM] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  2    0[COMRAM] int 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1
  1824 ;;      Params:         4       0       0
  1825 ;;      Locals:         2       0       0
  1826 ;;      Temps:          0       0       0
  1827 ;;      Totals:         6       0       0
  1828 ;;Total ram usage:        6 bytes
  1829 ;; Hardware stack levels used: 1
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_vfpfcnvrt
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text7
  1838   00080E                     __ptext7:
  1839                           	callstack 0
  1840   00080E                     ___awmod:
  1841                           	callstack 27
  1842   00080E  6A06               	clrf	___awmod@sign^0,c
  1843   000810  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1844   000812  EF0F  F004         	goto	u700
  1845   000816  EF0D  F004         	goto	u701
  1846   00081A                     u701:
  1847   00081A  EF15  F004         	goto	l1498
  1848   00081E                     u700:
  1849   00081E  6C01               	negf	___awmod@dividend^0,c
  1850   000820  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1851   000822  B0D8               	btfsc	status,0,c
  1852   000824  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1853   000826  0E01               	movlw	1
  1854   000828  6E06               	movwf	___awmod@sign^0,c
  1855   00082A                     l1498:
  1856   00082A  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1857   00082C  EF1C  F004         	goto	u710
  1858   000830  EF1A  F004         	goto	u711
  1859   000834                     u711:
  1860   000834  EF20  F004         	goto	l1502
  1861   000838                     u710:
  1862   000838  6C03               	negf	___awmod@divisor^0,c
  1863   00083A  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1864   00083C  B0D8               	btfsc	status,0,c
  1865   00083E  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1866   000840                     l1502:
  1867   000840  5003               	movf	___awmod@divisor^0,w,c
  1868   000842  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1869   000844  B4D8               	btfsc	status,2,c
  1870   000846  EF27  F004         	goto	u721
  1871   00084A  EF29  F004         	goto	u720
  1872   00084E                     u721:
  1873   00084E  EF4D  F004         	goto	l1518
  1874   000852                     u720:
  1875   000852  0E01               	movlw	1
  1876   000854  6E05               	movwf	___awmod@counter^0,c
  1877   000856  EF31  F004         	goto	l1508
  1878   00085A                     l1506:
  1879   00085A  90D8               	bcf	status,0,c
  1880   00085C  3603               	rlcf	___awmod@divisor^0,f,c
  1881   00085E  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1882   000860  2A05               	incf	___awmod@counter^0,f,c
  1883   000862                     l1508:
  1884   000862  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1885   000864  EF36  F004         	goto	u731
  1886   000868  EF38  F004         	goto	u730
  1887   00086C                     u731:
  1888   00086C  EF2D  F004         	goto	l1506
  1889   000870                     u730:
  1890   000870                     l1510:
  1891   000870  5003               	movf	___awmod@divisor^0,w,c
  1892   000872  5C01               	subwf	___awmod@dividend^0,w,c
  1893   000874  5004               	movf	(___awmod@divisor+1)^0,w,c
  1894   000876  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1895   000878  A0D8               	btfss	status,0,c
  1896   00087A  EF41  F004         	goto	u741
  1897   00087E  EF43  F004         	goto	u740
  1898   000882                     u741:
  1899   000882  EF47  F004         	goto	l1514
  1900   000886                     u740:
  1901   000886  5003               	movf	___awmod@divisor^0,w,c
  1902   000888  5E01               	subwf	___awmod@dividend^0,f,c
  1903   00088A  5004               	movf	(___awmod@divisor+1)^0,w,c
  1904   00088C  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1905   00088E                     l1514:
  1906   00088E  90D8               	bcf	status,0,c
  1907   000890  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1908   000892  3203               	rrcf	___awmod@divisor^0,f,c
  1909   000894  2E05               	decfsz	___awmod@counter^0,f,c
  1910   000896  EF38  F004         	goto	l1510
  1911   00089A                     l1518:
  1912   00089A  5006               	movf	___awmod@sign^0,w,c
  1913   00089C  B4D8               	btfsc	status,2,c
  1914   00089E  EF53  F004         	goto	u751
  1915   0008A2  EF55  F004         	goto	u750
  1916   0008A6                     u751:
  1917   0008A6  EF59  F004         	goto	l1522
  1918   0008AA                     u750:
  1919   0008AA  6C01               	negf	___awmod@dividend^0,c
  1920   0008AC  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1921   0008AE  B0D8               	btfsc	status,0,c
  1922   0008B0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1923   0008B2                     l1522:
  1924   0008B2  C001  F001         	movff	___awmod@dividend,?___awmod
  1925   0008B6  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1926   0008BA  0012               	return		;funcret
  1927   0008BC                     __end_of___awmod:
  1928                           	callstack 0
  1929                           
  1930 ;; *************** function ___awdiv *****************
  1931 ;; Defined at:
  1932 ;;		line 7 in file "E:\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  dividend        2    0[COMRAM] int 
  1935 ;;  divisor         2    2[COMRAM] int 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  quotient        2    6[COMRAM] int 
  1938 ;;  sign            1    5[COMRAM] unsigned char 
  1939 ;;  counter         1    4[COMRAM] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  2    0[COMRAM] int 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1
  1949 ;;      Params:         4       0       0
  1950 ;;      Locals:         4       0       0
  1951 ;;      Temps:          0       0       0
  1952 ;;      Totals:         8       0       0
  1953 ;;Total ram usage:        8 bytes
  1954 ;; Hardware stack levels used: 1
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_vfpfcnvrt
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text8
  1963   00074C                     __ptext8:
  1964                           	callstack 0
  1965   00074C                     ___awdiv:
  1966                           	callstack 27
  1967   00074C  6A06               	clrf	___awdiv@sign^0,c
  1968   00074E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1969   000750  EFAE  F003         	goto	u640
  1970   000754  EFAC  F003         	goto	u641
  1971   000758                     u641:
  1972   000758  EFB4  F003         	goto	l1454
  1973   00075C                     u640:
  1974   00075C  6C03               	negf	___awdiv@divisor^0,c
  1975   00075E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1976   000760  B0D8               	btfsc	status,0,c
  1977   000762  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1978   000764  0E01               	movlw	1
  1979   000766  6E06               	movwf	___awdiv@sign^0,c
  1980   000768                     l1454:
  1981   000768  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1982   00076A  EFBB  F003         	goto	u650
  1983   00076E  EFB9  F003         	goto	u651
  1984   000772                     u651:
  1985   000772  EFC1  F003         	goto	l1460
  1986   000776                     u650:
  1987   000776  6C01               	negf	___awdiv@dividend^0,c
  1988   000778  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1989   00077A  B0D8               	btfsc	status,0,c
  1990   00077C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1991   00077E  0E01               	movlw	1
  1992   000780  1A06               	xorwf	___awdiv@sign^0,f,c
  1993   000782                     l1460:
  1994   000782  0E00               	movlw	0
  1995   000784  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1996   000786  0E00               	movlw	0
  1997   000788  6E07               	movwf	___awdiv@quotient^0,c
  1998   00078A  5003               	movf	___awdiv@divisor^0,w,c
  1999   00078C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2000   00078E  B4D8               	btfsc	status,2,c
  2001   000790  EFCC  F003         	goto	u661
  2002   000794  EFCE  F003         	goto	u660
  2003   000798                     u661:
  2004   000798  EFF6  F003         	goto	l1482
  2005   00079C                     u660:
  2006   00079C  0E01               	movlw	1
  2007   00079E  6E05               	movwf	___awdiv@counter^0,c
  2008   0007A0  EFD6  F003         	goto	l1468
  2009   0007A4                     l1466:
  2010   0007A4  90D8               	bcf	status,0,c
  2011   0007A6  3603               	rlcf	___awdiv@divisor^0,f,c
  2012   0007A8  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2013   0007AA  2A05               	incf	___awdiv@counter^0,f,c
  2014   0007AC                     l1468:
  2015   0007AC  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2016   0007AE  EFDB  F003         	goto	u671
  2017   0007B2  EFDD  F003         	goto	u670
  2018   0007B6                     u671:
  2019   0007B6  EFD2  F003         	goto	l1466
  2020   0007BA                     u670:
  2021   0007BA                     l1470:
  2022   0007BA  90D8               	bcf	status,0,c
  2023   0007BC  3607               	rlcf	___awdiv@quotient^0,f,c
  2024   0007BE  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2025   0007C0  5003               	movf	___awdiv@divisor^0,w,c
  2026   0007C2  5C01               	subwf	___awdiv@dividend^0,w,c
  2027   0007C4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2028   0007C6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2029   0007C8  A0D8               	btfss	status,0,c
  2030   0007CA  EFE9  F003         	goto	u681
  2031   0007CE  EFEB  F003         	goto	u680
  2032   0007D2                     u681:
  2033   0007D2  EFF0  F003         	goto	l1478
  2034   0007D6                     u680:
  2035   0007D6  5003               	movf	___awdiv@divisor^0,w,c
  2036   0007D8  5E01               	subwf	___awdiv@dividend^0,f,c
  2037   0007DA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2038   0007DC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2039   0007DE  8007               	bsf	___awdiv@quotient^0,0,c
  2040   0007E0                     l1478:
  2041   0007E0  90D8               	bcf	status,0,c
  2042   0007E2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2043   0007E4  3203               	rrcf	___awdiv@divisor^0,f,c
  2044   0007E6  2E05               	decfsz	___awdiv@counter^0,f,c
  2045   0007E8  EFDD  F003         	goto	l1470
  2046   0007EC                     l1482:
  2047   0007EC  5006               	movf	___awdiv@sign^0,w,c
  2048   0007EE  B4D8               	btfsc	status,2,c
  2049   0007F0  EFFC  F003         	goto	u691
  2050   0007F4  EFFE  F003         	goto	u690
  2051   0007F8                     u691:
  2052   0007F8  EF02  F004         	goto	l1486
  2053   0007FC                     u690:
  2054   0007FC  6C07               	negf	___awdiv@quotient^0,c
  2055   0007FE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2056   000800  B0D8               	btfsc	status,0,c
  2057   000802  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2058   000804                     l1486:
  2059   000804  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2060   000808  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2061   00080C  0012               	return		;funcret
  2062   00080E                     __end_of___awdiv:
  2063                           	callstack 0
  2064                           
  2065 ;; *************** function _LCD_write_string *****************
  2066 ;; Defined at:
  2067 ;;		line 392 in file "LCD.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  string          2    3[COMRAM] PTR unsigned char 
  2070 ;;		 -> STR_7(9), STR_6(6), main@value(10), 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  i               1    7[COMRAM] unsigned char 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      void 
  2075 ;; Registers used:
  2076 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1
  2082 ;;      Params:         2       0       0
  2083 ;;      Locals:         1       0       0
  2084 ;;      Temps:          2       0       0
  2085 ;;      Totals:         5       0       0
  2086 ;;Total ram usage:        5 bytes
  2087 ;; Hardware stack levels used: 1
  2088 ;; Hardware stack levels required when called: 2
  2089 ;; This function calls:
  2090 ;;		_LCD_write_data
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text9
  2097   0009EA                     __ptext9:
  2098                           	callstack 0
  2099   0009EA                     _LCD_write_string:
  2100                           	callstack 28
  2101   0009EA                     
  2102                           ;LCD.c: 395:     for(uint8_t i=0 ; string[i] != '\0' ; i++){
  2103   0009EA  6A08               	clrf	LCD_write_string@i^0,c
  2104   0009EC  EF11  F005         	goto	l1622
  2105   0009F0                     l1618:
  2106                           
  2107                           ;LCD.c: 396:         LCD_write_data(string[i]);
  2108   0009F0  5008               	movf	LCD_write_string@i^0,w,c
  2109   0009F2  2404               	addwf	LCD_write_string@string^0,w,c
  2110   0009F4  6E06               	movwf	??_LCD_write_string^0,c
  2111   0009F6  0E00               	movlw	0
  2112   0009F8  2005               	addwfc	(LCD_write_string@string+1)^0,w,c
  2113   0009FA  6E07               	movwf	(??_LCD_write_string+1)^0,c
  2114   0009FC  C006  FFF6         	movff	??_LCD_write_string,tblptrl
  2115   000A00  C007  FFF7         	movff	??_LCD_write_string+1,tblptrh
  2116   000A04  6AF8               	clrf	tblptru,c
  2117   000A06  0E01               	movlw	(high __ramtop+-1)
  2118   000A08  64F7               	cpfsgt	tblptrh,c
  2119   000A0A  D003               	bra	u967
  2120   000A0C  0008               	tblrd		*
  2121   000A0E  50F5               	movf	tablat,w,c
  2122   000A10  D005               	bra	u960
  2123   000A12                     u967:
  2124   000A12  CFF6 FFE9          	movff	tblptrl,fsr0l
  2125   000A16  CFF7 FFEA          	movff	tblptrh,fsr0h
  2126   000A1A  50EF               	movf	indf0,w,c
  2127   000A1C                     u960:
  2128   000A1C  ECAA  F002         	call	_LCD_write_data
  2129   000A20                     
  2130                           ;LCD.c: 397:     }
  2131   000A20  2A08               	incf	LCD_write_string@i^0,f,c
  2132   000A22                     l1622:
  2133   000A22  5008               	movf	LCD_write_string@i^0,w,c
  2134   000A24  2404               	addwf	LCD_write_string@string^0,w,c
  2135   000A26  6E06               	movwf	??_LCD_write_string^0,c
  2136   000A28  0E00               	movlw	0
  2137   000A2A  2005               	addwfc	(LCD_write_string@string+1)^0,w,c
  2138   000A2C  6E07               	movwf	(??_LCD_write_string+1)^0,c
  2139   000A2E  C006  FFF6         	movff	??_LCD_write_string,tblptrl
  2140   000A32  C007  FFF7         	movff	??_LCD_write_string+1,tblptrh
  2141   000A36  6AF8               	clrf	tblptru,c
  2142   000A38  0E01               	movlw	(high __ramtop+-1)
  2143   000A3A  64F7               	cpfsgt	tblptrh,c
  2144   000A3C  D003               	bra	u977
  2145   000A3E  0008               	tblrd		*
  2146   000A40  50F5               	movf	tablat,w,c
  2147   000A42  D005               	bra	u970
  2148   000A44                     u977:
  2149   000A44  CFF6 FFE9          	movff	tblptrl,fsr0l
  2150   000A48  CFF7 FFEA          	movff	tblptrh,fsr0h
  2151   000A4C  50EF               	movf	indf0,w,c
  2152   000A4E                     u970:
  2153   000A4E  0900               	iorlw	0
  2154   000A50  A4D8               	btfss	status,2,c
  2155   000A52  EF2D  F005         	goto	u981
  2156   000A56  EF2F  F005         	goto	u980
  2157   000A5A                     u981:
  2158   000A5A  EFF8  F004         	goto	l1618
  2159   000A5E                     u980:
  2160   000A5E  0012               	return		;funcret
  2161   000A60                     __end_of_LCD_write_string:
  2162                           	callstack 0
  2163                           
  2164 ;; *************** function _LCD_write_char *****************
  2165 ;; Defined at:
  2166 ;;		line 404 in file "LCD.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  character       1    wreg     unsigned char 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  character       1    3[COMRAM] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1
  2180 ;;      Params:         0       0       0
  2181 ;;      Locals:         1       0       0
  2182 ;;      Temps:          0       0       0
  2183 ;;      Totals:         1       0       0
  2184 ;;Total ram usage:        1 bytes
  2185 ;; Hardware stack levels used: 1
  2186 ;; Hardware stack levels required when called: 2
  2187 ;; This function calls:
  2188 ;;		_LCD_write_data
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;;		_LCD_write_float
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text10
  2196   000C64                     __ptext10:
  2197                           	callstack 0
  2198   000C64                     _LCD_write_char:
  2199                           	callstack 28
  2200                           
  2201                           ;incstack = 0
  2202                           ;LCD_write_char@character stored from wreg
  2203   000C64  6E04               	movwf	LCD_write_char@character^0,c
  2204   000C66                     
  2205                           ;LCD.c: 407:     LCD_write_data(character);
  2206   000C66  5004               	movf	LCD_write_char@character^0,w,c
  2207   000C68  ECAA  F002         	call	_LCD_write_data
  2208   000C6C  0012               	return		;funcret
  2209   000C6E                     __end_of_LCD_write_char:
  2210                           	callstack 0
  2211                           
  2212 ;; *************** function _LCD_write_data *****************
  2213 ;; Defined at:
  2214 ;;		line 104 in file "LCD.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  data            1    wreg     unsigned char 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  data            1    2[COMRAM] unsigned char 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, status,2, status,0, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1
  2228 ;;      Params:         0       0       0
  2229 ;;      Locals:         1       0       0
  2230 ;;      Temps:          2       0       0
  2231 ;;      Totals:         3       0       0
  2232 ;;Total ram usage:        3 bytes
  2233 ;; Hardware stack levels used: 1
  2234 ;; Hardware stack levels required when called: 1
  2235 ;; This function calls:
  2236 ;;		_LCD_pulse_clock
  2237 ;; This function is called by:
  2238 ;;		_LCD_write_string
  2239 ;;		_LCD_write_char
  2240 ;;		_LCD_add_character
  2241 ;;		_LCD_write_variable
  2242 ;;		_LCD_write_float
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text11
  2247   000554                     __ptext11:
  2248                           	callstack 0
  2249   000554                     _LCD_write_data:
  2250                           	callstack 28
  2251                           
  2252                           ;incstack = 0
  2253                           ;LCD_write_data@data stored from wreg
  2254   000554  6E03               	movwf	LCD_write_data@data^0,c
  2255   000556                     
  2256                           ;LCD.c: 106:     LATDbits.LATD2 = 1;
  2257   000556  848C               	bsf	140,2,c	;volatile
  2258   000558                     
  2259                           ;LCD.c: 109:     LATDbits.LATD7 = (data & 0b10000000) >> 7;
  2260   000558  6A01               	clrf	??_LCD_write_data^0,c
  2261   00055A  AE03               	btfss	LCD_write_data@data^0,7,c
  2262   00055C  D001               	bra	u315
  2263   00055E  2A01               	incf	??_LCD_write_data^0,f,c
  2264   000560                     u315:
  2265   000560  0E01               	movlw	1
  2266   000562  1601               	andwf	??_LCD_write_data^0,f,c
  2267   000564  3201               	rrcf	??_LCD_write_data^0,f,c
  2268   000566  3201               	rrcf	??_LCD_write_data^0,f,c
  2269   000568  508C               	movf	140,w,c	;volatile
  2270   00056A  1801               	xorwf	??_LCD_write_data^0,w,c
  2271   00056C  0B7F               	andlw	-129
  2272   00056E  1801               	xorwf	??_LCD_write_data^0,w,c
  2273   000570  6E8C               	movwf	140,c	;volatile
  2274                           
  2275                           ;LCD.c: 110:     LATDbits.LATD6 = (data & 0b01000000) >> 6;
  2276   000572  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2277   000576  0E06               	movlw	6
  2278   000578  6E02               	movwf	(??_LCD_write_data+1)^0,c
  2279   00057A                     u325:
  2280   00057A  90D8               	bcf	status,0,c
  2281   00057C  3201               	rrcf	??_LCD_write_data^0,f,c
  2282   00057E  2E02               	decfsz	(??_LCD_write_data+1)^0,f,c
  2283   000580  EFBD  F002         	goto	u325
  2284   000584  0E01               	movlw	1
  2285   000586  1601               	andwf	??_LCD_write_data^0,f,c
  2286   000588  3A01               	swapf	??_LCD_write_data^0,f,c
  2287   00058A  4601               	rlncf	??_LCD_write_data^0,f,c
  2288   00058C  4601               	rlncf	??_LCD_write_data^0,f,c
  2289   00058E  508C               	movf	140,w,c	;volatile
  2290   000590  1801               	xorwf	??_LCD_write_data^0,w,c
  2291   000592  0BBF               	andlw	-65
  2292   000594  1801               	xorwf	??_LCD_write_data^0,w,c
  2293   000596  6E8C               	movwf	140,c	;volatile
  2294                           
  2295                           ;LCD.c: 111:     LATDbits.LATD5 = (data & 0b00100000) >> 5;
  2296   000598  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2297   00059C  0E05               	movlw	5
  2298   00059E  6E02               	movwf	(??_LCD_write_data+1)^0,c
  2299   0005A0                     u335:
  2300   0005A0  90D8               	bcf	status,0,c
  2301   0005A2  3201               	rrcf	??_LCD_write_data^0,f,c
  2302   0005A4  2E02               	decfsz	(??_LCD_write_data+1)^0,f,c
  2303   0005A6  EFD0  F002         	goto	u335
  2304   0005AA  0E01               	movlw	1
  2305   0005AC  1601               	andwf	??_LCD_write_data^0,f,c
  2306   0005AE  3A01               	swapf	??_LCD_write_data^0,f,c
  2307   0005B0  4601               	rlncf	??_LCD_write_data^0,f,c
  2308   0005B2  508C               	movf	140,w,c	;volatile
  2309   0005B4  1801               	xorwf	??_LCD_write_data^0,w,c
  2310   0005B6  0BDF               	andlw	-33
  2311   0005B8  1801               	xorwf	??_LCD_write_data^0,w,c
  2312   0005BA  6E8C               	movwf	140,c	;volatile
  2313                           
  2314                           ;LCD.c: 112:     LATDbits.LATD4 = (data & 0b00010000) >> 4;
  2315   0005BC  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2316   0005C0  3A01               	swapf	??_LCD_write_data^0,f,c
  2317   0005C2  0E0F               	movlw	15
  2318   0005C4  1601               	andwf	??_LCD_write_data^0,f,c
  2319   0005C6  0E01               	movlw	1
  2320   0005C8  1601               	andwf	??_LCD_write_data^0,f,c
  2321   0005CA  3A01               	swapf	??_LCD_write_data^0,f,c
  2322   0005CC  508C               	movf	140,w,c	;volatile
  2323   0005CE  1801               	xorwf	??_LCD_write_data^0,w,c
  2324   0005D0  0BEF               	andlw	-17
  2325   0005D2  1801               	xorwf	??_LCD_write_data^0,w,c
  2326   0005D4  6E8C               	movwf	140,c	;volatile
  2327   0005D6                     
  2328                           ;LCD.c: 115:     LCD_pulse_clock();
  2329   0005D6  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2330   0005DA                     
  2331                           ;LCD.c: 118:     LATDbits.LATD7 = (data & 0b00001000) >> 3;
  2332   0005DA  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2333   0005DE  90D8               	bcf	status,0,c
  2334   0005E0  3201               	rrcf	??_LCD_write_data^0,f,c
  2335   0005E2  90D8               	bcf	status,0,c
  2336   0005E4  3201               	rrcf	??_LCD_write_data^0,f,c
  2337   0005E6  90D8               	bcf	status,0,c
  2338   0005E8  3201               	rrcf	??_LCD_write_data^0,f,c
  2339   0005EA  0E01               	movlw	1
  2340   0005EC  1601               	andwf	??_LCD_write_data^0,f,c
  2341   0005EE  3201               	rrcf	??_LCD_write_data^0,f,c
  2342   0005F0  3201               	rrcf	??_LCD_write_data^0,f,c
  2343   0005F2  508C               	movf	140,w,c	;volatile
  2344   0005F4  1801               	xorwf	??_LCD_write_data^0,w,c
  2345   0005F6  0B7F               	andlw	-129
  2346   0005F8  1801               	xorwf	??_LCD_write_data^0,w,c
  2347   0005FA  6E8C               	movwf	140,c	;volatile
  2348   0005FC                     
  2349                           ;LCD.c: 119:     LATDbits.LATD6 = (data & 0b00000100) >> 2;
  2350   0005FC  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2351   000600  90D8               	bcf	status,0,c
  2352   000602  3201               	rrcf	??_LCD_write_data^0,f,c
  2353   000604  90D8               	bcf	status,0,c
  2354   000606  3201               	rrcf	??_LCD_write_data^0,f,c
  2355   000608  0E01               	movlw	1
  2356   00060A  1601               	andwf	??_LCD_write_data^0,f,c
  2357   00060C  3A01               	swapf	??_LCD_write_data^0,f,c
  2358   00060E  4601               	rlncf	??_LCD_write_data^0,f,c
  2359   000610  4601               	rlncf	??_LCD_write_data^0,f,c
  2360   000612  508C               	movf	140,w,c	;volatile
  2361   000614  1801               	xorwf	??_LCD_write_data^0,w,c
  2362   000616  0BBF               	andlw	-65
  2363   000618  1801               	xorwf	??_LCD_write_data^0,w,c
  2364   00061A  6E8C               	movwf	140,c	;volatile
  2365   00061C                     
  2366                           ;LCD.c: 120:     LATDbits.LATD5 = (data & 0b00000010) >> 1;
  2367   00061C  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2368   000620  90D8               	bcf	status,0,c
  2369   000622  3201               	rrcf	??_LCD_write_data^0,f,c
  2370   000624  0E01               	movlw	1
  2371   000626  1601               	andwf	??_LCD_write_data^0,f,c
  2372   000628  3A01               	swapf	??_LCD_write_data^0,f,c
  2373   00062A  4601               	rlncf	??_LCD_write_data^0,f,c
  2374   00062C  508C               	movf	140,w,c	;volatile
  2375   00062E  1801               	xorwf	??_LCD_write_data^0,w,c
  2376   000630  0BDF               	andlw	-33
  2377   000632  1801               	xorwf	??_LCD_write_data^0,w,c
  2378   000634  6E8C               	movwf	140,c	;volatile
  2379   000636                     
  2380                           ;LCD.c: 121:     LATDbits.LATD4 = (data & 0b00000001) ;
  2381   000636  C003  F001         	movff	LCD_write_data@data,??_LCD_write_data
  2382   00063A  0E01               	movlw	1
  2383   00063C  1601               	andwf	??_LCD_write_data^0,f,c
  2384   00063E  3A01               	swapf	??_LCD_write_data^0,f,c
  2385   000640  508C               	movf	140,w,c	;volatile
  2386   000642  1801               	xorwf	??_LCD_write_data^0,w,c
  2387   000644  0BEF               	andlw	-17
  2388   000646  1801               	xorwf	??_LCD_write_data^0,w,c
  2389   000648  6E8C               	movwf	140,c	;volatile
  2390   00064A                     
  2391                           ;LCD.c: 124:     LCD_pulse_clock();
  2392   00064A  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2393   00064E  0012               	return		;funcret
  2394   000650                     __end_of_LCD_write_data:
  2395                           	callstack 0
  2396                           
  2397 ;; *************** function _LCD_init *****************
  2398 ;; Defined at:
  2399 ;;		line 136 in file "LCD.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2, status,0, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1
  2413 ;;      Params:         0       0       0
  2414 ;;      Locals:         0       0       0
  2415 ;;      Temps:          2       0       0
  2416 ;;      Totals:         2       0       0
  2417 ;;Total ram usage:        2 bytes
  2418 ;; Hardware stack levels used: 1
  2419 ;; Hardware stack levels required when called: 3
  2420 ;; This function calls:
  2421 ;;		_LCD_clear
  2422 ;;		_LCD_pulse_clock
  2423 ;;		_LCD_write_command
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text12
  2430   000966                     __ptext12:
  2431                           	callstack 0
  2432   000966                     _LCD_init:
  2433                           	callstack 27
  2434   000966                     
  2435                           ;LCD.c: 139:     TRISDbits.TRISD2 = 0; LATDbits.LATD2 = 0;
  2436   000966  9495               	bcf	149,2,c	;volatile
  2437   000968  948C               	bcf	140,2,c	;volatile
  2438                           
  2439                           ;LCD.c: 140:     TRISDbits.TRISD3 = 0; LATDbits.LATD3 = 0;
  2440   00096A  9695               	bcf	149,3,c	;volatile
  2441   00096C  968C               	bcf	140,3,c	;volatile
  2442                           
  2443                           ;LCD.c: 141:     TRISDbits.TRISD4 = 0; LATDbits.LATD4 = 0;
  2444   00096E  9895               	bcf	149,4,c	;volatile
  2445   000970  988C               	bcf	140,4,c	;volatile
  2446                           
  2447                           ;LCD.c: 142:     TRISDbits.TRISD5 = 0; LATDbits.LATD5 = 0;
  2448   000972  9A95               	bcf	149,5,c	;volatile
  2449   000974  9A8C               	bcf	140,5,c	;volatile
  2450                           
  2451                           ;LCD.c: 143:     TRISDbits.TRISD6 = 0; LATDbits.LATD6 = 0;
  2452   000976  9C95               	bcf	149,6,c	;volatile
  2453   000978  9C8C               	bcf	140,6,c	;volatile
  2454                           
  2455                           ;LCD.c: 144:     TRISDbits.TRISD7 = 0; LATDbits.LATD7 = 0;
  2456   00097A  9E95               	bcf	149,7,c	;volatile
  2457   00097C  9E8C               	bcf	140,7,c	;volatile
  2458   00097E                     
  2459                           ;LCD.c: 151:     _delay((unsigned long)((60)*(64000000/4000.0)));
  2460   00097E  0E05               	movlw	5
  2461   000980  6E06               	movwf	(??_LCD_init+1)^0,c
  2462   000982  0EDF               	movlw	223
  2463   000984  6E05               	movwf	??_LCD_init^0,c
  2464   000986  0EBC               	movlw	188
  2465   000988                     u1027:
  2466   000988  2EE8               	decfsz	wreg,f,c
  2467   00098A  D7FE               	bra	u1027
  2468   00098C  2E05               	decfsz	??_LCD_init^0,f,c
  2469   00098E  D7FC               	bra	u1027
  2470   000990  2E06               	decfsz	(??_LCD_init+1)^0,f,c
  2471   000992  D7FA               	bra	u1027
  2472   000994                     
  2473                           ;LCD.c: 154:     LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LA
      +                          TD4 = 1;
  2474   000994  9E8C               	bcf	140,7,c	;volatile
  2475   000996  9C8C               	bcf	140,6,c	;volatile
  2476   000998  8A8C               	bsf	140,5,c	;volatile
  2477   00099A  888C               	bsf	140,4,c	;volatile
  2478   00099C                     
  2479                           ;LCD.c: 157:     LCD_pulse_clock();
  2480   00099C  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2481   0009A0                     
  2482                           ;LCD.c: 160:     _delay((unsigned long)((6)*(64000000/4000.0)));
  2483   0009A0  0E7D               	movlw	125
  2484   0009A2  6E05               	movwf	??_LCD_init^0,c
  2485   0009A4  0EAC               	movlw	172
  2486   0009A6                     u1037:
  2487   0009A6  2EE8               	decfsz	wreg,f,c
  2488   0009A8  D7FE               	bra	u1037
  2489   0009AA  2E05               	decfsz	??_LCD_init^0,f,c
  2490   0009AC  D7FC               	bra	u1037
  2491                           
  2492                           ;LCD.c: 163:     LCD_pulse_clock();
  2493   0009AE  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2494   0009B2                     
  2495                           ;LCD.c: 166:     _delay((unsigned long)((150)*(64000000/4000000.0)));
  2496   0009B2  0E04               	movlw	4
  2497   0009B4  6E05               	movwf	??_LCD_init^0,c
  2498   0009B6  0E1C               	movlw	28
  2499   0009B8                     u1047:
  2500   0009B8  2EE8               	decfsz	wreg,f,c
  2501   0009BA  D7FE               	bra	u1047
  2502   0009BC  2E05               	decfsz	??_LCD_init^0,f,c
  2503   0009BE  D7FC               	bra	u1047
  2504   0009C0  D000               	nop2	
  2505   0009C2                     
  2506                           ;LCD.c: 169:     LCD_pulse_clock();
  2507   0009C2  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2508   0009C6                     
  2509                           ;LCD.c: 172:     LATDbits.LATD7 = 0; LATDbits.LATD6 = 0; LATDbits.LATD5 = 1; LATDbits.LA
      +                          TD4 = 0;
  2510   0009C6  9E8C               	bcf	140,7,c	;volatile
  2511   0009C8  9C8C               	bcf	140,6,c	;volatile
  2512   0009CA  8A8C               	bsf	140,5,c	;volatile
  2513   0009CC  988C               	bcf	140,4,c	;volatile
  2514   0009CE                     
  2515                           ;LCD.c: 175:     LCD_pulse_clock();
  2516   0009CE  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2517   0009D2                     
  2518                           ;LCD.c: 178:     LCD_write_command(0x28);
  2519   0009D2  0E28               	movlw	40
  2520   0009D4  EC28  F003         	call	_LCD_write_command
  2521   0009D8                     
  2522                           ;LCD.c: 179:     LCD_write_command(LCD_display_control);
  2523   0009D8  5067               	movf	_LCD_display_control^0,w,c
  2524   0009DA  EC28  F003         	call	_LCD_write_command
  2525   0009DE                     
  2526                           ;LCD.c: 180:     LCD_write_command(LCD_entry_mode);
  2527   0009DE  5066               	movf	_LCD_entry_mode^0,w,c
  2528   0009E0  EC28  F003         	call	_LCD_write_command
  2529   0009E4                     
  2530                           ;LCD.c: 181:     LCD_clear();
  2531   0009E4  EC1C  F006         	call	_LCD_clear	;wreg free
  2532   0009E8  0012               	return		;funcret
  2533   0009EA                     __end_of_LCD_init:
  2534                           	callstack 0
  2535                           
  2536 ;; *************** function _LCD_clear *****************
  2537 ;; Defined at:
  2538 ;;		line 278 in file "LCD.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg, status,2, status,0, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1
  2552 ;;      Params:         0       0       0
  2553 ;;      Locals:         0       0       0
  2554 ;;      Temps:          1       0       0
  2555 ;;      Totals:         1       0       0
  2556 ;;Total ram usage:        1 bytes
  2557 ;; Hardware stack levels used: 1
  2558 ;; Hardware stack levels required when called: 2
  2559 ;; This function calls:
  2560 ;;		_LCD_write_command
  2561 ;; This function is called by:
  2562 ;;		_LCD_init
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text13
  2567   000C38                     __ptext13:
  2568                           	callstack 0
  2569   000C38                     _LCD_clear:
  2570                           	callstack 27
  2571   000C38                     
  2572                           ;LCD.c: 281:     LCD_write_command(0x01);
  2573   000C38  0E01               	movlw	1
  2574   000C3A  EC28  F003         	call	_LCD_write_command
  2575   000C3E                     
  2576                           ;LCD.c: 284:     _delay((unsigned long)(((2300-60))*(64000000/4000000.0)));
  2577   000C3E  0E2F               	movlw	47
  2578   000C40  6E04               	movwf	??_LCD_clear^0,c
  2579   000C42  0E8A               	movlw	138
  2580   000C44                     u1057:
  2581   000C44  2EE8               	decfsz	wreg,f,c
  2582   000C46  D7FE               	bra	u1057
  2583   000C48  2E04               	decfsz	??_LCD_clear^0,f,c
  2584   000C4A  D7FC               	bra	u1057
  2585   000C4C  D000               	nop2	
  2586   000C4E                     
  2587                           ;LCD.c: 287:     LCD_write_command(LCD_entry_mode);
  2588   000C4E  5066               	movf	_LCD_entry_mode^0,w,c
  2589   000C50  EC28  F003         	call	_LCD_write_command
  2590   000C54  0012               	return		;funcret
  2591   000C56                     __end_of_LCD_clear:
  2592                           	callstack 0
  2593                           
  2594 ;; *************** function _LCD_cursor_set *****************
  2595 ;; Defined at:
  2596 ;;		line 189 in file "LCD.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  row             1    wreg     unsigned char 
  2599 ;;  column          1    3[COMRAM] unsigned char 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  row             1    4[COMRAM] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1
  2611 ;;      Params:         1       0       0
  2612 ;;      Locals:         1       0       0
  2613 ;;      Temps:          0       0       0
  2614 ;;      Totals:         2       0       0
  2615 ;;Total ram usage:        2 bytes
  2616 ;; Hardware stack levels used: 1
  2617 ;; Hardware stack levels required when called: 2
  2618 ;; This function calls:
  2619 ;;		_LCD_write_command
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;;		_LCD_add_character
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text14
  2627   000A60                     __ptext14:
  2628                           	callstack 0
  2629   000A60                     _LCD_cursor_set:
  2630                           	callstack 28
  2631                           
  2632                           ;incstack = 0
  2633                           ;LCD_cursor_set@row stored from wreg
  2634   000A60  6E05               	movwf	LCD_cursor_set@row^0,c
  2635   000A62                     
  2636                           ;LCD.c: 192:     if(row == 1) column += (0x80-1);
  2637   000A62  0405               	decf	LCD_cursor_set@row^0,w,c
  2638   000A64  A4D8               	btfss	status,2,c
  2639   000A66  EF37  F005         	goto	u921
  2640   000A6A  EF39  F005         	goto	u920
  2641   000A6E                     u921:
  2642   000A6E  EF3B  F005         	goto	l29
  2643   000A72                     u920:
  2644   000A72  0E7F               	movlw	127
  2645   000A74  2604               	addwf	LCD_cursor_set@column^0,f,c
  2646   000A76                     l29:
  2647                           
  2648                           ;LCD.c: 193:     if(row == 2) column += (0xC0-1);
  2649   000A76  0E02               	movlw	2
  2650   000A78  1805               	xorwf	LCD_cursor_set@row^0,w,c
  2651   000A7A  A4D8               	btfss	status,2,c
  2652   000A7C  EF42  F005         	goto	u931
  2653   000A80  EF44  F005         	goto	u930
  2654   000A84                     u931:
  2655   000A84  EF46  F005         	goto	l30
  2656   000A88                     u930:
  2657   000A88  0EBF               	movlw	191
  2658   000A8A  2604               	addwf	LCD_cursor_set@column^0,f,c
  2659   000A8C                     l30:
  2660                           
  2661                           ;LCD.c: 194:     if(row == 3) column += (0x80+19);
  2662   000A8C  0E03               	movlw	3
  2663   000A8E  1805               	xorwf	LCD_cursor_set@row^0,w,c
  2664   000A90  A4D8               	btfss	status,2,c
  2665   000A92  EF4D  F005         	goto	u941
  2666   000A96  EF4F  F005         	goto	u940
  2667   000A9A                     u941:
  2668   000A9A  EF51  F005         	goto	l31
  2669   000A9E                     u940:
  2670   000A9E  0E93               	movlw	147
  2671   000AA0  2604               	addwf	LCD_cursor_set@column^0,f,c
  2672   000AA2                     l31:
  2673                           
  2674                           ;LCD.c: 195:     if(row == 4) column += (0xC0+19);
  2675   000AA2  0E04               	movlw	4
  2676   000AA4  1805               	xorwf	LCD_cursor_set@row^0,w,c
  2677   000AA6  A4D8               	btfss	status,2,c
  2678   000AA8  EF58  F005         	goto	u951
  2679   000AAC  EF5A  F005         	goto	u950
  2680   000AB0                     u951:
  2681   000AB0  EF5C  F005         	goto	l1614
  2682   000AB4                     u950:
  2683   000AB4  0ED3               	movlw	211
  2684   000AB6  2604               	addwf	LCD_cursor_set@column^0,f,c
  2685   000AB8                     l1614:
  2686                           
  2687                           ;LCD.c: 198:    LCD_write_command(column);
  2688   000AB8  5004               	movf	LCD_cursor_set@column^0,w,c
  2689   000ABA  EC28  F003         	call	_LCD_write_command
  2690   000ABE  0012               	return		;funcret
  2691   000AC0                     __end_of_LCD_cursor_set:
  2692                           	callstack 0
  2693                           
  2694 ;; *************** function _LCD_write_command *****************
  2695 ;; Defined at:
  2696 ;;		line 76 in file "LCD.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  command         1    wreg     unsigned char 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  command         1    2[COMRAM] unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1
  2710 ;;      Params:         0       0       0
  2711 ;;      Locals:         1       0       0
  2712 ;;      Temps:          2       0       0
  2713 ;;      Totals:         3       0       0
  2714 ;;Total ram usage:        3 bytes
  2715 ;; Hardware stack levels used: 1
  2716 ;; Hardware stack levels required when called: 1
  2717 ;; This function calls:
  2718 ;;		_LCD_pulse_clock
  2719 ;; This function is called by:
  2720 ;;		_LCD_init
  2721 ;;		_LCD_cursor_set
  2722 ;;		_LCD_clear
  2723 ;;		_LCD_cursor_increment
  2724 ;;		_LCD_cursor_decrement
  2725 ;;		_LCD_configure_lcd_display
  2726 ;;		_LCD_configure_cursor_display
  2727 ;;		_LCD_configure_cursor_blink
  2728 ;;		_LCD_shift_reset
  2729 ;;		_LCD_shift_left
  2730 ;;		_LCD_shift_right
  2731 ;;		_LCD_configure_entry_id
  2732 ;;		_LCD_configure_entry_shift
  2733 ;;		_LCD_add_character
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text15
  2738   000650                     __ptext15:
  2739                           	callstack 0
  2740   000650                     _LCD_write_command:
  2741                           	callstack 28
  2742                           
  2743                           ;incstack = 0
  2744                           ;LCD_write_command@command stored from wreg
  2745   000650  6E03               	movwf	LCD_write_command@command^0,c
  2746   000652                     
  2747                           ;LCD.c: 78:     LATDbits.LATD2 = 0;
  2748   000652  948C               	bcf	140,2,c	;volatile
  2749   000654                     
  2750                           ;LCD.c: 81:     LATDbits.LATD7 = (command & 0b10000000) >> 7;
  2751   000654  6A01               	clrf	??_LCD_write_command^0,c
  2752   000656  AE03               	btfss	LCD_write_command@command^0,7,c
  2753   000658  D001               	bra	u185
  2754   00065A  2A01               	incf	??_LCD_write_command^0,f,c
  2755   00065C                     u185:
  2756   00065C  0E01               	movlw	1
  2757   00065E  1601               	andwf	??_LCD_write_command^0,f,c
  2758   000660  3201               	rrcf	??_LCD_write_command^0,f,c
  2759   000662  3201               	rrcf	??_LCD_write_command^0,f,c
  2760   000664  508C               	movf	140,w,c	;volatile
  2761   000666  1801               	xorwf	??_LCD_write_command^0,w,c
  2762   000668  0B7F               	andlw	-129
  2763   00066A  1801               	xorwf	??_LCD_write_command^0,w,c
  2764   00066C  6E8C               	movwf	140,c	;volatile
  2765                           
  2766                           ;LCD.c: 82:     LATDbits.LATD6 = (command & 0b01000000) >> 6;
  2767   00066E  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2768   000672  0E06               	movlw	6
  2769   000674  6E02               	movwf	(??_LCD_write_command+1)^0,c
  2770   000676                     u195:
  2771   000676  90D8               	bcf	status,0,c
  2772   000678  3201               	rrcf	??_LCD_write_command^0,f,c
  2773   00067A  2E02               	decfsz	(??_LCD_write_command+1)^0,f,c
  2774   00067C  EF3B  F003         	goto	u195
  2775   000680  0E01               	movlw	1
  2776   000682  1601               	andwf	??_LCD_write_command^0,f,c
  2777   000684  3A01               	swapf	??_LCD_write_command^0,f,c
  2778   000686  4601               	rlncf	??_LCD_write_command^0,f,c
  2779   000688  4601               	rlncf	??_LCD_write_command^0,f,c
  2780   00068A  508C               	movf	140,w,c	;volatile
  2781   00068C  1801               	xorwf	??_LCD_write_command^0,w,c
  2782   00068E  0BBF               	andlw	-65
  2783   000690  1801               	xorwf	??_LCD_write_command^0,w,c
  2784   000692  6E8C               	movwf	140,c	;volatile
  2785                           
  2786                           ;LCD.c: 83:     LATDbits.LATD5 = (command & 0b00100000) >> 5;
  2787   000694  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2788   000698  0E05               	movlw	5
  2789   00069A  6E02               	movwf	(??_LCD_write_command+1)^0,c
  2790   00069C                     u205:
  2791   00069C  90D8               	bcf	status,0,c
  2792   00069E  3201               	rrcf	??_LCD_write_command^0,f,c
  2793   0006A0  2E02               	decfsz	(??_LCD_write_command+1)^0,f,c
  2794   0006A2  EF4E  F003         	goto	u205
  2795   0006A6  0E01               	movlw	1
  2796   0006A8  1601               	andwf	??_LCD_write_command^0,f,c
  2797   0006AA  3A01               	swapf	??_LCD_write_command^0,f,c
  2798   0006AC  4601               	rlncf	??_LCD_write_command^0,f,c
  2799   0006AE  508C               	movf	140,w,c	;volatile
  2800   0006B0  1801               	xorwf	??_LCD_write_command^0,w,c
  2801   0006B2  0BDF               	andlw	-33
  2802   0006B4  1801               	xorwf	??_LCD_write_command^0,w,c
  2803   0006B6  6E8C               	movwf	140,c	;volatile
  2804                           
  2805                           ;LCD.c: 84:     LATDbits.LATD4 = (command & 0b00010000) >> 4;
  2806   0006B8  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2807   0006BC  3A01               	swapf	??_LCD_write_command^0,f,c
  2808   0006BE  0E0F               	movlw	15
  2809   0006C0  1601               	andwf	??_LCD_write_command^0,f,c
  2810   0006C2  0E01               	movlw	1
  2811   0006C4  1601               	andwf	??_LCD_write_command^0,f,c
  2812   0006C6  3A01               	swapf	??_LCD_write_command^0,f,c
  2813   0006C8  508C               	movf	140,w,c	;volatile
  2814   0006CA  1801               	xorwf	??_LCD_write_command^0,w,c
  2815   0006CC  0BEF               	andlw	-17
  2816   0006CE  1801               	xorwf	??_LCD_write_command^0,w,c
  2817   0006D0  6E8C               	movwf	140,c	;volatile
  2818   0006D2                     
  2819                           ;LCD.c: 87:     LCD_pulse_clock();
  2820   0006D2  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2821   0006D6                     
  2822                           ;LCD.c: 90:     LATDbits.LATD7 = (command & 0b00001000) >> 3;
  2823   0006D6  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2824   0006DA  90D8               	bcf	status,0,c
  2825   0006DC  3201               	rrcf	??_LCD_write_command^0,f,c
  2826   0006DE  90D8               	bcf	status,0,c
  2827   0006E0  3201               	rrcf	??_LCD_write_command^0,f,c
  2828   0006E2  90D8               	bcf	status,0,c
  2829   0006E4  3201               	rrcf	??_LCD_write_command^0,f,c
  2830   0006E6  0E01               	movlw	1
  2831   0006E8  1601               	andwf	??_LCD_write_command^0,f,c
  2832   0006EA  3201               	rrcf	??_LCD_write_command^0,f,c
  2833   0006EC  3201               	rrcf	??_LCD_write_command^0,f,c
  2834   0006EE  508C               	movf	140,w,c	;volatile
  2835   0006F0  1801               	xorwf	??_LCD_write_command^0,w,c
  2836   0006F2  0B7F               	andlw	-129
  2837   0006F4  1801               	xorwf	??_LCD_write_command^0,w,c
  2838   0006F6  6E8C               	movwf	140,c	;volatile
  2839   0006F8                     
  2840                           ;LCD.c: 91:     LATDbits.LATD6 = (command & 0b00000100) >> 2;
  2841   0006F8  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2842   0006FC  90D8               	bcf	status,0,c
  2843   0006FE  3201               	rrcf	??_LCD_write_command^0,f,c
  2844   000700  90D8               	bcf	status,0,c
  2845   000702  3201               	rrcf	??_LCD_write_command^0,f,c
  2846   000704  0E01               	movlw	1
  2847   000706  1601               	andwf	??_LCD_write_command^0,f,c
  2848   000708  3A01               	swapf	??_LCD_write_command^0,f,c
  2849   00070A  4601               	rlncf	??_LCD_write_command^0,f,c
  2850   00070C  4601               	rlncf	??_LCD_write_command^0,f,c
  2851   00070E  508C               	movf	140,w,c	;volatile
  2852   000710  1801               	xorwf	??_LCD_write_command^0,w,c
  2853   000712  0BBF               	andlw	-65
  2854   000714  1801               	xorwf	??_LCD_write_command^0,w,c
  2855   000716  6E8C               	movwf	140,c	;volatile
  2856   000718                     
  2857                           ;LCD.c: 92:     LATDbits.LATD5 = (command & 0b00000010) >> 1;
  2858   000718  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2859   00071C  90D8               	bcf	status,0,c
  2860   00071E  3201               	rrcf	??_LCD_write_command^0,f,c
  2861   000720  0E01               	movlw	1
  2862   000722  1601               	andwf	??_LCD_write_command^0,f,c
  2863   000724  3A01               	swapf	??_LCD_write_command^0,f,c
  2864   000726  4601               	rlncf	??_LCD_write_command^0,f,c
  2865   000728  508C               	movf	140,w,c	;volatile
  2866   00072A  1801               	xorwf	??_LCD_write_command^0,w,c
  2867   00072C  0BDF               	andlw	-33
  2868   00072E  1801               	xorwf	??_LCD_write_command^0,w,c
  2869   000730  6E8C               	movwf	140,c	;volatile
  2870   000732                     
  2871                           ;LCD.c: 93:     LATDbits.LATD4 = (command & 0b00000001) ;
  2872   000732  C003  F001         	movff	LCD_write_command@command,??_LCD_write_command
  2873   000736  0E01               	movlw	1
  2874   000738  1601               	andwf	??_LCD_write_command^0,f,c
  2875   00073A  3A01               	swapf	??_LCD_write_command^0,f,c
  2876   00073C  508C               	movf	140,w,c	;volatile
  2877   00073E  1801               	xorwf	??_LCD_write_command^0,w,c
  2878   000740  0BEF               	andlw	-17
  2879   000742  1801               	xorwf	??_LCD_write_command^0,w,c
  2880   000744  6E8C               	movwf	140,c	;volatile
  2881   000746                     
  2882                           ;LCD.c: 96:     LCD_pulse_clock();
  2883   000746  EC2B  F006         	call	_LCD_pulse_clock	;wreg free
  2884   00074A  0012               	return		;funcret
  2885   00074C                     __end_of_LCD_write_command:
  2886                           	callstack 0
  2887                           
  2888 ;; *************** function _LCD_pulse_clock *****************
  2889 ;; Defined at:
  2890 ;;		line 64 in file "LCD.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;		None
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1
  2904 ;;      Params:         0       0       0
  2905 ;;      Locals:         0       0       0
  2906 ;;      Temps:          0       0       0
  2907 ;;      Totals:         0       0       0
  2908 ;;Total ram usage:        0 bytes
  2909 ;; Hardware stack levels used: 1
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_LCD_write_command
  2914 ;;		_LCD_write_data
  2915 ;;		_LCD_init
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text16
  2920   000C56                     __ptext16:
  2921                           	callstack 0
  2922   000C56                     _LCD_pulse_clock:
  2923                           	callstack 28
  2924   000C56                     
  2925                           ;LCD.c: 66:   LATDbits.LATD3 = 1;
  2926   000C56  868C               	bsf	140,3,c	;volatile
  2927   000C58                     
  2928                           ;LCD.c: 67:   _delay((unsigned long)((60)*(64000000/4000000.0)));
  2929   000C58  0EC0               	movlw	192
  2930   000C5A                     u1067:
  2931   000C5A  D000               	nop2	
  2932   000C5C  2EE8               	decfsz	wreg,f,c
  2933   000C5E  D7FD               	bra	u1067
  2934   000C60                     
  2935                           ;LCD.c: 68:   LATDbits.LATD3 = 0;
  2936   000C60  968C               	bcf	140,3,c	;volatile
  2937   000C62  0012               	return		;funcret
  2938   000C64                     __end_of_LCD_pulse_clock:
  2939                           	callstack 0
  2940                           
  2941 ;; *************** function _DHT11_Start *****************
  2942 ;; Defined at:
  2943 ;;		line 7 in file "DHT.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1
  2957 ;;      Params:         0       0       0
  2958 ;;      Locals:         0       0       0
  2959 ;;      Temps:          1       0       0
  2960 ;;      Totals:         1       0       0
  2961 ;;Total ram usage:        1 bytes
  2962 ;; Hardware stack levels used: 1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		_main
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text17
  2971   000C18                     __ptext17:
  2972                           	callstack 0
  2973   000C18                     _DHT11_Start:
  2974                           	callstack 30
  2975   000C18                     
  2976                           ;DHT.c: 9:     TRISAbits.RA0 = 0;
  2977   000C18  9092               	bcf	146,0,c	;volatile
  2978                           
  2979                           ;DHT.c: 10:     LATA0 = 0;
  2980   000C1A  9089               	bcf	3977,0,c	;volatile
  2981   000C1C                     
  2982                           ;DHT.c: 11:     _delay((unsigned long)((18)*(8000000/4000.0)));
  2983   000C1C  0E2F               	movlw	47
  2984   000C1E  6E01               	movwf	??_DHT11_Start^0,c
  2985   000C20  0EC0               	movlw	192
  2986   000C22                     u1077:
  2987   000C22  2EE8               	decfsz	wreg,f,c
  2988   000C24  D7FE               	bra	u1077
  2989   000C26  2E01               	decfsz	??_DHT11_Start^0,f,c
  2990   000C28  D7FC               	bra	u1077
  2991   000C2A                     
  2992                           ;DHT.c: 12:     LATA0 = 1;
  2993   000C2A  8089               	bsf	3977,0,c	;volatile
  2994                           
  2995                           ;DHT.c: 13:     _delay((unsigned long)((20)*(8000000/4000000.0)));
  2996   000C2C  0E0D               	movlw	13
  2997   000C2E                     u1087:
  2998   000C2E  2EE8               	decfsz	wreg,f,c
  2999   000C30  D7FE               	bra	u1087
  3000   000C32  0000               	nop	
  3001   000C34                     
  3002                           ;DHT.c: 14:     TRISAbits.RA0 = 1;
  3003   000C34  8092               	bsf	146,0,c	;volatile
  3004   000C36  0012               	return		;funcret
  3005   000C38                     __end_of_DHT11_Start:
  3006                           	callstack 0
  3007                           
  3008 ;; *************** function _DHT11_ReadData *****************
  3009 ;; Defined at:
  3010 ;;		line 18 in file "DHT.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;  data            1    1[COMRAM] unsigned char 
  3015 ;;  i               1    0[COMRAM] unsigned char 
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      unsigned char 
  3018 ;; Registers used:
  3019 ;;		wreg, status,2, status,0
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1
  3025 ;;      Params:         0       0       0
  3026 ;;      Locals:         2       0       0
  3027 ;;      Temps:          0       0       0
  3028 ;;      Totals:         2       0       0
  3029 ;;Total ram usage:        2 bytes
  3030 ;; Hardware stack levels used: 1
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text18
  3039   000AC0                     __ptext18:
  3040                           	callstack 0
  3041   000AC0                     _DHT11_ReadData:
  3042                           	callstack 30
  3043   000AC0                     
  3044                           ;DHT.c: 20:   char i,data = 0;
  3045   000AC0  6A02               	clrf	DHT11_ReadData@data^0,c
  3046                           
  3047                           ;DHT.c: 21:     for(i=0;i<8;i++)
  3048   000AC2  6A01               	clrf	DHT11_ReadData@i^0,c
  3049   000AC4                     l166:
  3050   000AC4  A080               	btfss	128,0,c	;volatile
  3051   000AC6  EF67  F005         	goto	u501
  3052   000ACA  EF69  F005         	goto	u500
  3053   000ACE                     u501:
  3054   000ACE  EF62  F005         	goto	l166
  3055   000AD2                     u500:
  3056   000AD2                     
  3057                           ;DHT.c: 24:         _delay((unsigned long)((30)*(8000000/4000000.0)));
  3058   000AD2  0E14               	movlw	20
  3059   000AD4                     u1097:
  3060   000AD4  2EE8               	decfsz	wreg,f,c
  3061   000AD6  D7FE               	bra	u1097
  3062   000AD8                     
  3063                           ;DHT.c: 25:         if(PORTAbits.RA0 & 1)
  3064   000AD8  A080               	btfss	128,0,c	;volatile
  3065   000ADA  EF71  F005         	goto	u511
  3066   000ADE  EF73  F005         	goto	u510
  3067   000AE2                     u511:
  3068   000AE2  EF77  F005         	goto	l1276
  3069   000AE6                     u510:
  3070   000AE6                     
  3071                           ;DHT.c: 26:           data = ((data<<1) | 1);
  3072   000AE6  80D8               	bsf	status,0,c
  3073   000AE8  3602               	rlcf	DHT11_ReadData@data^0,f,c
  3074   000AEA  EF7A  F005         	goto	l171
  3075   000AEE                     l1276:
  3076                           
  3077                           ;DHT.c: 28:           data = (data<<1);
  3078   000AEE  5002               	movf	DHT11_ReadData@data^0,w,c
  3079   000AF0  2402               	addwf	DHT11_ReadData@data^0,w,c
  3080   000AF2  6E02               	movwf	DHT11_ReadData@data^0,c
  3081   000AF4                     l171:
  3082   000AF4  B080               	btfsc	128,0,c	;volatile
  3083   000AF6  EF7F  F005         	goto	u521
  3084   000AFA  EF81  F005         	goto	u520
  3085   000AFE                     u521:
  3086   000AFE  EF7A  F005         	goto	l171
  3087   000B02                     u520:
  3088   000B02                     
  3089                           ;DHT.c: 30:     }
  3090   000B02  2A01               	incf	DHT11_ReadData@i^0,f,c
  3091   000B04  0E07               	movlw	7
  3092   000B06  6401               	cpfsgt	DHT11_ReadData@i^0,c
  3093   000B08  EF88  F005         	goto	u531
  3094   000B0C  EF8A  F005         	goto	u530
  3095   000B10                     u531:
  3096   000B10  EF62  F005         	goto	l166
  3097   000B14                     u530:
  3098   000B14                     
  3099                           ;DHT.c: 31:   return data;
  3100   000B14  5002               	movf	DHT11_ReadData@data^0,w,c
  3101   000B16  0012               	return		;funcret
  3102   000B18                     __end_of_DHT11_ReadData:
  3103                           	callstack 0
  3104                           
  3105 ;; *************** function _DHT11_CheckResponse *****************
  3106 ;; Defined at:
  3107 ;;		line 34 in file "DHT.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		None
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1
  3121 ;;      Params:         0       0       0
  3122 ;;      Locals:         0       0       0
  3123 ;;      Temps:          0       0       0
  3124 ;;      Totals:         0       0       0
  3125 ;;Total ram usage:        0 bytes
  3126 ;; Hardware stack levels used: 1
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_main
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text19
  3135   000BEC                     __ptext19:
  3136                           	callstack 0
  3137   000BEC                     _DHT11_CheckResponse:
  3138                           	callstack 30
  3139   000BEC                     l177:
  3140   000BEC  B080               	btfsc	128,0,c	;volatile
  3141   000BEE  EFFB  F005         	goto	u471
  3142   000BF2  EFFD  F005         	goto	u470
  3143   000BF6                     u471:
  3144   000BF6  EFF6  F005         	goto	l177
  3145   000BFA                     u470:
  3146   000BFA                     l180:
  3147   000BFA  A080               	btfss	128,0,c	;volatile
  3148   000BFC  EF02  F006         	goto	u481
  3149   000C00  EF04  F006         	goto	u480
  3150   000C04                     u481:
  3151   000C04  EFFD  F005         	goto	l180
  3152   000C08                     u480:
  3153   000C08                     l183:
  3154   000C08  B080               	btfsc	128,0,c	;volatile
  3155   000C0A  EF09  F006         	goto	u491
  3156   000C0E  EF0B  F006         	goto	u490
  3157   000C12                     u491:
  3158   000C12  EF04  F006         	goto	l183
  3159   000C16                     u490:
  3160   000C16  0012               	return		;funcret
  3161   000C18                     __end_of_DHT11_CheckResponse:
  3162                           	callstack 0
  3163                           
  3164                           	psect	rparam
  3165   000001                     ___rparam_used  equ	1
  3166   000000                     ___param_bank   equ	0
  3167   000000                     __Lparam        equ	__Lrparam
  3168   000000                     __Hparam        equ	__Hrparam
  3169                           
  3170                           	psect	config
  3171                           
  3172                           ; Padding undefined space
  3173   300000                     	org	3145728
  3174   300000  FF                 	db	255
  3175                           
  3176                           ;Config register CONFIG1H @ 0x300001
  3177                           ;	Oscillator
  3178                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  3179                           ;	Fail-Safe Clock Monitor Enable bit
  3180                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3181                           ;	Internal/External Oscillator Switchover bit
  3182                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3183   300001                     	org	3145729
  3184   300001  08                 	db	8
  3185                           
  3186                           ;Config register CONFIG2L @ 0x300002
  3187                           ;	Power-up Timer Enable bit
  3188                           ;	PWRT = OFF, PWRT disabled
  3189                           ;	Brown-out Reset Enable bits
  3190                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3191                           ;	Brown-out Reset Voltage bits
  3192                           ;	BORV = 3, Minimum Setting
  3193   300002                     	org	3145730
  3194   300002  19                 	db	25
  3195                           
  3196                           ;Config register CONFIG2H @ 0x300003
  3197                           ;	Watchdog Timer Enable bit
  3198                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3199                           ;	Watchdog Timer Postscale Select bits
  3200                           ;	WDTPS = 32768, 1:32768
  3201   300003                     	org	3145731
  3202   300003  1E                 	db	30
  3203                           
  3204                           ; Padding undefined space
  3205   300004                     	org	3145732
  3206   300004  FF                 	db	255
  3207                           
  3208                           ;Config register CONFIG3H @ 0x300005
  3209                           ;	CCP2 MUX bit
  3210                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  3211                           ;	PORTB A/D Enable bit
  3212                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  3213                           ;	Low-Power Timer1 Oscillator Enable bit
  3214                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3215                           ;	MCLR Pin Enable bit
  3216                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3217   300005                     	org	3145733
  3218   300005  83                 	db	131
  3219                           
  3220                           ;Config register CONFIG4L @ 0x300006
  3221                           ;	Stack Full/Underflow Reset Enable bit
  3222                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3223                           ;	Single-Supply ICSP Enable bit
  3224                           ;	LVP = OFF, Single-Supply ICSP disabled
  3225                           ;	Boot Block Size Select bits
  3226                           ;	BBSIZ = BB256, 256 Word
  3227                           ;	Extended Instruction Set Enable bit
  3228                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3229                           ;	Background Debugger Enable bit
  3230                           ;	DEBUG = 0x1, unprogrammed default
  3231   300006                     	org	3145734
  3232   300006  81                 	db	129
  3233                           
  3234                           ; Padding undefined space
  3235   300007                     	org	3145735
  3236   300007  FF                 	db	255
  3237                           
  3238                           ;Config register CONFIG5L @ 0x300008
  3239                           ;	Code Protection bit
  3240                           ;	CP0 = OFF, Block 0 not code-protected
  3241                           ;	Code Protection bit
  3242                           ;	CP1 = OFF, Block 1 not code-protected
  3243   300008                     	org	3145736
  3244   300008  03                 	db	3
  3245                           
  3246                           ;Config register CONFIG5H @ 0x300009
  3247                           ;	Boot Block Code Protection bitProtect Boot
  3248                           ;	CPB = OFF, Boot block not code-protected
  3249                           ;	Data EEPROM Code Protection bit
  3250                           ;	CPD = OFF, Data EEPROM not code-protected
  3251   300009                     	org	3145737
  3252   300009  C0                 	db	192
  3253                           
  3254                           ;Config register CONFIG6L @ 0x30000A
  3255                           ;	Write Protection bit
  3256                           ;	WRT0 = OFF, Block 0 not write-protected
  3257                           ;	Write Protection bit
  3258                           ;	WRT1 = OFF, Block 1 not write-protected
  3259   30000A                     	org	3145738
  3260   30000A  03                 	db	3
  3261                           
  3262                           ;Config register CONFIG6H @ 0x30000B
  3263                           ;	Configuration Register Write Protection bit
  3264                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3265                           ;	Boot Block Write Protection bit
  3266                           ;	WRTB = OFF, Boot block not write-protected
  3267                           ;	Data EEPROM Write Protection bit
  3268                           ;	WRTD = OFF, Data EEPROM not write-protected
  3269   30000B                     	org	3145739
  3270   30000B  E0                 	db	224
  3271                           
  3272                           ;Config register CONFIG7L @ 0x30000C
  3273                           ;	Table Read Protection bit
  3274                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  3275                           ;	Table Read Protection bit
  3276                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  3277   30000C                     	org	3145740
  3278   30000C  03                 	db	3
  3279                           
  3280                           ;Config register CONFIG7H @ 0x30000D
  3281                           ;	Boot Block Table Read Protection bit
  3282                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  3283   30000D                     	org	3145741
  3284   30000D  40                 	db	64
  3285                           tosu	equ	0xFFF
  3286                           tosh	equ	0xFFE
  3287                           tosl	equ	0xFFD
  3288                           stkptr	equ	0xFFC
  3289                           pclatu	equ	0xFFB
  3290                           pclath	equ	0xFFA
  3291                           pcl	equ	0xFF9
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           prodh	equ	0xFF4
  3297                           prodl	equ	0xFF3
  3298                           indf0	equ	0xFEF
  3299                           postinc0	equ	0xFEE
  3300                           postdec0	equ	0xFED
  3301                           preinc0	equ	0xFEC
  3302                           plusw0	equ	0xFEB
  3303                           fsr0h	equ	0xFEA
  3304                           fsr0l	equ	0xFE9
  3305                           wreg	equ	0xFE8
  3306                           indf1	equ	0xFE7
  3307                           postinc1	equ	0xFE6
  3308                           postdec1	equ	0xFE5
  3309                           preinc1	equ	0xFE4
  3310                           plusw1	equ	0xFE3
  3311                           fsr1h	equ	0xFE2
  3312                           fsr1l	equ	0xFE1
  3313                           bsr	equ	0xFE0
  3314                           indf2	equ	0xFDF
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           preinc2	equ	0xFDC
  3318                           plusw2	equ	0xFDB
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        2
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60     103
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    LCD_write_string@string	PTR unsigned char  size(2) Largest target is 10
		 -> main@value(COMRAM[10]), STR_6(CODE[6]), STR_7(CODE[9]), 

    S857$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    S857$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[3]), STR_2(CODE[5]), STR_3(CODE[3]), STR_4(CODE[4]), 
		 -> STR_5(CODE[5]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@value(COMRAM[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[3]), STR_2(CODE[5]), STR_3(CODE[3]), STR_4(CODE[4]), 
		 -> STR_5(CODE[5]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[3]), STR_2(CODE[5]), STR_3(CODE[3]), STR_4(CODE[4]), 
		 -> STR_5(CODE[5]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[3]), STR_2(CODE[5]), STR_3(CODE[3]), STR_4(CODE[4]), 
		 -> STR_5(CODE[5]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _LCD_write_string->_LCD_write_data
    _LCD_write_char->_LCD_write_data
    _LCD_init->_LCD_clear
    _LCD_clear->_LCD_write_command
    _LCD_cursor_set->_LCD_write_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    3154
                                             41 COMRAM    19    19      0
                _DHT11_CheckResponse
                     _DHT11_ReadData
                        _DHT11_Start
                     _LCD_cursor_set
                           _LCD_init
                     _LCD_write_char
                   _LCD_write_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    14      4    1768
                                             25 COMRAM    16    12      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    1559
                                             21 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    1434
                                             10 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     230
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     302
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_write_string                                     5     3      2     217
                                              3 COMRAM     5     3      2
                     _LCD_write_data
 ---------------------------------------------------------------------------------
 (1) _LCD_write_char                                       1     1      0     135
                                              3 COMRAM     1     1      0
                     _LCD_write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_write_data                                       3     3      0     120
                                              0 COMRAM     3     3      0
                    _LCD_pulse_clock
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0     240
                                              4 COMRAM     2     2      0
                          _LCD_clear
                    _LCD_pulse_clock
                  _LCD_write_command
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            1     1      0     120
                                              3 COMRAM     1     1      0
                  _LCD_write_command
 ---------------------------------------------------------------------------------
 (1) _LCD_cursor_set                                       2     1      1     268
                                              3 COMRAM     2     1      1
                  _LCD_write_command
 ---------------------------------------------------------------------------------
 (2) _LCD_write_command                                    3     3      0     120
                                              0 COMRAM     3     3      0
                    _LCD_pulse_clock
 ---------------------------------------------------------------------------------
 (3) _LCD_pulse_clock                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DHT11_Start                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DHT11_ReadData                                       2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DHT11_CheckResponse                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DHT11_CheckResponse
   _DHT11_ReadData
   _DHT11_Start
   _LCD_cursor_set
     _LCD_write_command
       _LCD_pulse_clock
   _LCD_init
     _LCD_clear
       _LCD_write_command
     _LCD_pulse_clock
     _LCD_write_command
   _LCD_write_char
     _LCD_write_data
       _LCD_pulse_clock
   _LCD_write_string
     _LCD_write_data
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          127      0       0      0.0%
COMRAM             127     60     103     81.1%
BITBIGSFRh         115      0       0      0.0%
BITBIGSFRll          8      0       0      0.0%
BITBIGSFRlh          2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     103      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Nov 14 19:51:58 2024

               main@Checksum 003C                           l20 074A                           l30 0A8C  
                         l31 0AA2                           l23 064E                           l17 0C62  
                         l33 0ABE                           l26 09E8                           l29 0A76  
                         l57 0C54                           l90 0C6C                           l87 0A5E  
               ___awdiv@sign 0006                          l161 0C36                          l171 0AF4  
                        l180 0BFA                          l420 080C                          l174 0B16  
                        l166 0AC4                          l183 0C08                          l177 0BEC  
                        l433 08BA                          l186 0C16                          l920 0B54  
                        l914 03D0                          l924 0BA4                          l950 0C70  
                        l927 0BBC                          l952 0C56                          l954 0C58  
                        l939 0964                          l956 0C60                          l876 0B88  
                        u205 069C                          u315 0560                          u500 0AD2  
                        u501 0ACE                          u325 057A                          u510 0AE6  
              main@T_Decimal 003A                          u511 0AE2                          u335 05A0  
                        u520 0B02                          u521 0AFE                          u185 065C  
                        u530 0B14                          u531 0B10                          u195 0676  
                        u700 081E                          u701 081A                          u470 0BFA  
                        u710 0838                          u471 0BF6                          u711 0834  
                        u480 0C08                          u640 075C                          u720 0852  
                        u800 0B98                          u481 0C04                          u641 0758  
                        u721 084E                          u801 0B94                          u490 0C16  
                        u650 0776                          u730 0870                          u810 023C  
                        u491 0C12                          u651 0772                          u731 086C  
                        u811 0238                          u660 079C                          u740 0886  
                        u900 039E                          u820 027A                          u661 0798  
                        u741 0882                          u901 039A                          u821 0276  
                        u670 07BA                          u750 08AA                          u830 0296  
                        u910 0B4C                          u671 07B6                          u751 08A6  
                        u831 0292                          u911 0B48                          u920 0A72  
                        u680 07D6                          u760 08CC                          u840 02CC  
                        u921 0A6E                          u681 07D2                          u761 08C8  
                        u841 02C6                          u930 0A88                          u690 07FC  
                        u770 08DC                          u850 02CE                          u931 0A84  
                        u691 07F8                          u771 08D8                          u940 0A9E  
                        u780 0902                          u860 032E                          u941 0A9A  
                        u781 08FE                          u861 032A                          u950 0AB4  
                        u790 0934                          u870 033E                          u951 0AB0  
                        u791 0930                          u871 033A                          u960 0A1C  
                        u880 034E                          u881 034A                          u970 0A4E  
                        u890 035E                          u891 035A                          u980 0A5E  
                        u981 0A5A                          u967 0A12                          u977 0A44  
                        _abs 0B8A                 ___awmod@sign 0006                          wreg 0FE8  
                       l1130 05FC                         l1122 0556                         ?_abs 0007  
                       l1060 06D2                         l1140 0C3E                         l1132 061C  
                       l1124 0558                         l1212 0C66                         l1070 0746  
                       l1062 06D6                         l1142 0C4E                         l1134 0636  
                       l1126 05D6                         l1064 06F8                         l1056 0652  
                       l1160 0996                         l1136 064A                         l1128 05DA  
                       l1066 0718                         l1058 0654                         l1138 0C38  
                       l1170 09B2                         l1162 0998                         l1154 0966  
                       l1260 0C34                         l1068 0732                         l1180 09CC  
                       l1172 09C2                         l1164 099A                         l1156 097E  
                       l1500 0838                         l1262 0BEC                         l1270 0AD2  
                       l1254 0C18                         l1190 09E4                         l1182 09CE  
                       l1174 09C6                         l1166 099C                         l1158 0994  
                       l1510 0870                         l1502 0840                         l1280 0B04  
                       l1272 0AD8                         l1264 0AC0                         l1256 0C1C  
                       l1184 09D2                         l1176 09C8                         l1168 09A0  
                       l1520 08AA                         l1512 0886                         l1504 0852  
                       l1600 0B4C                         l1282 0B14                         l1274 0AE6  
                       l1258 0C2A                         l1610 0A9E                         l1186 09D8  
                       l1178 09CA                         l1450 075C                         l1522 08B2  
                       l1514 088E                         l1506 085A                         l1530 08DC  
                       l1276 0AEE                         l1612 0AB4                         l1604 0A62  
                       l1188 09DE                         l1620 0A20                         l1460 0782  
                       l1452 0764                         l1516 0894                         l1508 0862  
                       l1540 0B8A                         l1532 08E6                         l1700 04B6  
                       l1278 0B02                         l1614 0AB8                         l1606 0A72  
                       l1622 0A22                         l1470 07BA                         l1462 078A  
                       l1454 0768                         l1446 074C                         l1518 089A  
                       l1542 0B98                         l1534 0902                         l1526 08BC  
                       l1550 0250                         l1630 0B6E                         l1710 0524  
                       l1702 04C0                         l1608 0A88                         l1616 09EA  
                       l1480 07E6                         l1472 07C0                         l1464 079C  
                       l1456 0776                         l1448 074E                         l1536 0934  
                       l1528 08CC                         l1560 02AE                         l1552 0254  
                       l1544 021A                         l1632 0B7E                         l1624 0B56  
                       l1712 0534                         l1704 04FC                         l1618 09F0  
                       l1474 07D6                         l1466 07A4                         l1482 07EC  
                       l1458 077E                         l1490 080E                         l1570 032E  
                       l1562 02B8                         l1554 025E                         l1546 023C  
                       l1626 0B5E                         l1706 0506                         l1484 07FC  
                       l1476 07DE                         l1468 07AC                         l1492 0810  
                       l1580 038A                         l1572 033E                         l1564 02D0  
                       l1556 027A                         l1548 0244                         l1628 0B66  
                       l1708 051A                         l1660 03E6                         l1652 03D2  
                       l1486 0804                         l1478 07E0                         l1494 081E  
                       l1574 034E                         l1582 038C                         l1566 0300  
                       l1558 0296                         l1670 0404                         l1662 03EC  
                       l1654 03DA                         l1496 0826                         l1576 035E  
                       l1568 031C                         l1584 03A2                         l1680 0446  
                       l1672 0416                         l1664 03F2                         l1656 03DE  
                       l1498 082A                         l1578 0370                         l1594 0B18  
                       l1690 0484                         l1682 044C                         l1674 0420  
                       l1666 03F8                         l1658 03E2                         l1588 03AE  
                       l1596 0B20                         l1692 048E                         l1684 045E  
                       l1676 042A                         l1668 03FE                         l1598 0B30  
                       l1694 0494                         l1686 0468                         l1678 043C  
                       l1696 049A                         l1688 0472                         l1698 04AC  
                       STR_1 0215                         STR_2 020F                         STR_3 0215  
                       STR_4 0214                         STR_5 020A                         STR_6 0204  
                       STR_7 0201                         u1000 04FC                         u1001 04F8  
                       u1017 053E                         u1027 0988                         u1037 09A6  
                       u1047 09B8                         u1057 0C44                         u1067 0C5A  
                       u1077 0C22                         u1087 0C2E                         u1097 0AD4  
                       abs@a 0007                         _dbuf 003D                         _main 03D2  
                       _prec 0063                         fsr0h 0FEA                         fsr1h 0FE2  
                       indf0 0FEF                         fsr2h 0FDA                         fsr0l 0FE9  
                       indf2 0FDF                         fsr1l 0FE1                         fsr2l 0FD9  
                       start 0000             ??_DHT11_ReadData 0001                 ___param_bank 0000  
             main@T_Integral 003B                        ??_abs 0009             __end_of_LCD_init 09EA  
                      ?_main 0001              __end_of___awdiv 080E              __end_of___awmod 08BC  
            ___awdiv@divisor 0003                        _LATA0 7C48              ___awdiv@counter 0005  
               vfpfcnvrt@fmt 000C                        _flags 0065                        _fputc 08BC  
                      _width 0061                        _putch 0C70                        tablat 0FF5  
                      status 0FD8              __end_of_sprintf 0B8A              __initialization 0BBE  
               __end_of_main 0554            ?_LCD_write_string 0004                       ??_main 002A  
              __activetblptr 0002           ??_LCD_write_string 0006            __end_of_LCD_clear 0C56  
                     _ADCON1 0FC1                       ?_fputc 0001             ___awdiv@dividend 0001  
                     ?_putch 0001          _DHT11_CheckResponse 0BEC       LCD_write_string@string 0004  
                     _OSCCON 0FD3                vfpfcnvrt@done 000F                 vfprintf@cfmt 0019  
                  ??___awdiv 0005                    ??___awmod 0005         ?_DHT11_CheckResponse 0001  
                     clear_0 0BDC             ___awdiv@quotient 0007              ___awmod@divisor 0003  
                     isa$std 0001              ___awmod@counter 0005                       fputc@c 0001  
               __pdataCOMRAM 0066                 __mediumconst 0000                       tblptrh 0FF7  
                     tblptrl 0FF6                       tblptru 0FF8                       putch@c 0001  
           __end_of_vfprintf 0B56                    ??_sprintf 001E                   __accesstop 0080  
    __end_of__initialization 0BE2                    ?_LCD_init 0001                ___rparam_used 0001  
             __pcstackCOMRAM 0001        ??_DHT11_CheckResponse 0001               _LCD_entry_mode 0066  
          _LCD_write_command 0650                __end_of_fputc 0966                __end_of_putch 0C72  
             _LCD_cursor_set 0A60           ?_LCD_write_command 0001          ??_LCD_write_command 0001  
                    ??_fputc 0004                      ??_putch 0001                   ??_LCD_init 0005  
  __end_of_LCD_write_command 074C       __end_of_LCD_cursor_set 0AC0     LCD_write_command@command 0003  
              ??_DHT11_Start 0001                      __Hparam 0000                      __Lparam 0000  
            ?_LCD_cursor_set 0004                      ___awdiv 074C                      ___awmod 080E  
             _LCD_write_char 0C64               _LCD_write_data 0554                    ?_vfprintf 0016  
               __psmallconst 0200                      __pcinit 0BBE                      __ramtop 0200  
                    __ptext0 03D2                      __ptext1 0B56                      __ptext2 0B18  
                    __ptext3 021A                      __ptext4 08BC                      __ptext5 0C70  
                    __ptext6 0B8A                      __ptext7 080E                      __ptext8 074C  
                    __ptext9 09EA             ___awmod@dividend 0001                      _sprintf 0B56  
                  _LCD_clear 0C38         end_of_initialization 0BE2                      fputc@fp 0003  
              __Lmediumconst 0000         LCD_cursor_set@column 0004          _LCD_display_control 0067  
     __end_of_LCD_write_char 0C6E       __end_of_LCD_write_data 0650            __end_of_vfpfcnvrt 03D2  
        __end_of_DHT11_Start 0C38                      postdec2 0FDD                      postinc0 0FEE  
                    postinc1 0FE6                      postinc2 0FDE             vfpfcnvrt@convarg 0011  
                 ??_vfprintf 0019                    _PORTAbits 0F80            ??_LCD_pulse_clock 0001  
                  _TRISAbits 0F92                    _TRISDbits 0F95                   ?_LCD_clear 0001  
         DHT11_ReadData@data 0002              ?_LCD_write_char 0001              ?_LCD_write_data 0001  
                vfpfcnvrt@ap 000D                  vfpfcnvrt@cp 0010                  vfpfcnvrt@fp 000B  
              __pidataCOMRAM 0C6E          start_initialization 0BBE                  __end_of_abs 0BBE  
                _DHT11_Start 0C18  __end_of_DHT11_CheckResponse 0C18                  vfprintf@fmt 0017  
    LCD_write_char@character 0004                  __pbssCOMRAM 003D                  ??_LCD_clear 0004  
           _LCD_write_string 09EA             ??_LCD_cursor_set 0005                     ?___awdiv 0001  
                   ?___awmod 0001               _DHT11_ReadData 0AC0                  __smallconst 0200  
                   ?_sprintf 001A           LCD_write_data@data 0003                     _LATDbits 0F8C  
                   _LCD_init 0966              _LCD_pulse_clock 0C56       __end_of_DHT11_ReadData 0B18  
                  _vfpfcnvrt 021A                    main@value 002E                   vfpfcnvrt@c 0015  
           ??_LCD_write_char 0004             ??_LCD_write_data 0001                     __Hrparam 0000  
                  modff@F522 005D                   vfprintf@ap 0018                     __Lrparam 0000  
                 vfprintf@fp 0016            LCD_cursor_set@row 0005              ?_DHT11_ReadData 0001  
                 ?_vfpfcnvrt 000B              DHT11_ReadData@i 0001                   sprintf@fmt 001B  
                   __ptext10 0C64                     __ptext11 0554                     __ptext12 0966  
                   __ptext13 0C38                     __ptext14 0A60                     __ptext15 0650  
                   __ptext16 0C56                     __ptext17 0C18                     __ptext18 0AC0  
                   __ptext19 0BEC      __end_of_LCD_pulse_clock 0C64                 ?_DHT11_Start 0001  
                   isa$xinst 0000                     _vfprintf 0B18     __end_of_LCD_write_string 0A60  
          LCD_write_string@i 0008                    sprintf@ap 001E              main@RH_Integral 0039  
                ??_vfpfcnvrt 000E               main@RH_Decimal 0038                     sprintf@f 001F  
                   sprintf@s 001A             ?_LCD_pulse_clock 0001  
